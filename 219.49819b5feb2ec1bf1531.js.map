{"version":3,"file":"219.49819b5feb2ec1bf1531.js","mappings":"kOAIA,KAAQA,SAAS,KAAe,KAAa,KAAY,KAAO,KAAS,MAezE,MAAMC,EAAmB,CACxB,UACA,UACA,UACA,UACA,UACA,WAGKC,EAA4BC,IACjC,MAAMC,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYE,IAE/BD,EAAOE,KAAKL,EAAiBI,EAAIJ,EAAiBM,SAEnD,OAAOH,CAAM,EAkDd,EA/CsD,I,IAAA,WAAEI,GAAa,EAAK,4BAAEC,GAA8B,GAAK,EAAKC,E,yUAAK,GAAnE,8CACrD,MAAM,WAAEC,EAAU,mBAAEC,EAAkB,aAAEC,EAAY,WAAEC,EAAU,WAAEC,GAAeL,EAE3EM,EAAY,CACjBC,OAAQL,EACRM,SAAU,CACR,CACAC,MAAON,EACPO,KAAMT,EACNU,gBAAiBN,GAAab,EAAyBS,EAAWJ,QAClEe,YAAa,KAKRC,EAAe,CACtBC,YAAY,EACZC,qBAAqB,EACrBC,QAAS,CACRC,OAAQ,CACPC,SAAUlB,EAAMmB,gBAAkB,SAClCC,QAAStB,GAEVuB,MAAO,CACND,SAAS,EACTE,KAAMlB,GAEPmB,QAAS,CACRZ,gBAAiB,UACjBa,WAAY,UACZC,eAAgB1B,EAChB2B,UAAW,CACV,KAAAjB,CAAMkB,GACL,MAAQC,kBAAmBC,EAAQC,kBAAmBC,GAAW/B,EAC3DgC,EAAM,GAAGD,GAAU,KAAKJ,EAAYM,MAAMJ,GAAU,KAC1D,OAAO9B,EAA8B,GAAKiC,CAC3C,MAMJ,OACC,gBAAC,KAAG,CAACtB,KAAMJ,EAAW4B,QAASrB,GAC/B,E,wBCtEF,MAyDA,EAzD0B,KACzB,MAAM,SAAEsB,EAAQ,YAAEC,IAAgB,EAAAC,EAAA,MAC5B,eAAEC,IAAmB,EAAAC,EAAA,MACrB,oBAAEC,GAAwBL,EAE1BM,EAAQD,EACRE,GAAmB,QAAaD,GAOtC,OACC,uBAAKE,UAAW,2BACf,uBAAKA,UAAU,qBACd,0BAAKF,EAAMG,WACX,2BACC,0BAAQD,UAAW,iBAAkBtB,MAAM,QAAQwB,QAVxC,KACdT,EAAY,OAAD,wBAAMD,GAAQ,CAAEW,sBAAkBC,KAC7CT,GAAgB,GAQqD,OAGpE,uBAAKK,UAAU,qBACd,uBAAKA,UAAU,mBACd,gBAAC,IAAU,CAACF,MAAOA,IACnB,gBAAC,IAAa,CAACA,MAAOA,EAAOO,UAAWN,KAEzC,uBAAKC,UAAU,mBACd,2BACC,gBAAC,EAAQ,CACRvC,WAAY,mCACZH,WAAayC,EAAiBO,KAAKvC,GAASwC,QAAO,QAAcxC,EAAKyC,WAAaV,EAAMW,SAAW,IAAK,MACzGlD,mBAAoBwC,EAAiBO,KAAKvC,GAAS,UAAUA,EAAK2C,UAClEzB,kBAAkB,OAGpB,2BACC,gBAAC,EAAQ,CACRxB,WAAY,kCACZH,WAAYyC,EAAiBO,KAAKvC,GAASwC,QAAO,QAAcxC,EAAK4C,eAAgB,MACrFpD,mBAAoBwC,EAAiBO,KAAKvC,GAAS,UAAUA,EAAK2C,UAClEvB,kBAAkB,YAGpB,2BACC,gBAAC,EAAQ,CACR1B,WAAY,oCACZH,WAAYyC,EAAiBO,KAAKvC,GAASwC,QAAO,QAAcxC,EAAK6C,kBAAmB,MACxFrD,mBAAoBwC,EAAiBO,KAAKvC,GAAS,UAAUA,EAAK2C,UAClEvB,kBAAkB,UAMvB,C","sources":["webpack://asset-exit-strategies/./src/pages/display/components/barChart.tsx","webpack://asset-exit-strategies/./src/pages/display/display.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\ninterface PercentageSoldChartProps {\r\n\tchartLabel?: string;\r\n\tdataSetLabel?: string;\r\n\tdataPoints: number[];\r\n\tdataPointLabelData: string[];\r\n\tshowLegend?: boolean;\r\n\thideTooltipColorBoxAndLabel?: boolean;\r\n\ttooltipTextSuffix?: string;\r\n\ttooltipTextPrefix?: string;\r\n\tchartColor?: string;\r\n\tlegendPosition?: \"top\" | \"bottom\" | \"left\" | \"right\";\r\n}\r\n\r\nconst predefinedColors = [\r\n\t\"#FF6384\", // Red\r\n\t\"#36A2EB\", // Blue\r\n\t\"#FFCE56\", // Yellow\r\n\t\"#4BC0C0\", // Green\r\n\t\"#9966FF\", // Purple\r\n\t\"#FF9F40\", // Orange\r\n];\r\n\r\nconst generateBackgroundColors = (dataLength: number) => {\r\n\tconst colors = [];\r\n\tfor (let i = 0; i < dataLength; i++) {\r\n\t\t// Cycle through the predefined colors\r\n\t\tcolors.push(predefinedColors[i % predefinedColors.length]);\r\n\t}\r\n\treturn colors;\r\n};\r\n\r\nconst BarChart: React.FC<PercentageSoldChartProps> = ({ showLegend = false, hideTooltipColorBoxAndLabel = false, ...props }) => {\r\n\tconst { dataPoints, dataPointLabelData, dataSetLabel, chartLabel, chartColor } = props;\r\n\r\n\tconst chartData = {\r\n\t\tlabels: dataPointLabelData,\r\n\t\tdatasets: [\r\n\t\t  {\r\n\t\t\t\tlabel: dataSetLabel,\r\n\t\t\t\tdata: dataPoints,\r\n\t\t\t\tbackgroundColor: chartColor|| generateBackgroundColors(dataPoints.length),\r\n\t\t\t\tborderWidth: 1,\r\n\t\t  },\r\n\t\t],\r\n\t  };\r\n\r\n\t  const chartOptions = {\r\n\t\tresponsive: true,\r\n\t\tmaintainAspectRatio: false,\r\n\t\tplugins: {\r\n\t\t\tlegend: {\r\n\t\t\t\tposition: props.legendPosition || \"bottom\" as const,\r\n\t\t\t\tdisplay: showLegend, // when true, props should include dataSetLabel property\r\n\t\t\t},\r\n\t\t\ttitle: {\r\n\t\t\t\tdisplay: true,\r\n\t\t\t\ttext: chartLabel,\r\n\t\t\t},\r\n\t\t\ttooltip: {\r\n\t\t\t\tbackgroundColor: \"#000000\",\r\n\t\t\t\ttitleColor: \"#FFFFFF\",\r\n\t\t\t\tdisplayColors: !hideTooltipColorBoxAndLabel,\r\n\t\t\t\tcallbacks: {\r\n\t\t\t\t\tlabel(tooltipItem: any) {\r\n\t\t\t\t\t\tconst { tooltipTextSuffix: suffix, tooltipTextPrefix: prefix } = props;\r\n\t\t\t\t\t\tconst tip = `${prefix || \"\"}${tooltipItem.raw}${suffix || \"\"}`;\r\n\t\t\t\t\t\treturn hideTooltipColorBoxAndLabel ? \"\" : tip;\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t  };\r\n\r\n\treturn (\r\n\t\t<Bar data={chartData} options={chartOptions} />\r\n\t);\r\n};\r\n\r\nexport default BarChart;","import * as React from \"react\";\r\nimport useAppState from \"../../hooks/useAppState\";\r\nimport useNavigation from \"../../hooks/useNavigation\";\r\nimport { Asset } from \"../../models\";\r\nimport ScenarioTable from \"../common/components/scenarioTable\";\r\nimport { getTableData } from \"../../utilities/scenario\";\r\nimport BarChart from \"./components/barChart\";\r\nimport { RoundToPlaces } from \"../../utilities/numbers\";\r\nimport \"./display.less\";\r\nimport SummaryBar from \"../scenario/components/summaryBar\";\r\n\r\nconst Display: React.FC = () => {\r\n\tconst { appState, setAppState } = useAppState();\r\n\tconst { navigateToMain } = useNavigation();\r\n\tconst { assetBeingDisplayed } = appState;\r\n\r\n\tconst asset = assetBeingDisplayed as Asset;\r\n\tconst assetDisplayData = getTableData(asset);\r\n\r\n\tconst cancel = () => {\r\n\t\tsetAppState({ ...appState, assetBeingEdited: undefined });\r\n\t\tnavigateToMain();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={\"asset-display-container\"}>\r\n\t\t\t<div className=\"heading-container\">\r\n\t\t\t\t<h2>{asset.AssetName}</h2>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button className={\"unicode-button\"} title=\"Close\" onClick={cancel}>‚ùå</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"content-container\">\r\n\t\t\t\t<div className=\"table-container\">\r\n\t\t\t\t\t<SummaryBar asset={asset}/>\r\n\t\t\t\t\t<ScenarioTable asset={asset} tableData={assetDisplayData} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"chart-container\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<BarChart\r\n\t\t\t\t\t\t\tchartLabel={\"% Asset Sold at Each Price Level\"}\r\n\t\t\t\t\t\t\tdataPoints={ assetDisplayData.map((data) => Number(RoundToPlaces(data.AmountSold / asset.Quantity * 100, 2)))}\r\n\t\t\t\t\t\t\tdataPointLabelData={assetDisplayData.map((data) => `Price $${data.Price}`)}\r\n\t\t\t\t\t\t\ttooltipTextSuffix=\"%\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<BarChart\r\n\t\t\t\t\t\t\tchartLabel={\"Remaining Assets by Price Level\"}\r\n\t\t\t\t\t\t\tdataPoints={assetDisplayData.map((data) => Number(RoundToPlaces(data.RemainingAsset, 2)))}\r\n\t\t\t\t\t\t\tdataPointLabelData={assetDisplayData.map((data) => `Price $${data.Price}`)}\r\n\t\t\t\t\t\t\ttooltipTextPrefix=\"Units \"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<BarChart\r\n\t\t\t\t\t\t\tchartLabel={\"Cumulative Revenue by Price Level\"}\r\n\t\t\t\t\t\t\tdataPoints={assetDisplayData.map((data) => Number(RoundToPlaces(data.CumulativeRevenue, 2)))}\r\n\t\t\t\t\t\t\tdataPointLabelData={assetDisplayData.map((data) => `Price $${data.Price}`)}\r\n\t\t\t\t\t\t\ttooltipTextPrefix=\" $\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Display;\r\n\r\n"],"names":["register","predefinedColors","generateBackgroundColors","dataLength","colors","i","push","length","showLegend","hideTooltipColorBoxAndLabel","props","dataPoints","dataPointLabelData","dataSetLabel","chartLabel","chartColor","chartData","labels","datasets","label","data","backgroundColor","borderWidth","chartOptions","responsive","maintainAspectRatio","plugins","legend","position","legendPosition","display","title","text","tooltip","titleColor","displayColors","callbacks","tooltipItem","tooltipTextSuffix","suffix","tooltipTextPrefix","prefix","tip","raw","options","appState","setAppState","useAppState","navigateToMain","useNavigation","assetBeingDisplayed","asset","assetDisplayData","className","AssetName","onClick","assetBeingEdited","undefined","tableData","map","Number","AmountSold","Quantity","Price","RemainingAsset","CumulativeRevenue"],"sourceRoot":""}