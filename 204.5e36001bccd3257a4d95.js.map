{"version":3,"file":"204.5e36001bccd3257a4d95.js","mappings":"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","sources":["webpack://asset-exit-strategies/./src/components/controls/numberInput.tsx","webpack://asset-exit-strategies/./src/pages/scenario/components/scenarioInput.tsx","webpack://asset-exit-strategies/./src/hooks/useDeepCompareEffect.ts","webpack://asset-exit-strategies/./src/pages/scenario/components/priceLevelnput.tsx","webpack://asset-exit-strategies/./src/components/controls/errorPanel.tsx","webpack://asset-exit-strategies/./src/pages/scenario/scenario.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\ninterface NumberInputProps {\r\n\tid: string;\r\n\tname: string;\r\n\tvalue: string | number;\r\n\tmin?: number;\r\n\tmax?: number;\r\n\trequired?: boolean;\r\n\tdisabled?: boolean;\r\n\tenforceMinMax?: boolean;\r\n\tonChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n\tplaceholder?: string;\r\n}\r\n\r\nconst NumberInput: React.FC<NumberInputProps> = ({ min = 0, max, value, disabled = false, ...props }) => {\r\n\tconst [internalValue, setInternalValue] = useState(value === 0 ? \"\" : value);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetInternalValue(value);\r\n\t}, [value]);\r\n\r\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst newValue = e.target.value;\r\n\r\n\t\t// Allow the value to be '.' so that the user can enter a decimal without a leading zero\r\n\t\tif (newValue === \".\" || (!isNaN(Number(newValue)) && Number(newValue) >= min)) {\r\n\t\t\tsetInternalValue(newValue);\r\n\t\t\tprops.onChange(e);\r\n\t\t}\r\n\t};\r\n\r\n\tconst onInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tconst value = parseFloat(e.target.value);\r\n\t\tif (value >= min && (max !== undefined ? value <= max : true)) {\r\n\t\t\tsetInternalValue(value);\r\n\t\t\thandleChange(e);\r\n\t\t}\r\n\t};\r\n\r\n\tconst onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\t\tconst value = e.currentTarget.value;\r\n\r\n\t\tif (e.key === \".\" || e.key === \"Decimal\") {\r\n\t\t\tif (value === \"\") {\r\n\t\t\t\t// Prevent the default behavior of entering the period directly\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\t// Set the value to \"0.\" when the user enters a decimal without a leading zero\r\n\t\t\t\tconst newValue = \"0.\";\r\n\t\t\t\tsetInternalValue(newValue);\r\n\t\t\t\tprops.onChange({\r\n\t\t\t\t\t...e,\r\n\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t...e.target,\r\n\t\t\t\t\t\tvalue: newValue,\r\n\t\t\t\t\t} as EventTarget & HTMLInputElement,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<input\r\n\t\t\tid={props.id}\r\n\t\t\tname={props.name}\r\n\t\t\ttype=\"text\" // Set to \"text\" to allow flexibility in handling '.' as first character\r\n\t\t\tvalue={internalValue}\r\n\t\t\tmin={min}\r\n\t\t\tdisabled={disabled}\r\n\t\t\tonInput={props.enforceMinMax ? onInput : handleChange}\r\n\t\t\tplaceholder={props.placeholder}\r\n\t\t\tonKeyDown={onKeyDown}\r\n\t\t\tautoComplete=\"off\"\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default NumberInput;\r\n","import React, { useState } from \"react\";\r\nimport { Asset, MethodType } from \"../.././../models\";\r\nimport CustomModal from \"../../../components/controls/customModal\";\r\nimport NumberInput from \"../../../components/controls/numberInput\";\r\nimport \"./scenarioInput.less\";\r\n\r\ninterface ScenarioInputProps {\r\n\tasset: Asset;\r\n\tonChange: (asset: Asset) => void;\r\n}\r\n\r\nconst ScenarioInput: React.FC<ScenarioInputProps> = (props) => {\r\n\tconst { asset, onChange } = props;\r\n\tconst [modalIsOpen, setIsOpen] = useState(false);\r\n\r\n\tconst modelText = `Changing your distribution type to Percentage will invalidate \r\n\t\tprevious set Price Levels. Would you like to continue?`;\r\n\r\n\tfunction handleChange(property: keyof typeof asset) {\r\n\t\treturn (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tconst value = property === \"Quantity\" ? Number(e.target.value) : e.target.value;\r\n\t\t\tonChange({ ...asset, [property]: value });\r\n\t\t};\r\n\t}\r\n\r\n\tfunction handleMethodTypeChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n\t\tconst value = e.target.value;\r\n\t\tif (asset.PriceLevels.length) {\r\n\t\t\tsetIsOpen(true);\r\n\t\t} else {\r\n\t\t\tonChange({ ...asset, Method: value as MethodType });\r\n\t\t}\r\n\t}\r\n\r\n\tconst onModalConfirmation = (retVal: boolean) => {\r\n\t\tsetIsOpen(false);\r\n\t\tif (retVal) {\r\n\t\t\tconst flipVal = asset.Method === \"Units\" ? \"Percentage\" : \"Units\";\r\n\t\t\tonChange({ ...asset, Method: flipVal, PriceLevels: [] });\r\n\t\t}\r\n\t};\r\n\r\n\tfunction getInputElements() {\r\n\t\treturn (\r\n\t\t\t<div className=\"asset-info-container\">\r\n\t\t\t\t<div className=\"heading-container\">\r\n\t\t\t\t\t<div className=\"title-container\">\r\n\t\t\t\t\t\t<h4>Asset Details</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"AssetName\">Asset Name</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tid=\"AssetName\"\r\n\t\t\t\t\t\tname=\"AssetName\"\r\n\t\t\t\t\t\tvalue={asset.AssetName}\r\n\t\t\t\t\t\tonChange={handleChange(\"AssetName\")}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t\t\tmaxLength={16}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"Quantity\">Quantity</label>\r\n\t\t\t\t\t<NumberInput\r\n\t\t\t\t\t\tid=\"Quantity\"\r\n\t\t\t\t\t\tname=\"Quantity\"\r\n\t\t\t\t\t\tvalue={asset.Quantity ? asset.Quantity : \"\"}\r\n\t\t\t\t\t\tonChange={handleChange(\"Quantity\")}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label >Disposition</label>\r\n\t\t\t\t\t<div className=\"option-group\">\r\n\t\t\t\t\t\t<label className=\"radio-label\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\t\t\t\tvalue=\"Units\"\r\n\t\t\t\t\t\t\t\tchecked={asset.Method === \"Units\"}\r\n\t\t\t\t\t\t\t\tonChange={handleMethodTypeChange}\r\n\t\t\t\t\t\t\t/>{\"Units\"}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<label className=\"radio-label\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"radio\"\r\n\t\t\t\t\t\t\t\tvalue=\"Percentage\"\r\n\t\t\t\t\t\t\t\tchecked={asset.Method === \"Percentage\"}\r\n\t\t\t\t\t\t\t\tonChange={handleMethodTypeChange}\r\n\t\t\t\t\t\t\t/>{\"Percentage\"}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<CustomModal\r\n\t\t\t\t\tisOpen={modalIsOpen}\r\n\t\t\t\t\tonCancel={() => onModalConfirmation(false)}\r\n\t\t\t\t\tonAccept={() => onModalConfirmation(true)}\r\n\t\t\t\t\tprimaryButtonText={\"Continue\"}\r\n\t\t\t\t\theight=\"230px\"\r\n\t\t\t\t\theaderText={\"Confirm Change\"} >\r\n\t\t\t\t\t<p>{ modelText }</p>\r\n\t\t\t\t</CustomModal>\r\n\t\t\t</div >\r\n\t\t);\r\n\t}\r\n\r\n\treturn getInputElements();\r\n};\r\n\r\nexport default ScenarioInput;","import { DependencyList, EffectCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nconst useDeepCompareEffect = (callback: EffectCallback, dependencies: DependencyList) => {\r\n\tconst currentDependenciesRef = useRef<DependencyList>();\r\n\tconst [isEqual, setIsEqual] = useState<(value: any, other: any) => boolean>();\r\n\r\n\tuseEffect(() => {\r\n\t\t// Dynamically import lodash isEqual\r\n\t\timport(\"lodash.isequal\").then(module => {\r\n\t\t\tsetIsEqual(() => module.default);\r\n\t\t});\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isEqual && !isEqual(currentDependenciesRef.current, dependencies)) {\r\n\t\t\tcurrentDependenciesRef.current = dependencies;\r\n\t\t}\r\n\t}, [dependencies, isEqual]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (isEqual) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t\t// Only run the effect if isEqual is loaded and dependencies change\r\n\t}, [isEqual, currentDependenciesRef.current]);\r\n};\r\n\r\nexport default useDeepCompareEffect;\r\n","import React, { useEffect, useState }  from \"react\";\r\nimport { Asset, PriceLevel, TransientPriceLevel } from \"../.././../models\";\r\nimport InfoTooltip from \"../../../components/controls/infoTooltip\";\r\nimport { calculateRemainingAsset, filterPriceLevelsWithoutRevenue, getNewPriceLevel } from \"../../../utilities/scenario\";\r\nimport NumberInput from \"../../../components/controls/numberInput\";\r\nimport useDeepCompareEffect from \"../../../hooks/useDeepCompareEffect\";\r\nimport \"./priceLevelInput.less\";\r\n\r\ninterface PriceLevelInputProps {\r\n\tasset: Asset;\r\n\tpriceLevelBeingEdited?: PriceLevel;\r\n\tonChange: (asset: Asset) => void;\r\n}\r\n\r\nconst PriceLevelInput: React.FC<PriceLevelInputProps> = ({ asset, priceLevelBeingEdited, onChange }) => {\r\n\tconst [priceLevel, setPriceLevel] = useState<PriceLevel | TransientPriceLevel>(priceLevelBeingEdited || getNewPriceLevel(asset));\r\n\tconst [remainingAsset, setRemainingAsset] = useState<number>(calculateRemainingAsset(asset));\r\n\r\n\tuseEffect(() => { setPriceLevel(getNewPriceLevel(asset)) }, [asset]);\r\n\tuseEffect(() => {\r\n\t\tif (priceLevelBeingEdited) {\r\n\t\t\tsetPriceLevel(priceLevelBeingEdited)\r\n\t\t}}, [priceLevelBeingEdited]\r\n\t);\r\n\r\n\tuseDeepCompareEffect(() => {\r\n\t\tconst additionalRemaining = priceLevelBeingEdited ? priceLevelBeingEdited.Quantity : 0;\r\n\t\tconst remaining = calculateRemainingAsset(asset) + additionalRemaining;\r\n\t\tsetRemainingAsset(remaining)\r\n\t}, [asset.PriceLevels, priceLevelBeingEdited, asset.Quantity]);\r\n\r\n\tconst percentageInfoText = `Percentage calculates the amount of assets to sell at each price \r\n\t\tby multiplying the chosen percentage by remaining assets.`;\r\n\tconst unitsInfoText = \"Units is the exact amount of remaining assets to sell at each price\";\r\n\r\n\tfunction addPriceLevel() {\r\n\t\tonChange({...asset, PriceLevels: [...asset.PriceLevels, priceLevel as PriceLevel] });\r\n\t}\r\n\r\n\tfunction editPriceLevel() {\r\n\t\tconst localLevel = priceLevel as PriceLevel;\r\n\t\tlet updatedLevels = asset.PriceLevels.map(level => { return level.Id === localLevel.Id ? localLevel : level });\r\n\t\t// Since any price level can be edited and potentially allocate all the remaining asset\r\n\t\t// we need to filter out any subsequent price levels that not longer have revenue.\r\n\t\t// This is only necessary when the asset is allocated by percentage.\r\n\t\tif (asset.Method === \"Percentage\") {\r\n\t\t\tupdatedLevels = filterPriceLevelsWithoutRevenue(asset.Quantity, updatedLevels);\r\n\t\t}\r\n\t\tonChange({...asset, PriceLevels: updatedLevels });\r\n\t}\r\n\r\n\tfunction handlePriceLevelChange(property: keyof typeof priceLevel) {\r\n\t\treturn (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\t\tif (property === \"Quantity\" && asset.Method === \"Percentage\") {\r\n\t\t\t\tsetPriceLevel({ ...priceLevel, [property]: e.target.value });\r\n\t\t\t} else {\r\n\t\t\t\tsetPriceLevel({ ...priceLevel, [property]: Number(e.target.value) });\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"price-level-container\">\r\n\t\t\t<div className=\"heading-container\">\r\n\t\t\t\t<div className=\"title-container\">\r\n\t\t\t\t\t<h4>Price Levels</h4>\r\n\t\t\t\t\t<div className=\"info-container\">\r\n\t\t\t\t\t\t<InfoTooltip tooltipText={asset.Method === \"Units\" ? unitsInfoText : percentageInfoText} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={\"unicode-button\"}\r\n\t\t\t\t\ttitle={`${priceLevelBeingEdited ? \"Update\" : \"Add\"} Price Level`}\r\n\t\t\t\t\tdisabled={!priceLevelBeingEdited && (!remainingAsset || !priceLevel.Price || !priceLevel.Quantity)}\r\n\t\t\t\t\tonClick={priceLevelBeingEdited ? editPriceLevel : addPriceLevel}>{priceLevelBeingEdited ? \"💾\" : \"➕\"}\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label htmlFor=\"Price\">Selling Price</label>\r\n\t\t\t\t<NumberInput\r\n\t\t\t\t\tid=\"Price\"\r\n\t\t\t\t\tname=\"Price\"\r\n\t\t\t\t\tvalue={priceLevel.Price}\r\n\t\t\t\t\tonChange={handlePriceLevelChange(\"Price\")}\r\n\t\t\t\t\tenforceMinMax\r\n\t\t\t\t\trequired\r\n\t\t\t\t\tdisabled={remainingAsset === 0 && !priceLevelBeingEdited}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"form-group\">\r\n\t\t\t\t<label htmlFor=\"Quantity\">{ asset.Method }</label>\r\n\t\t\t\t<NumberInput\r\n\t\t\t\t\tid=\"Quantity\"\r\n\t\t\t\t\tname=\"Quantity\"\r\n\t\t\t\t\tvalue={priceLevel.Quantity}\r\n\t\t\t\t\tmin={0}\r\n\t\t\t\t\trequired\r\n\t\t\t\t\tdisabled={remainingAsset === 0 && !priceLevelBeingEdited}\r\n\t\t\t\t\tenforceMinMax\r\n\t\t\t\t\tonChange={handlePriceLevelChange(\"Quantity\")}\r\n\t\t\t\t\t{...(asset.Method === \"Percentage\" ? { max: 1 } : { max: remainingAsset })}\r\n\t\t\t\t/>\r\n\t\t\t\t{asset.Method === \"Percentage\" &&\r\n\t\t\t\t\t<div className=\"slider\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tid=\"slider\"\r\n\t\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\t\tmax=\"1\"\r\n\t\t\t\t\t\t\tstep=\"0.01\"\r\n\t\t\t\t\t\t\tvalue={priceLevel.Quantity === \"\" ? 0 : priceLevel.Quantity}\r\n\t\t\t\t\t\t\tonChange={handlePriceLevelChange(\"Quantity\")}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t);\r\n\r\n};\r\n\r\nexport default PriceLevelInput;\r\n","import React, { CSSProperties } from \"react\";\r\nimport { ScenarioError } from \"../../models\";\r\nimport \"./errorPanel.less\";\r\n\r\ninterface ErrorPanelProps {\r\n\ttitle?: string;\r\n\terrors: ScenarioError[];\r\n\tcustomStyle?: CSSProperties ;\r\n}\r\n\r\nconst ErrorPanel: React.FC<ErrorPanelProps> = ({ errors, title = \"Errors\", customStyle }) => {\r\n\treturn (\r\n\t\t<div className={\"error-container\"} style={customStyle}>\r\n\t\t\t<h4>{title}</h4>\r\n\t\t\t<div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{errors.map((error, index) => (\r\n\t\t\t\t\t\t<li key={index}>{error.Message}</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ErrorPanel;","import React, { useEffect, useState } from \"react\";\r\nimport useNavigation from \"../../hooks/useNavigation\";\r\nimport useUserData from \"../../hooks/useUserData\";\r\nimport useAppState from \"../../hooks/useAppState\";\r\nimport ScenarioInput from \"./components/scenarioInput\";\r\nimport PriceLevelInput from \"./components/priceLevelnput\";\r\nimport ScenarioTable from \"../common/components/scenarioTable\";\r\nimport { Asset, ModalProperties, PriceLevel, ScenarioError } from \"../../models\";\r\nimport CustomModal from \"../../components/controls/customModal\";\r\nimport isEqual from \"lodash/isEqual\";\r\nimport { getDefaultAsset, getTableData } from \"../../utilities/scenario\";\r\nimport SummaryBar from \"./components/summaryBar\";\r\nimport ErrorPanel from \"../../components/controls/errorPanel\";\r\nimport \"./scenario.less\";\r\n\r\nconst Scenario: React.FC = () => {\r\n\tconst { assets, addOrUpdateScenario, removeScenario } = useUserData();\r\n\tconst { appState, setAppState } = useAppState();\r\n\tconst { navigateToMain } = useNavigation();\r\n\tconst [modalProperties, setModalProperties] = useState<ModalProperties>({ isOpen: false });\r\n\r\n\tconst startingAssetValue = appState.assetBeingEdited || getDefaultAsset(assets);\r\n\tconst [originalAsset] = useState<Asset>(startingAssetValue);\r\n\tconst [asset, setAsset] = useState<Asset>(startingAssetValue);\r\n\r\n\tconst [priceLevelBeingEdited, setPriceLevelBeingEdited] = useState<PriceLevel | undefined>(undefined);\r\n\tconst [scenarioErrors, setScenarioErrors] = useState<ScenarioError[]>([]);\r\n\tconst [hasTableError, setHasTableError] = useState<boolean>(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetScenarioErrors([]);\r\n\t\tasset.PriceLevels.length === 0 && setHasTableError(false);\r\n\t}, [asset.AssetName, asset.Quantity, asset.PriceLevels.length]);\r\n\r\n\tconst cancel = () => {\r\n\t\tif (!isEqual(originalAsset, asset)) {\r\n\r\n\t\t\tconst onModalConfirmation = (retVal: boolean) => {\r\n\t\t\t\tsetModalProperties({ ...modalProperties, isOpen: false });\r\n\t\t\t\tif (retVal) {\r\n\t\t\t\t\tsetAppState({ ...appState, editingScenario: false });\r\n\t\t\t\t\tnavigateToMain();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tsetModalProperties({\r\n\t\t\t\tisOpen: true,\r\n\t\t\t\theaderText: \"Unsaved Changes\",\r\n\t\t\t\tbodyText: `You've made changes that haven't been saved yet. \r\n\t\t\t\t\tAre you sure you want to proceed and discard your changes?`,\r\n\t\t\t\tonCancel: () => onModalConfirmation(false),\r\n\t\t\t\tonAccept: () => onModalConfirmation(true),\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsetAppState({ ...appState, editingScenario: false });\r\n\t\t\tnavigateToMain();\r\n\t\t}\r\n\t};\r\n\r\n\tconst deleteScenario = () => {\r\n\t\tconst onModalConfirmation = (retVal: boolean) => {\r\n\t\t\tsetModalProperties({ ...modalProperties, isOpen: false });\r\n\t\t\tif (retVal) {\r\n\t\t\t\tsetAppState({ ...appState, editingScenario: false });\r\n\t\t\t\tremoveScenario(asset.id);\r\n\t\t\t\tnavigateToMain();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tsetModalProperties({\r\n\t\t\tisOpen: true,\r\n\t\t\theaderText: \"Delete Scenario\",\r\n\t\t\tprimaryButtonText: \"Confirm\",\r\n\t\t\tbodyText: `This action will permanently delete your ${asset.AssetName ? asset.AssetName : \"\"}\r\n\t\t\t\texit strategy. Are you sure you want to continue?`,\r\n\t\t\tonCancel: () => onModalConfirmation(false),\r\n\t\t\tonAccept: () => onModalConfirmation(true),\r\n\t\t});\r\n\t};\r\n\r\n\tconst deletePriceLevel = (priceLevelId: number) => {\r\n\t\tconst updatedLevels = asset.PriceLevels.filter(level => level.Id !== priceLevelId);\r\n\t\tsetAsset({ ...asset, PriceLevels: updatedLevels });\r\n\t}\r\n\r\n\tconst editPriceLevel = (priceLevelId: number) => {\r\n\t\tconst priceLevel = asset.PriceLevels.find(level => level.Id === priceLevelId);\r\n\t\tsetPriceLevelBeingEdited(priceLevel);\r\n\t}\r\n\r\n\tconst updatePriceLevel = (asset: Asset) => {\r\n\t\tsetAsset(asset);\r\n\t\tsetPriceLevelBeingEdited(undefined);\r\n\t}\r\n\r\n\tconst validateRequiredFields = (): boolean => {\r\n\t\tconst errors: ScenarioError[] = [];\r\n\t\tif (!asset.AssetName) { errors.push({ Field: \"AssetName\", Message: \"Asset name is required.\" })}\r\n\t\tif (!asset.Quantity) { errors.push({ Field: \"Quantity\", Message: \"An Asset Quantity is required.\" })}\r\n\t\tif (!asset.PriceLevels || asset.PriceLevels.length === 0) {\r\n\t\t\terrors.push({ Field: \"PriceLevels\", Message: \"At least one Price Level is required.\" })}\r\n\t\tif (hasTableError) {errors.push({ Field: \"Table\", Message: \"One or more Price Levels have an error.\"  });}\r\n\t\tsetScenarioErrors(errors);\r\n\t\treturn errors.length === 0;\r\n\t}\r\n\r\n\tconst saveScenario = () => {\r\n\t\tif (!isEqual(originalAsset, asset)) {\r\n\r\n\t\t\tif (!validateRequiredFields()) {return; }\r\n\t\t\taddOrUpdateScenario(asset);\r\n\t\t\tnavigateToMain();\r\n\r\n\t\t} else {\r\n\t\t\tcancel();\r\n\t\t}\r\n\t}\r\n\r\n\tconst onAssetChange = (asset: Asset) => {\r\n\t\tsetAsset(asset);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div id=\"ScenarioContainer\" className=\"scenario-container\">\r\n\t\t\t\t<div className=\"flex-container\">\r\n\t\t\t\t\t<div className=\"left-container\">\r\n\t\t\t\t\t\t<h2>{`${appState.assetBeingEdited ? \"Edit\" : \"Add New\"} Scenario`}</h2>\r\n\r\n\t\t\t\t\t\t<ScenarioInput\r\n\t\t\t\t\t\t\tasset={asset}\r\n\t\t\t\t\t\t\tonChange={onAssetChange}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<PriceLevelInput\r\n\t\t\t\t\t\t\tasset={asset}\r\n\t\t\t\t\t\t\tpriceLevelBeingEdited={priceLevelBeingEdited}\r\n\t\t\t\t\t\t\tonChange={updatePriceLevel}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"middle-container\">\r\n\t\t\t\t\t\t<h2>{\"Projected Outcome\"}</h2>\r\n\t\t\t\t\t\t{!asset.PriceLevels.length &&\r\n\t\t\t\t\t\t\t<div className=\"no-rows-message\">Add Asset Details and Price Levels to your scenario to view your exit strategy's projected outcome.</div>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{asset.PriceLevels.length > 0 &&\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<SummaryBar asset={asset} />\r\n\r\n\t\t\t\t\t\t\t<ScenarioTable\r\n\t\t\t\t\t\t\t\tasset={asset}\r\n\t\t\t\t\t\t\t\ttableData={getTableData(asset)}\r\n\t\t\t\t\t\t\t\tonError={(value) => setHasTableError(value)}\r\n\t\t\t\t\t\t\t\tonEdit={editPriceLevel}\r\n\t\t\t\t\t\t\t\tonDelete={deletePriceLevel}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{scenarioErrors.length > 0 &&\r\n\t\t\t\t\t\t\t<ErrorPanel\r\n\t\t\t\t\t\t\t\ttitle=\"Please fix the following errors:\"\r\n\t\t\t\t\t\t\t\tcustomStyle={asset.PriceLevels.length === 0 ? { top: \"67px\" } : undefined }\r\n\t\t\t\t\t\t\t\terrors={scenarioErrors}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"right-container\">\r\n\t\t\t\t\t\t<button className={\"unicode-button\"} title=\"Cancel\" onClick={cancel}>❌</button>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={\"scenario-button-container\"}>\r\n\t\t\t\t\t{appState.assetBeingEdited &&\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={\"button-secondary\"}\r\n\t\t\t\t\t\t\tonClick={deleteScenario}>Delete\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<button className={\"button-primary\"} onClick={saveScenario}>Save</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<CustomModal\r\n\t\t\t\t\tisOpen={modalProperties.isOpen}\r\n\t\t\t\t\tonCancel={modalProperties.onCancel}\r\n\t\t\t\t\tonAccept={modalProperties.onAccept}\r\n\t\t\t\t\tprimaryButtonText={ modalProperties.primaryButtonText}\r\n\t\t\t\t\theight=\"230px\"\r\n\t\t\t\t\theaderText={modalProperties.headerText}\t>\r\n\t\t\t\t\t<p>{ modalProperties.bodyText}</p>\r\n\t\t\t\t</CustomModal>\r\n\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Scenario;\r\n"],"names":["min","max","value","disabled","props","internalValue","setInternalValue","useState","useEffect","handleChange","e","newValue","target","isNaN","Number","onChange","id","name","type","onInput","enforceMinMax","parseFloat","undefined","placeholder","onKeyDown","currentTarget","key","preventDefault","autoComplete","asset","modalIsOpen","setIsOpen","property","handleMethodTypeChange","PriceLevels","length","Method","onModalConfirmation","retVal","flipVal","className","htmlFor","AssetName","required","maxLength","Quantity","checked","isOpen","onCancel","onAccept","primaryButtonText","height","headerText","priceLevelBeingEdited","priceLevel","setPriceLevel","remainingAsset","setRemainingAsset","handlePriceLevelChange","callback","dependencies","currentDependenciesRef","useRef","isEqual","setIsEqual","then","module","default","current","additionalRemaining","remaining","tooltipText","title","Price","onClick","localLevel","updatedLevels","map","level","Id","step","errors","customStyle","style","error","index","Message","assets","addOrUpdateScenario","removeScenario","useUserData","appState","setAppState","useAppState","navigateToMain","useNavigation","modalProperties","setModalProperties","startingAssetValue","assetBeingEdited","originalAsset","setAsset","setPriceLevelBeingEdited","scenarioErrors","setScenarioErrors","hasTableError","setHasTableError","cancel","editingScenario","bodyText","tableData","onError","onEdit","priceLevelId","find","onDelete","filter","top","push","Field","validateRequiredFields"],"sourceRoot":""}