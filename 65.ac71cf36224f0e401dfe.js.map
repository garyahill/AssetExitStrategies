{"version":3,"file":"65.ac71cf36224f0e401dfe.js","mappings":"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","sources":["webpack://asset-exit-strategies/./src/pages/common/components/scenarioTable.tsx","webpack://asset-exit-strategies/./src/pages/scenario/components/summaryBar.tsx","webpack://asset-exit-strategies/./src/utilities/numbers.ts","webpack://asset-exit-strategies/./src/utilities/scenario.ts"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Asset, ScenarioDisplayData } from \"../../../models\";\r\nimport { FormatAsDollars, FormatAsPercentage, RoundToPlaces } from \"../../../utilities/numbers\";\r\nimport { invalidTableData } from \"../../../utilities/scenario\";\r\nimport \"./scenarioTable.less\";\r\nimport InfoTooltip from \"../../../components/controls/infoTooltip\";\r\n\r\n\r\ninterface TableContainerProps {\r\n\tasset: Asset;\r\n\ttableData: ScenarioDisplayData[];\r\n\tonEdit?: (priceLevelId: number) => void;\r\n\tonDelete?: (priceLevelId: number) => void;\r\n\tonError?: (error: boolean) => void;\r\n}\r\n\r\nconst ScenarioTable: React.FC<TableContainerProps> = ({asset, tableData, onEdit, onDelete, onError}) => {\r\n\tuseEffect(() => {\r\n\t\tif (onError) {\r\n\t\t\tif (invalidTableData(asset)) {\r\n\t\t\t\tonError(true);\r\n\t\t\t} else {\r\n\t\t\t\tonError(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}, [asset.Quantity, asset.PriceLevels]);\r\n\r\n\tconst showButtons = onEdit && onDelete;\r\n\r\n\tconst getRows = () => {\r\n\t\tconst percentSoldDisplay = (hasError: boolean, percentSold: number) =>\r\n\t\t\thasError ? <span className=\"error-text\">error</span> :\r\n\t\t\t\tFormatAsPercentage(percentSold, 2);\r\n\r\n\t\treturn tableData.map((rowData, index) => {\r\n\t\t\tconst { Id, Price, PercentSold, AmountSold, CumulativeSold,\r\n\t\t\t\tRemainingAsset, Revenue, CumulativeRevenue, HasError } = rowData;\r\n\t\t\treturn (\r\n\t\t\t\t<tr key={`row_${index}`} className={`${RemainingAsset < 0 ? \"error-row\" : undefined}`}>\r\n\t\t\t\t\t<td>{FormatAsDollars(Price)}</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t{percentSoldDisplay(HasError, PercentSold)}\r\n\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td>{RoundToPlaces(AmountSold)}</td>\r\n\t\t\t\t\t<td>{RoundToPlaces(CumulativeSold)}</td>\r\n\t\t\t\t\t<td>{RoundToPlaces(RemainingAsset)}</td>\r\n\t\t\t\t\t<td>{FormatAsDollars(Revenue)}</td>\r\n\t\t\t\t\t<td>{FormatAsDollars(CumulativeRevenue)}</td>\r\n\t\t\t\t\t{showButtons &&\r\n\t\t\t\t\t\t<td className=\"action-column\">\r\n\t\t\t\t\t\t\t<div className=\"button-container\">\r\n\t\t\t\t\t\t\t\t<button className={\"unicode-button\"} title=\"Edit\" onClick={() => onEdit(Id)}>üìù</button>\r\n\t\t\t\t\t\t\t\t<button className={\"unicode-button\"} title=\"Remove\" onClick={() => onDelete(Id)}>üóëÔ∏è</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t}\r\n\t\t\t\t</tr>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"table-container\">\r\n\t\t\t<table className=\"scenario-table\">\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Price Level</th>\r\n\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t<span>Percent Sold</span>\r\n\t\t\t\t\t\t\t<InfoTooltip tooltipText=\"Percent of the remaining asset sold at this price level.\" />\r\n\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t<th>Units Sold</th>\r\n\t\t\t\t\t\t<th>Cumulative Sold</th>\r\n\t\t\t\t\t\t<th>Remaining Asset</th>\r\n\t\t\t\t\t\t<th>Revenue</th>\r\n\t\t\t\t\t\t<th>Cumulative Revenue</th>\r\n\t\t\t\t\t\t{showButtons &&\r\n\t\t\t\t\t\t\t<th className=\"action-column\">Actions</th>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t{ getRows() }\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ScenarioTable;","import React from \"react\";\r\nimport { Asset } from \"../../../models\";\r\nimport { FormatAsDollars, RoundToPlaces } from \"../../../utilities/numbers\";\r\nimport { calculateRemainingAsset, projectedRevenue } from \"../../../utilities/scenario\";\r\nimport \"./summaryBar.less\";\r\n\r\ninterface SummaryBarProps {\r\n\tasset: Asset;\r\n}\r\n\r\nconst SummaryBar: React.FC<SummaryBarProps> = ({ asset }) => {\r\n\treturn (\r\n\t\t<div className=\"summary-container\">\r\n\t\t\t<div className=\"summary-left\">{`Asset Quantity: ${ RoundToPlaces(asset.Quantity) }`}</div>\r\n\t\t\t<div className=\"summary-middle\">{`Remaining Quantity: ${ RoundToPlaces(calculateRemainingAsset(asset)) }`}</div>\r\n\t\t\t<div className=\"summary-right\">{`Projected Revenue: ${ FormatAsDollars(projectedRevenue(asset)) }`}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SummaryBar;","const FormatAsDollars = (num: number): string => {\r\n\treturn new Intl.NumberFormat(\"en-US\", {\r\n\t\tstyle: \"currency\",\r\n\t\tcurrency: \"USD\",\r\n\t}).format(num);\r\n};\r\n\r\nconst RoundToPlaces = (num: number, places = 4): string => {\r\n\tconst roundedNum = num.toFixed(places);\r\n\treturn parseFloat(roundedNum).toString();\r\n};\r\n\r\nconst FormatAsPercentage = (num: number, maxDecimalPlaces = 4): string => {\r\n\tconst formatter = new Intl.NumberFormat(\"en-US\", {\r\n\t\tstyle: \"percent\",\r\n\t\tminimumFractionDigits: 0,\r\n\t\tmaximumFractionDigits: maxDecimalPlaces,\r\n\t});\r\n\r\n\tconst decimalValue = (num * 100).toFixed(maxDecimalPlaces);\r\n\tif (parseFloat(decimalValue) % 1 !== 0) {\r\n\t\treturn formatter.format(num);\r\n\t} else {\r\n\t\treturn formatter.format(Math.floor(num * 100) / 100);\r\n\t}\r\n};\r\n\r\nconst IsNumber = (value: any) => {\r\n\treturn !isNaN(parseFloat(value)) && isFinite(value);\r\n}\r\n\r\nexport { FormatAsDollars, RoundToPlaces, FormatAsPercentage, IsNumber };\r\n","import { Asset, PriceLevel, TransientPriceLevel, ScenarioDisplayData } from \"../models\";\r\n\r\nconst getDefaultAsset = (assets: Asset[]): Asset => {\r\n\tconst maxVal = assets.length > 0 ? (Math.max(...assets.map(obj => obj.id)) + 1) : 1;\r\n\treturn {\r\n\t\tid: maxVal,\r\n\t\tAssetName: \"\",\r\n\t\tMethod: \"Units\",\r\n\t\tQuantity: 0,\r\n\t\tPriceLevels: [],\r\n\t\tSortOrder: maxVal,\r\n\t};\r\n}\r\n\r\nconst getNewPriceLevel = (asset: Asset): TransientPriceLevel => {\r\n\tconst levels = asset.PriceLevels;\r\n\tconst maxVal = levels.length > 0 ? (Math.max(...levels.map(obj => obj.Id)) + 1) : 1;\r\n\treturn { Id: maxVal, Price: \"\", Quantity: \"\" };\r\n}\r\n\r\nconst calculateRemainingAsset = (asset: Asset) => {\r\n\tlet remaining = asset.Quantity;\r\n\r\n\tconst percentageFormula = () => {\r\n\t\treturn asset.PriceLevels.reduce((acc, level) => {\r\n\t\t\tconst amountSold = remaining * level.Quantity;\r\n\t\t\tremaining -= amountSold;\r\n\t\t\treturn acc + amountSold;\r\n\t\t}, 0);\r\n\t};\r\n\r\n\tconst unitsFormula = () => {\r\n\t\treturn asset.PriceLevels.reduce((acc, level) => {\r\n\t\t\treturn acc + level.Quantity;\r\n\t\t}, 0);\r\n\t};\r\n\r\n\tconst allocated = asset.Method === \"Percentage\" ?\r\n\t\tpercentageFormula() : unitsFormula();\r\n\r\n\treturn asset.Quantity - allocated;\r\n};\r\n\r\nconst projectedRevenue =  (asset: Asset) => {\r\n\tlet remaining = asset.Quantity;\r\n\r\n\tconst percentageFormula = () => {\r\n\t\treturn asset.PriceLevels.reduce((acc, level) => {\r\n\t\t\tconst amountSold = remaining * level.Quantity;\r\n\t\t\tconst revenue = level.Price * amountSold;\r\n\t\t\tremaining -= amountSold;\r\n\t\t\treturn acc + revenue;\r\n\t\t}, 0);\r\n\t};\r\n\r\n\tconst unitsFormula = () => {\r\n\t\treturn asset.PriceLevels.reduce((acc, level) => {\r\n\t\t\tconst revenue = level.Price * level.Quantity;\r\n\t\t\treturn acc + revenue;\r\n\t\t}, 0);\r\n\t};\r\n\r\n\treturn asset.Method === \"Percentage\" ? percentageFormula() : unitsFormula();\r\n};\r\n\r\nconst filterPriceLevelsWithoutRevenue = (quantity: number, priceLevels: PriceLevel[]) => {\r\n\tconst sortedLevels = priceLevels.sort((a, b) => a.Price - b.Price);\r\n\r\n\tlet amountSold = 0;\r\n\tlet revenue = 0;\r\n\tlet remainingAsset = quantity;\r\n\r\n\treturn sortedLevels.filter(level => {\r\n\t\tamountSold = remainingAsset * level.Quantity;\r\n\t\trevenue = level.Price * amountSold;\r\n\t\tremainingAsset -= amountSold;\r\n\t\treturn revenue > 0;\r\n\t});\r\n};\r\n\r\nconst getTableData = (asset: Asset): ScenarioDisplayData[] => {\r\n\tconst sortedLevels = asset.PriceLevels.sort((a, b) => a.Price - b.Price);\r\n\tlet [amountSold, revenue, cumulativeSold, cumulativeRevenue, percentSold] = [0, 0, 0, 0, 0];\r\n\tlet remainingAsset = asset.Quantity;\r\n\r\n\tconst displayData = sortedLevels.map((level)  => {\r\n\t\tif (asset.Method === \"Percentage\") {\r\n\t\t\tpercentSold = level.Quantity;\r\n\t\t\tamountSold = remainingAsset * percentSold;\r\n\t\t} else {\r\n\t\t\tamountSold = level.Quantity;\r\n\t\t\tpercentSold = amountSold / remainingAsset;\r\n\t\t}\r\n\t\trevenue = level.Price * amountSold;\r\n\t\tcumulativeSold += amountSold;\r\n\t\tremainingAsset -= amountSold;\r\n\t\tcumulativeRevenue += revenue;\r\n\r\n\t\treturn {\r\n\t\t\tId: level.Id,\r\n\t\t\tPrice: level.Price,\r\n\t\t\tPercentSold: percentSold,\r\n\t\t\tAmountSold: amountSold,\r\n\t\t\tCumulativeSold: cumulativeSold,\r\n\t\t\tRemainingAsset: remainingAsset,\r\n\t\t\tRevenue: revenue,\r\n\t\t\tCumulativeRevenue: cumulativeRevenue,\r\n\t\t\tHasError: remainingAsset < 0 || revenue <= 0 || isNaN(percentSold),\r\n\t\t} as ScenarioDisplayData;\r\n\t});\r\n\r\n\treturn displayData;\r\n}\r\n\r\nconst invalidTableData = (asset: Asset): boolean => {\r\n\tconst data = getTableData(asset);\r\n\treturn data.some(row => row.HasError);\r\n}\r\n\r\nexport {\r\n\tgetDefaultAsset,\r\n\tgetNewPriceLevel,\r\n\tcalculateRemainingAsset,\r\n\tprojectedRevenue,\r\n\tfilterPriceLevelsWithoutRevenue,\r\n\tgetTableData,\r\n\tinvalidTableData,\r\n};"],"names":["asset","tableData","onEdit","onDelete","onError","useEffect","Quantity","PriceLevels","showButtons","className","tooltipText","map","rowData","index","Id","Price","PercentSold","AmountSold","CumulativeSold","RemainingAsset","Revenue","CumulativeRevenue","HasError","key","undefined","percentSold","title","onClick","FormatAsDollars","num","Intl","NumberFormat","style","currency","format","RoundToPlaces","places","roundedNum","toFixed","parseFloat","toString","FormatAsPercentage","maxDecimalPlaces","formatter","minimumFractionDigits","maximumFractionDigits","decimalValue","Math","floor","getDefaultAsset","assets","maxVal","length","max","obj","id","AssetName","Method","SortOrder","getNewPriceLevel","levels","calculateRemainingAsset","remaining","allocated","reduce","acc","level","amountSold","projectedRevenue","revenue","filterPriceLevelsWithoutRevenue","quantity","priceLevels","sortedLevels","sort","a","b","remainingAsset","filter","getTableData","cumulativeSold","cumulativeRevenue","isNaN","invalidTableData","some","row"],"sourceRoot":""}