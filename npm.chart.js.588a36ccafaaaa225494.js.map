{"version":3,"file":"npm.chart.js.588a36ccafaaaa225494.js","mappings":";kOAYI,SAASA,IACF,CAGP,MAAMC,EAAM,MACZ,IAAIC,EAAK,EACT,MAAO,IAAIA,GACd,EAHe,GAQZ,SAASC,EAAcC,GACvB,OAAOA,OACX,CAKI,SAASC,EAAQD,GACjB,GAAIE,MAAMD,SAAWC,MAAMD,QAAQD,GAC/B,OAAO,EAEX,MAAMG,EAAOC,OAAOC,UAAUC,SAASC,KAAKP,GAC5C,MAAyB,YAArBG,EAAKK,MAAM,EAAG,IAAuC,WAAnBL,EAAKK,OAAO,EAItD,CAKI,SAASC,EAAST,GAClB,OAAiB,OAAVA,GAA4D,oBAA1CI,OAAOC,UAAUC,SAASC,KAAKP,EAC5D,CAII,SAASU,EAAeV,GACxB,OAAyB,iBAAVA,GAAsBA,aAAiBW,SAAWC,UAAUZ,EAC/E,CAKI,SAASa,EAAgBb,EAAOc,GAChC,OAAOJ,EAAeV,GAASA,EAAQc,CAC3C,CAKI,SAASC,EAAef,EAAOc,GAC/B,YAAwB,IAAVd,EAAwBc,EAAed,CACzD,CASI,SAASgB,EAASC,EAAIC,EAAMC,GAC5B,GAAIF,GAAyB,mBAAZA,EAAGV,KAChB,OAAOU,EAAGG,MAAMD,EAASD,EAEjC,CACA,SAASG,EAAKC,EAAUL,EAAIE,EAASI,GACjC,IAAIC,EAAGC,EAAKC,EACZ,GAAIzB,EAAQqB,GAER,GADAG,EAAMH,EAASK,OACXJ,EACA,IAAIC,EAAIC,EAAM,EAAGD,GAAK,EAAGA,IACrBP,EAAGV,KAAKY,EAASG,EAASE,GAAIA,QAGlC,IAAIA,EAAI,EAAGA,EAAIC,EAAKD,IAChBP,EAAGV,KAAKY,EAASG,EAASE,GAAIA,QAGnC,GAAIf,EAASa,GAGhB,IAFAI,EAAOtB,OAAOsB,KAAKJ,GACnBG,EAAMC,EAAKC,OACPH,EAAI,EAAGA,EAAIC,EAAKD,IAChBP,EAAGV,KAAKY,EAASG,EAASI,EAAKF,IAAKE,EAAKF,GAGrD,CAMI,SAASI,EAAeC,EAAIC,GAC5B,IAAIN,EAAGO,EAAMC,EAAIC,EACjB,IAAKJ,IAAOC,GAAMD,EAAGF,SAAWG,EAAGH,OAC/B,OAAO,EAEX,IAAIH,EAAI,EAAGO,EAAOF,EAAGF,OAAQH,EAAIO,IAAQP,EAGrC,GAFAQ,EAAKH,EAAGL,GACRS,EAAKH,EAAGN,GACJQ,EAAGE,eAAiBD,EAAGC,cAAgBF,EAAGG,QAAUF,EAAGE,MACvD,OAAO,EAGf,OAAO,CACX,CAII,SAASC,EAAMC,GACf,GAAIpC,EAAQoC,GACR,OAAOA,EAAOC,IAAIF,GAEtB,GAAI3B,EAAS4B,GAAS,CAClB,MAAME,EAASnC,OAAOoC,OAAO,MACvBd,EAAOtB,OAAOsB,KAAKW,GACnBI,EAAOf,EAAKC,OAClB,IAAIe,EAAI,EACR,KAAMA,EAAID,IAAQC,EACdH,EAAOb,EAAKgB,IAAMN,EAAMC,EAAOX,EAAKgB,KAExC,OAAOH,CACX,CACA,OAAOF,CACX,CACA,SAASM,EAAWC,GAChB,OAIoB,IAJb,CACH,YACA,YACA,eACFC,QAAQD,EACd,CAKI,SAASE,EAAQF,EAAKL,EAAQF,EAAQU,GACtC,IAAKJ,EAAWC,GACZ,OAEJ,MAAMI,EAAOT,EAAOK,GACdK,EAAOZ,EAAOO,GAChBnC,EAASuC,IAASvC,EAASwC,GAE3BC,EAAMF,EAAMC,EAAMF,GAElBR,EAAOK,GAAOR,EAAMa,EAE5B,CACA,SAASC,EAAMX,EAAQF,EAAQU,GAC3B,MAAMI,EAAUlD,EAAQoC,GAAUA,EAAS,CACvCA,GAEEN,EAAOoB,EAAQxB,OACrB,IAAKlB,EAAS8B,GACV,OAAOA,EAGX,MAAMa,GADNL,EAAUA,GAAW,CAAC,GACCK,QAAUN,EACjC,IAAIO,EACJ,IAAI,IAAI7B,EAAI,EAAGA,EAAIO,IAAQP,EAAE,CAEzB,GADA6B,EAAUF,EAAQ3B,IACbf,EAAS4C,GACV,SAEJ,MAAM3B,EAAOtB,OAAOsB,KAAK2B,GACzB,IAAI,IAAIX,EAAI,EAAGD,EAAOf,EAAKC,OAAQe,EAAID,IAAQC,EAC3CU,EAAO1B,EAAKgB,GAAIH,EAAQc,EAASN,EAEzC,CACA,OAAOR,CACX,CACA,SAASe,EAAQf,EAAQF,GAErB,OAAOa,EAAMX,EAAQF,EAAQ,CACzBe,OAAQG,GAEhB,CAII,SAASA,EAAUX,EAAKL,EAAQF,GAChC,IAAKM,EAAWC,GACZ,OAEJ,MAAMI,EAAOT,EAAOK,GACdK,EAAOZ,EAAOO,GAChBnC,EAASuC,IAASvC,EAASwC,GAC3BK,EAAQN,EAAMC,GACN7C,OAAOC,UAAUmD,eAAejD,KAAKgC,EAAQK,KACrDL,EAAOK,GAAOR,EAAMa,GAE5B,CASA,MAAMQ,EAAe,CAEjB,GAAKC,GAAIA,EAETC,EAAIC,GAAIA,EAAED,EACVE,EAAID,GAAIA,EAAEC,GA+Bd,SAASC,EAAiBC,EAAKnB,GAC3B,MAAMoB,EAAWP,EAAab,KAASa,EAAab,GAbxD,SAAyBA,GACrB,MAAMlB,EAhBN,SAAmBkB,GACnB,MAAMqB,EAAQrB,EAAIsB,MAAM,KAClBxC,EAAO,GACb,IAAIyC,EAAM,GACV,IAAK,MAAMC,KAAQH,EACfE,GAAOC,EACHD,EAAIE,SAAS,MACbF,EAAMA,EAAI3D,MAAM,GAAI,GAAK,KAEzBkB,EAAK4C,KAAKH,GACVA,EAAM,IAGd,OAAOzC,CACX,CAEiB6C,CAAU3B,GACvB,OAAQmB,IACJ,IAAK,MAAMrB,KAAKhB,EAAK,CACjB,GAAU,KAANgB,EACA,MAEJqB,EAAMA,GAAOA,EAAIrB,EACrB,CACA,OAAOqB,CAAG,CAElB,CAE+DS,CAAgB5B,IAC3E,OAAOoB,EAASD,EACpB,CAGI,SAASU,EAAYC,GACrB,OAAOA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIlE,MAAM,EACnD,CACA,MAAMqE,EAAW7E,QAAyB,IAAVA,EAC1B8E,EAAc9E,GAAyB,mBAAVA,EAE7B+E,EAAY,CAACC,EAAGC,KAClB,GAAID,EAAEE,OAASD,EAAEC,KACb,OAAO,EAEX,IAAK,MAAMC,KAAQH,EACf,IAAKC,EAAEG,IAAID,GACP,OAAO,EAGf,OAAO,CAAI,EAYLE,EAAKC,KAAKD,GACdE,EAAM,EAAIF,EAEVG,EAAW7E,OAAO8E,kBAClBC,EAAcL,EAAK,IACnBM,EAAUN,EAAK,EACfO,EAAaP,EAAK,EAClBQ,EAAqB,EAALR,EAAS,EACzBS,EAAQR,KAAKQ,MACbC,EAAOT,KAAKS,KAClB,SAASC,EAAarC,EAAGE,EAAGoC,GACxB,OAAOX,KAAKY,IAAIvC,EAAIE,GAAKoC,CAC7B,CAGI,SAASE,EAAQC,GACjB,MAAMC,EAAef,KAAKgB,MAAMF,GAChCA,EAAQJ,EAAaI,EAAOC,EAAcD,EAAQ,KAAQC,EAAeD,EACzE,MAAMG,EAAYjB,KAAKkB,IAAI,GAAIlB,KAAKmB,MAAMX,EAAMM,KAC1CM,EAAWN,EAAQG,EAEzB,OADqBG,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAIA,GAAY,EAAI,EAAI,IAC3DH,CAC1B,CAoBA,SAASI,EAASC,GACd,OAAQC,MAAMC,WAAWF,KAAOhG,SAASgG,EAC7C,CAiBA,SAASG,EAAUC,GACf,OAAOA,GAAW3B,EAAK,IAC3B,CAUI,SAAS4B,EAAetD,GACxB,IAAKjD,EAAeiD,GAChB,OAEJ,IAAIuD,EAAI,EACJC,EAAI,EACR,KAAM7B,KAAKgB,MAAM3C,EAAIuD,GAAKA,IAAMvD,GAC5BuD,GAAK,GACLC,IAEJ,OAAOA,CACX,CA2BI,SAASC,EAAgBpC,GACzB,OAAQA,EAAIO,EAAMA,GAAOA,CAC7B,CAmBI,SAAS8B,EAAYrH,EAAOsH,EAAKC,GACjC,OAAOjC,KAAKiC,IAAID,EAAKhC,KAAKgC,IAAIC,EAAKvH,GACvC,CAaI,SAASwH,EAAWxH,EAAOyH,EAAOC,EAAKzB,EAAU,MACjD,OAAOjG,GAASsF,KAAKgC,IAAIG,EAAOC,GAAOzB,GAAWjG,GAASsF,KAAKiC,IAAIE,EAAOC,GAAOzB,CACtF,CAEA,SAAS0B,EAAQC,EAAO5H,EAAO6H,GAC3BA,EAAMA,GAAO,CAAE1F,GAAQyF,EAAMzF,GAASnC,GACtC,IAEI8H,EAFAC,EAAKH,EAAMjG,OAAS,EACpBqG,EAAK,EAET,KAAMD,EAAKC,EAAK,GACZF,EAAME,EAAKD,GAAM,EACbF,EAAIC,GACJE,EAAKF,EAELC,EAAKD,EAGb,MAAO,CACHE,KACAD,KAER,CAQI,MAAME,EAAe,CAACL,EAAOhF,EAAK5C,EAAOkI,IAAOP,EAAQC,EAAO5H,EAAOkI,EAAQ/F,IAC1E,MAAMgG,EAAKP,EAAMzF,GAAOS,GACxB,OAAOuF,EAAKnI,GAASmI,IAAOnI,GAAS4H,EAAMzF,EAAQ,GAAGS,KAAS5C,CAAK,EACnEmC,GAAQyF,EAAMzF,GAAOS,GAAO5C,GAO3BoI,EAAgB,CAACR,EAAOhF,EAAK5C,IAAQ2H,EAAQC,EAAO5H,GAAQmC,GAAQyF,EAAMzF,GAAOS,IAAQ5C,IAkB7FqI,EAAc,CAChB,OACA,MACA,QACA,SACA,WAkCJ,SAASC,EAAoBC,EAAOC,GAChC,MAAMC,EAAOF,EAAMG,SACnB,IAAKD,EACD,OAEJ,MAAME,EAAYF,EAAKE,UACjBxG,EAAQwG,EAAU9F,QAAQ2F,IACjB,IAAXrG,GACAwG,EAAUC,OAAOzG,EAAO,GAExBwG,EAAUhH,OAAS,IAGvB0G,EAAYQ,SAASjG,WACV2F,EAAM3F,EAAI,WAEd2F,EAAMG,SACjB,CAgBG,MAAMI,EACiB,oBAAXC,OACA,SAAS/H,GACZ,OAAOA,GACX,EAEG+H,OAAOC,sBAKd,SAASC,EAAUhI,EAAIE,GACvB,IAAI+H,EAAY,GACZC,GAAU,EACd,OAAO,YAAYjI,GAEfgI,EAAYhI,EACPiI,IACDA,GAAU,EACVL,EAAiBvI,KAAKwI,QAAQ,KAC1BI,GAAU,EACVlI,EAAGG,MAAMD,EAAS+H,EAAU,IAGxC,CACJ,CAkBI,MAAME,EAAsBC,GAAkB,UAAVA,EAAoB,OAAmB,QAAVA,EAAkB,QAAU,SAIvFC,EAAiB,CAACD,EAAO5B,EAAOC,IAAgB,UAAV2B,EAAoB5B,EAAkB,QAAV4B,EAAkB3B,GAAOD,EAAQC,GAAO,EA2D9G6B,EAAUC,GAAU,IAANA,GAAiB,IAANA,EACzBC,GAAY,CAACD,EAAGE,EAAGvC,KAAM7B,KAAKkB,IAAI,EAAG,IAAMgD,GAAK,IAAMlE,KAAKqE,KAAKH,EAAIE,GAAKnE,EAAM4B,GAC/EyC,GAAa,CAACJ,EAAGE,EAAGvC,IAAI7B,KAAKkB,IAAI,GAAI,GAAKgD,GAAKlE,KAAKqE,KAAKH,EAAIE,GAAKnE,EAAM4B,GAAK,EAKzE0C,GAAU,CAChBC,OAASN,GAAIA,EACbO,WAAaP,GAAIA,EAAIA,EACrBQ,YAAcR,IAAKA,GAAKA,EAAI,GAC5BS,cAAgBT,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,GAAK,MAASA,GAAKA,EAAI,GAAK,GAC3EU,YAAcV,GAAIA,EAAIA,EAAIA,EAC1BW,aAAeX,IAAKA,GAAK,GAAKA,EAAIA,EAAI,EACtCY,eAAiBZ,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAI,KAAQA,GAAK,GAAKA,EAAIA,EAAI,GAClFa,YAAcb,GAAIA,EAAIA,EAAIA,EAAIA,EAC9Bc,aAAed,MAAOA,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAC5Ce,eAAiBf,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAIA,GAAK,KAAQA,GAAK,GAAKA,EAAIA,EAAIA,EAAI,GAC3FgB,YAAchB,GAAIA,EAAIA,EAAIA,EAAIA,EAAIA,EAClCiB,aAAejB,IAAKA,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,EAC9CkB,eAAiBlB,IAAKA,GAAK,IAAO,EAAI,GAAMA,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,KAAQA,GAAK,GAAKA,EAAIA,EAAIA,EAAIA,EAAI,GAClGmB,WAAanB,GAA6B,EAAxBlE,KAAKsF,IAAIpB,EAAI7D,GAC/BkF,YAAcrB,GAAIlE,KAAKqE,IAAIH,EAAI7D,GAC/BmF,cAAgBtB,IAAK,IAAOlE,KAAKsF,IAAIvF,EAAKmE,GAAK,GAC/CuB,WAAavB,GAAU,IAANA,EAAU,EAAIlE,KAAKkB,IAAI,EAAG,IAAMgD,EAAI,IACrDwB,YAAcxB,GAAU,IAANA,EAAU,EAA4B,EAAvBlE,KAAKkB,IAAI,GAAI,GAAKgD,GACnDyB,cAAgBzB,GAAID,EAAOC,GAAKA,EAAIA,EAAI,GAAM,GAAMlE,KAAKkB,IAAI,EAAG,IAAU,EAAJgD,EAAQ,IAAM,IAAyC,EAAjClE,KAAKkB,IAAI,GAAI,IAAU,EAAJgD,EAAQ,KACvH0B,WAAa1B,GAAIA,GAAK,EAAIA,IAAMlE,KAAK6F,KAAK,EAAI3B,EAAIA,GAAK,GACvD4B,YAAc5B,GAAIlE,KAAK6F,KAAK,GAAK3B,GAAK,GAAKA,GAC3C6B,cAAgB7B,IAAKA,GAAK,IAAO,GAAK,IAAOlE,KAAK6F,KAAK,EAAI3B,EAAIA,GAAK,GAAK,IAAOlE,KAAK6F,KAAK,GAAK3B,GAAK,GAAKA,GAAK,GAC9G8B,cAAgB9B,GAAID,EAAOC,GAAKA,EAAIC,GAAUD,EAAG,KAAO,IACxD+B,eAAiB/B,GAAID,EAAOC,GAAKA,EAAII,GAAWJ,EAAG,KAAO,IAC1D,gBAAAgC,CAAkBhC,GACd,MAAME,EAAI,MAEV,OAAOH,EAAOC,GAAKA,EAAIA,EAAI,GAAM,GAAMC,GAAc,EAAJD,EAAOE,EAD9C,KACsD,GAAM,GAAME,GAAe,EAAJJ,EAAQ,EAAGE,EADxF,IAEd,EACA,UAAA+B,CAAYjC,GACR,MAAME,EAAI,QACV,OAAOF,EAAIA,IAAME,EAAI,GAAKF,EAAIE,EAClC,EACA,WAAAgC,CAAalC,GACT,MAAME,EAAI,QACV,OAAQF,GAAK,GAAKA,IAAME,EAAI,GAAKF,EAAIE,GAAK,CAC9C,EACA,aAAAiC,CAAenC,GACX,IAAIE,EAAI,QACR,OAAKF,GAAK,IAAO,EACCA,EAAIA,IAAqB,GAAdE,GAAK,QAAcF,EAAIE,GAAzC,GAEJ,KAAQF,GAAK,GAAKA,IAAqB,GAAdE,GAAK,QAAcF,EAAIE,GAAK,EAChE,EACAkC,aAAepC,GAAI,EAAIK,GAAQgC,cAAc,EAAIrC,GACjD,aAAAqC,CAAerC,GACX,MAAMsC,EAAI,OACJC,EAAI,KACV,OAAIvC,EAAI,EAAIuC,EACDD,EAAItC,EAAIA,EAEfA,EAAI,EAAIuC,EACDD,GAAKtC,GAAK,IAAMuC,GAAKvC,EAAI,IAEhCA,EAAI,IAAMuC,EACHD,GAAKtC,GAAK,KAAOuC,GAAKvC,EAAI,MAE9BsC,GAAKtC,GAAK,MAAQuC,GAAKvC,EAAI,OACtC,EACAwC,gBAAkBxC,GAAIA,EAAI,GAAoC,GAA9BK,GAAQ+B,aAAiB,EAAJpC,GAAkD,GAAnCK,GAAQgC,cAAkB,EAAJrC,EAAQ,GAAW,IAGjH,SAASyC,GAAoBjM,GACzB,GAAIA,GAA0B,iBAAVA,EAAoB,CACpC,MAAMG,EAAOH,EAAMM,WACnB,MAAgB,2BAATH,GAA8C,4BAATA,CAChD,CACA,OAAO,CACX,CACA,SAAS+L,GAAMlM,GACX,OAAOiM,GAAoBjM,GAASA,EAAQ,IAAI,KAAMA,EAC1D,CACA,SAASmM,GAAcnM,GACnB,OAAOiM,GAAoBjM,GAASA,EAAQ,IAAI,KAAMA,GAAOoM,SAAS,IAAKC,OAAO,IAAKC,WAC3F,CAEA,MAAMC,GAAU,CACZ,IACA,IACA,cACA,SACA,WAEEC,GAAS,CACX,QACA,cACA,mBAgFEC,GAAY,IAAIC,IAWtB,SAASC,GAAaC,EAAKC,EAAQ9J,GAC/B,OAXJ,SAAyB8J,EAAQ9J,GAC7BA,EAAUA,GAAW,CAAC,EACtB,MAAM+J,EAAWD,EAASE,KAAKC,UAAUjK,GACzC,IAAIkK,EAAYR,GAAUS,IAAIJ,GAK9B,OAJKG,IACDA,EAAY,IAAIE,KAAKC,aAAaP,EAAQ9J,GAC1C0J,GAAUY,IAAIP,EAAUG,IAErBA,CACX,CAEWK,CAAgBT,EAAQ9J,GAASwK,OAAOX,EACnD,CAEA,MAAMY,GAAa,CAClBC,OAAQzN,GACMC,EAAQD,GAAUA,EAAQ,GAAKA,EAE7C,OAAA0N,CAASC,EAAWxL,EAAOyL,GACpB,GAAkB,IAAdD,EACA,MAAO,IAEX,MAAMd,EAASgB,KAAKC,MAAM/K,QAAQ8J,OAClC,IAAIkB,EACAC,EAAQL,EACZ,GAAIC,EAAMjM,OAAS,EAAG,CAClB,MAAMsM,EAAU3I,KAAKiC,IAAIjC,KAAKY,IAAI0H,EAAM,GAAG5N,OAAQsF,KAAKY,IAAI0H,EAAMA,EAAMjM,OAAS,GAAG3B,SAChFiO,EAAU,MAAQA,EAAU,QAC5BF,EAAW,cAEfC,EA8BZ,SAAwBL,EAAWC,GAC/B,IAAII,EAAQJ,EAAMjM,OAAS,EAAIiM,EAAM,GAAG5N,MAAQ4N,EAAM,GAAG5N,MAAQ4N,EAAM,GAAG5N,MAAQ4N,EAAM,GAAG5N,MAI3F,OAHIsF,KAAKY,IAAI8H,IAAU,GAAKL,IAAcrI,KAAKmB,MAAMkH,KACjDK,EAAQL,EAAYrI,KAAKmB,MAAMkH,IAE5BK,CACX,CApCoBE,CAAeP,EAAWC,EACtC,CACA,MAAMO,EAAWrI,EAAMR,KAAKY,IAAI8H,IAC1BI,EAAavH,MAAMsH,GAAY,EAAI7I,KAAKiC,IAAIjC,KAAKgC,KAAK,EAAIhC,KAAKmB,MAAM0H,GAAW,IAAK,GACrFpL,EAAU,CACZgL,WACAM,sBAAuBD,EACvBE,sBAAuBF,GAG3B,OADAhO,OAAOmO,OAAOxL,EAAS8K,KAAK9K,QAAQ6K,MAAML,QACnCZ,GAAagB,EAAWd,EAAQ9J,EAC3C,EACH,WAAAyL,CAAab,EAAWxL,EAAOyL,GACxB,GAAkB,IAAdD,EACA,MAAO,IAEX,MAAMc,EAASb,EAAMzL,GAAOuM,aAAef,EAAYrI,KAAKkB,IAAI,GAAIlB,KAAKmB,MAAMX,EAAM6H,KACrF,MAAI,CACA,EACA,EACA,EACA,EACA,GACA,IACFgB,SAASF,IAAWtM,EAAQ,GAAMyL,EAAMjM,OAC/B6L,GAAWE,QAAQnN,KAAKsN,KAAMF,EAAWxL,EAAOyL,GAEpD,EACX,GASH,IAAIgB,GAAQ,CACTpB,eA2EJ,MAAMqB,GAAYzO,OAAOoC,OAAO,MAC1BsM,GAAc1O,OAAOoC,OAAO,MACjC,SAASuM,GAAWC,EAAMpM,GACvB,IAAKA,EACD,OAAOoM,EAEX,MAAMtN,EAAOkB,EAAIsB,MAAM,KACvB,IAAI,IAAI1C,EAAI,EAAGoF,EAAIlF,EAAKC,OAAQH,EAAIoF,IAAKpF,EAAE,CACvC,MAAMkB,EAAIhB,EAAKF,GACfwN,EAAOA,EAAKtM,KAAOsM,EAAKtM,GAAKtC,OAAOoC,OAAO,MAC/C,CACA,OAAOwM,CACX,CACA,SAAS3B,GAAI4B,EAAMC,EAAOzB,GACtB,MAAqB,iBAAVyB,EACAhM,EAAM6L,GAAWE,EAAMC,GAAQzB,GAEnCvK,EAAM6L,GAAWE,EAAM,IAAKC,EACvC,CACC,MAAMC,GACH,WAAAC,CAAYC,EAAcC,GACtBzB,KAAK0B,eAAYC,EACjB3B,KAAK4B,gBAAkB,kBACvB5B,KAAK6B,YAAc,kBACnB7B,KAAK3B,MAAQ,OACb2B,KAAK8B,SAAW,CAAC,EACjB9B,KAAK+B,iBAAoBC,GAAUA,EAAQ/B,MAAMgC,SAASC,sBAC1DlC,KAAKmC,SAAW,CAAC,EACjBnC,KAAKoC,OAAS,CACV,YACA,WACA,QACA,aACA,aAEJpC,KAAKqC,KAAO,CACRC,OAAQ,qDACRjL,KAAM,GACNkL,MAAO,SACPC,WAAY,IACZC,OAAQ,MAEZzC,KAAK0C,MAAQ,CAAC,EACd1C,KAAK2C,qBAAuB,CAACC,EAAK1N,IAAUoJ,GAAcpJ,EAAQ0M,iBAClE5B,KAAK6C,iBAAmB,CAACD,EAAK1N,IAAUoJ,GAAcpJ,EAAQ2M,aAC9D7B,KAAK8C,WAAa,CAACF,EAAK1N,IAAUoJ,GAAcpJ,EAAQmJ,OACxD2B,KAAK+C,UAAY,IACjB/C,KAAKgD,YAAc,CACfC,KAAM,UACNC,WAAW,EACXC,kBAAkB,GAEtBnD,KAAKoD,qBAAsB,EAC3BpD,KAAKqD,QAAU,KACfrD,KAAKsD,QAAU,KACftD,KAAKuD,SAAU,EACfvD,KAAKwD,QAAU,CAAC,EAChBxD,KAAKyD,YAAa,EAClBzD,KAAK0D,WAAQ/B,EACb3B,KAAK2D,OAAS,CAAC,EACf3D,KAAK4D,UAAW,EAChB5D,KAAK6D,yBAA0B,EAC/B7D,KAAK8D,SAAStC,GACdxB,KAAKzM,MAAMkO,EACf,CACH,GAAAjC,CAAI6B,EAAOzB,GACJ,OAAOJ,GAAIQ,KAAMqB,EAAOzB,EAC5B,CACH,GAAAP,CAAIgC,GACG,OAAOH,GAAWlB,KAAMqB,EAC5B,CACH,QAAAyC,CAASzC,EAAOzB,GACT,OAAOJ,GAAIyB,GAAaI,EAAOzB,EACnC,CACA,QAAAmE,CAAS1C,EAAOzB,GACZ,OAAOJ,GAAIwB,GAAWK,EAAOzB,EACjC,CACH,KAAAoE,CAAM3C,EAAO4C,EAAMC,EAAaC,GACzB,MAAMC,EAAclD,GAAWlB,KAAMqB,GAC/BgD,EAAoBnD,GAAWlB,KAAMkE,GACrCI,EAAc,IAAML,EAC1B1R,OAAOgS,iBAAiBH,EAAa,CACjC,CAACE,GAAc,CACXnS,MAAOiS,EAAYH,GACnBO,UAAU,GAEd,CAACP,GAAO,CACJQ,YAAY,EACZ,GAAApF,GACI,MAAMqF,EAAQ1E,KAAKsE,GACb5P,EAAS2P,EAAkBF,GACjC,OAAIvR,EAAS8R,GACFnS,OAAOmO,OAAO,CAAC,EAAGhM,EAAQgQ,GAE9BxR,EAAewR,EAAOhQ,EACjC,EACA,GAAA8K,CAAKrN,GACD6N,KAAKsE,GAAenS,CACxB,IAGZ,CACA,KAAAoB,CAAMoR,GACFA,EAAS3J,SAASzH,GAAQA,EAAMyM,OACpC,EAEJ,IAAI4E,GAA2B,IAAItD,GAAS,CACxCuD,YAAcZ,IAAQA,EAAKa,WAAW,MACtCC,WAAad,GAAgB,WAATA,EACpBvB,MAAO,CACHsC,UAAW,eAEfhC,YAAa,CACT6B,aAAa,EACbE,YAAY,IAEjB,CAlVH,SAAiCH,GAC7BA,EAASpF,IAAI,YAAa,CACtByF,WAAOtD,EACPuD,SAAU,IACVC,OAAQ,eACR/R,QAAIuO,EACJyD,UAAMzD,EACN0D,UAAM1D,EACN2D,QAAI3D,EACJrP,UAAMqP,IAEViD,EAASd,SAAS,YAAa,CAC3BkB,WAAW,EACXD,YAAY,EACZF,YAAcZ,GAAgB,eAATA,GAAkC,eAATA,GAAkC,OAATA,IAE3EW,EAASpF,IAAI,aAAc,CACvBb,OAAQ,CACJrM,KAAM,QACNiT,WAAY5G,IAEhBD,QAAS,CACLpM,KAAM,SACNiT,WAAY7G,MAGpBkG,EAASd,SAAS,aAAc,CAC5BkB,UAAW,cAEfJ,EAASpF,IAAI,cAAe,CACxBgG,OAAQ,CACJ9D,UAAW,CACPwD,SAAU,MAGlBO,OAAQ,CACJ/D,UAAW,CACPwD,SAAU,IAGlBQ,KAAM,CACFC,WAAY,CACRhH,OAAQ,CACJyG,KAAM,eAEVQ,QAAS,CACLtT,KAAM,UACN4S,SAAU,KAItBW,KAAM,CACFF,WAAY,CACRhH,OAAQ,CACJ2G,GAAI,eAERM,QAAS,CACLtT,KAAM,UACN6S,OAAQ,SACR/R,GAAKyC,GAAQ,EAAJA,MAK7B,EAEA,SAA8B+O,GAC1BA,EAASpF,IAAI,SAAU,CACnBsG,aAAa,EACbC,QAAS,CACLC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,IAGlB,EA0EA,SAA4BvB,GACxBA,EAASpF,IAAI,QAAS,CAClB4G,SAAS,EACTC,QAAQ,EACR3S,SAAS,EACT4S,aAAa,EACpBC,OAAQ,QACDC,MAAM,EACbC,MAAO,EACAC,KAAM,CACFN,SAAS,EACTO,UAAW,EACXC,iBAAiB,EACjBC,WAAW,EACXC,WAAY,EACZC,UAAW,CAACC,EAAM9R,IAAUA,EAAQyR,UACpCM,UAAW,CAACD,EAAM9R,IAAUA,EAAQmJ,MACpCgI,QAAQ,GAEZa,OAAQ,CACJd,SAAS,EACTe,KAAM,GACNC,WAAY,EACZC,MAAO,GAEXC,MAAO,CACHlB,SAAS,EACTmB,KAAM,GACNxB,QAAS,CACLC,IAAK,EACLE,OAAQ,IAGhBnG,MAAO,CACHyH,YAAa,EACbC,YAAa,GACbC,QAAQ,EACRC,gBAAiB,EACjBC,gBAAiB,GACjB7B,QAAS,EACTK,SAAS,EACTyB,UAAU,EACVC,gBAAiB,EACjBC,YAAa,EACb5U,SAAU4N,GAAMpB,WAAWC,OAC3BoI,MAAO,CAAC,EACRC,MAAO,CAAC,EACRzM,MAAO,SACP0M,WAAY,OACZC,mBAAmB,EACnBC,cAAe,4BACfC,gBAAiB,KAGzBzD,EAASZ,MAAM,cAAe,QAAS,GAAI,SAC3CY,EAASZ,MAAM,aAAc,QAAS,GAAI,eAC1CY,EAASZ,MAAM,eAAgB,QAAS,GAAI,eAC5CY,EAASZ,MAAM,cAAe,QAAS,GAAI,SAC3CY,EAASd,SAAS,QAAS,CACvBkB,WAAW,EACXH,YAAcZ,IAAQA,EAAKa,WAAW,YAAcb,EAAKa,WAAW,UAAqB,aAATb,GAAgC,WAATA,EACvGc,WAAad,GAAgB,eAATA,GAAkC,mBAATA,GAAsC,SAATA,IAE9EW,EAASd,SAAS,SAAU,CACxBkB,UAAW,UAEfJ,EAASd,SAAS,cAAe,CAC7Be,YAAcZ,GAAgB,oBAATA,GAAuC,aAATA,EACnDc,WAAad,GAAgB,oBAATA,GAE5B,IAyII,SAASqE,GAAa1F,EAAK2F,EAAMC,EAAIC,EAASC,GAC9C,IAAIC,EAAYJ,EAAKG,GAQrB,OAPKC,IACDA,EAAYJ,EAAKG,GAAU9F,EAAIgG,YAAYF,GAAQrB,MACnDmB,EAAG/R,KAAKiS,IAERC,EAAYF,IACZA,EAAUE,GAEPF,CACX,CAoDI,SAASI,GAAY5I,EAAO6I,EAAOzB,GACnC,MAAMtF,EAAmB9B,EAAM8I,wBACzBC,EAAsB,IAAV3B,EAAc5P,KAAKiC,IAAI2N,EAAQ,EAAG,IAAO,EAC3D,OAAO5P,KAAKgB,OAAOqQ,EAAQE,GAAajH,GAAoBA,EAAmBiH,CACnF,CAGI,SAASC,GAAYC,EAAQtG,IACxBA,GAAQsG,MAGbtG,EAAMA,GAAOsG,EAAOC,WAAW,OAC3BC,OAGJxG,EAAIyG,iBACJzG,EAAI0G,UAAU,EAAG,EAAGJ,EAAO7B,MAAO6B,EAAOK,QACzC3G,EAAI4G,UACR,CACA,SAASC,GAAU7G,EAAK1N,EAASY,EAAGE,GAEhC0T,GAAgB9G,EAAK1N,EAASY,EAAGE,EAAG,KACxC,CAEA,SAAS0T,GAAgB9G,EAAK1N,EAASY,EAAGE,EAAG2T,GACzC,IAAIrX,EAAMsX,EAASC,EAASxS,EAAMyS,EAAczC,EAAO0C,EAAUC,EACjE,MAAMzH,EAAQrN,EAAQ+U,WAChBC,EAAWhV,EAAQgV,SACnBC,EAASjV,EAAQiV,OACvB,IAAIC,GAAOF,GAAY,GAAKrS,EAC5B,GAAI0K,GAA0B,iBAAVA,IAChBjQ,EAAOiQ,EAAM9P,WACA,8BAATH,GAAiD,+BAATA,GAMxC,OALAsQ,EAAIwG,OACJxG,EAAIyH,UAAUvU,EAAGE,GACjB4M,EAAI0H,OAAOF,GACXxH,EAAI2H,UAAUhI,GAAQA,EAAM8E,MAAQ,GAAI9E,EAAMgH,OAAS,EAAGhH,EAAM8E,MAAO9E,EAAMgH,aAC7E3G,EAAI4G,UAIZ,KAAIxQ,MAAMmR,IAAWA,GAAU,GAA/B,CAIA,OADAvH,EAAI4H,YACGjI,GAEH,QACQoH,EACA/G,EAAI6H,QAAQ3U,EAAGE,EAAG2T,EAAI,EAAGQ,EAAQ,EAAG,EAAGzS,GAEvCkL,EAAI8H,IAAI5U,EAAGE,EAAGmU,EAAQ,EAAGzS,GAE7BkL,EAAI+H,YACJ,MACJ,IAAK,WACDtD,EAAQsC,EAAIA,EAAI,EAAIQ,EACpBvH,EAAIgI,OAAO9U,EAAI2B,KAAKqE,IAAIsO,GAAO/C,EAAOrR,EAAIyB,KAAKsF,IAAIqN,GAAOD,GAC1DC,GAAOpS,EACP4K,EAAIiI,OAAO/U,EAAI2B,KAAKqE,IAAIsO,GAAO/C,EAAOrR,EAAIyB,KAAKsF,IAAIqN,GAAOD,GAC1DC,GAAOpS,EACP4K,EAAIiI,OAAO/U,EAAI2B,KAAKqE,IAAIsO,GAAO/C,EAAOrR,EAAIyB,KAAKsF,IAAIqN,GAAOD,GAC1DvH,EAAI+H,YACJ,MACJ,IAAK,cAQDb,EAAwB,KAATK,EACf9S,EAAO8S,EAASL,EAChBF,EAAUnS,KAAKsF,IAAIqN,EAAMrS,GAAcV,EACvC0S,EAAWtS,KAAKsF,IAAIqN,EAAMrS,IAAe4R,EAAIA,EAAI,EAAIG,EAAezS,GACpEwS,EAAUpS,KAAKqE,IAAIsO,EAAMrS,GAAcV,EACvC2S,EAAWvS,KAAKqE,IAAIsO,EAAMrS,IAAe4R,EAAIA,EAAI,EAAIG,EAAezS,GACpEuL,EAAI8H,IAAI5U,EAAIiU,EAAU/T,EAAI6T,EAASC,EAAcM,EAAM5S,EAAI4S,EAAMtS,GACjE8K,EAAI8H,IAAI5U,EAAIkU,EAAUhU,EAAI4T,EAASE,EAAcM,EAAMtS,EAASsS,GAChExH,EAAI8H,IAAI5U,EAAIiU,EAAU/T,EAAI6T,EAASC,EAAcM,EAAKA,EAAMtS,GAC5D8K,EAAI8H,IAAI5U,EAAIkU,EAAUhU,EAAI4T,EAASE,EAAcM,EAAMtS,EAASsS,EAAM5S,GACtEoL,EAAI+H,YACJ,MACJ,IAAK,OACD,IAAKT,EAAU,CACX7S,EAAOI,KAAKqT,QAAUX,EACtB9C,EAAQsC,EAAIA,EAAI,EAAItS,EACpBuL,EAAImI,KAAKjV,EAAIuR,EAAOrR,EAAIqB,EAAM,EAAIgQ,EAAO,EAAIhQ,GAC7C,KACJ,CACA+S,GAAOrS,EACS,IAAK,UACrBgS,EAAWtS,KAAKsF,IAAIqN,IAAQT,EAAIA,EAAI,EAAIQ,GACxCP,EAAUnS,KAAKsF,IAAIqN,GAAOD,EAC1BN,EAAUpS,KAAKqE,IAAIsO,GAAOD,EAC1BH,EAAWvS,KAAKqE,IAAIsO,IAAQT,EAAIA,EAAI,EAAIQ,GACxCvH,EAAIgI,OAAO9U,EAAIiU,EAAU/T,EAAI6T,GAC7BjH,EAAIiI,OAAO/U,EAAIkU,EAAUhU,EAAI4T,GAC7BhH,EAAIiI,OAAO/U,EAAIiU,EAAU/T,EAAI6T,GAC7BjH,EAAIiI,OAAO/U,EAAIkU,EAAUhU,EAAI4T,GAC7BhH,EAAI+H,YACJ,MACJ,IAAK,WACDP,GAAOrS,EACS,IAAK,QACrBgS,EAAWtS,KAAKsF,IAAIqN,IAAQT,EAAIA,EAAI,EAAIQ,GACxCP,EAAUnS,KAAKsF,IAAIqN,GAAOD,EAC1BN,EAAUpS,KAAKqE,IAAIsO,GAAOD,EAC1BH,EAAWvS,KAAKqE,IAAIsO,IAAQT,EAAIA,EAAI,EAAIQ,GACxCvH,EAAIgI,OAAO9U,EAAIiU,EAAU/T,EAAI6T,GAC7BjH,EAAIiI,OAAO/U,EAAIiU,EAAU/T,EAAI6T,GAC7BjH,EAAIgI,OAAO9U,EAAIkU,EAAUhU,EAAI4T,GAC7BhH,EAAIiI,OAAO/U,EAAIkU,EAAUhU,EAAI4T,GAC7B,MACJ,IAAK,OACDG,EAAWtS,KAAKsF,IAAIqN,IAAQT,EAAIA,EAAI,EAAIQ,GACxCP,EAAUnS,KAAKsF,IAAIqN,GAAOD,EAC1BN,EAAUpS,KAAKqE,IAAIsO,GAAOD,EAC1BH,EAAWvS,KAAKqE,IAAIsO,IAAQT,EAAIA,EAAI,EAAIQ,GACxCvH,EAAIgI,OAAO9U,EAAIiU,EAAU/T,EAAI6T,GAC7BjH,EAAIiI,OAAO/U,EAAIiU,EAAU/T,EAAI6T,GAC7BjH,EAAIgI,OAAO9U,EAAIkU,EAAUhU,EAAI4T,GAC7BhH,EAAIiI,OAAO/U,EAAIkU,EAAUhU,EAAI4T,GAC7BQ,GAAOrS,EACPgS,EAAWtS,KAAKsF,IAAIqN,IAAQT,EAAIA,EAAI,EAAIQ,GACxCP,EAAUnS,KAAKsF,IAAIqN,GAAOD,EAC1BN,EAAUpS,KAAKqE,IAAIsO,GAAOD,EAC1BH,EAAWvS,KAAKqE,IAAIsO,IAAQT,EAAIA,EAAI,EAAIQ,GACxCvH,EAAIgI,OAAO9U,EAAIiU,EAAU/T,EAAI6T,GAC7BjH,EAAIiI,OAAO/U,EAAIiU,EAAU/T,EAAI6T,GAC7BjH,EAAIgI,OAAO9U,EAAIkU,EAAUhU,EAAI4T,GAC7BhH,EAAIiI,OAAO/U,EAAIkU,EAAUhU,EAAI4T,GAC7B,MACJ,IAAK,OACDA,EAAUD,EAAIA,EAAI,EAAIlS,KAAKsF,IAAIqN,GAAOD,EACtCN,EAAUpS,KAAKqE,IAAIsO,GAAOD,EAC1BvH,EAAIgI,OAAO9U,EAAI8T,EAAS5T,EAAI6T,GAC5BjH,EAAIiI,OAAO/U,EAAI8T,EAAS5T,EAAI6T,GAC5B,MACJ,IAAK,OACDjH,EAAIgI,OAAO9U,EAAGE,GACd4M,EAAIiI,OAAO/U,EAAI2B,KAAKsF,IAAIqN,IAAQT,EAAIA,EAAI,EAAIQ,GAASnU,EAAIyB,KAAKqE,IAAIsO,GAAOD,GACzE,MACJ,KAAK,EACDvH,EAAI+H,YAGZ/H,EAAIoI,OACA9V,EAAQ+V,YAAc,GACtBrI,EAAIsI,QA3GR,CA6GJ,CAOI,SAASC,GAAeC,EAAOC,EAAMC,GAErC,OADAA,EAASA,GAAU,IACXD,GAAQD,GAASA,EAAMtV,EAAIuV,EAAKlF,KAAOmF,GAAUF,EAAMtV,EAAIuV,EAAKpF,MAAQqF,GAAUF,EAAMpV,EAAIqV,EAAKrF,IAAMsF,GAAUF,EAAMpV,EAAIqV,EAAKnF,OAASoF,CACrJ,CACA,SAASC,GAAS3I,EAAKyI,GACnBzI,EAAIwG,OACJxG,EAAI4H,YACJ5H,EAAImI,KAAKM,EAAKlF,KAAMkF,EAAKrF,IAAKqF,EAAKpF,MAAQoF,EAAKlF,KAAMkF,EAAKnF,OAASmF,EAAKrF,KACzEpD,EAAI4D,MACR,CACA,SAASgF,GAAW5I,GAChBA,EAAI4G,SACR,CA2CA,SAASiC,GAAa7I,EAAK9M,EAAGE,EAAG0V,EAAMC,GACnC,GAAIA,EAAKC,eAAiBD,EAAKE,UAAW,CAOtC,MAAMC,EAAUlJ,EAAIgG,YAAY8C,GAC1BvF,EAAOrQ,EAAIgW,EAAQC,sBACnB9F,EAAQnQ,EAAIgW,EAAQE,uBACpBhG,EAAMhQ,EAAI8V,EAAQG,wBAClB/F,EAASlQ,EAAI8V,EAAQI,yBACrBC,EAAcR,EAAKC,eAAiB5F,EAAME,GAAU,EAAIA,EAC9DtD,EAAIwJ,YAAcxJ,EAAIyJ,UACtBzJ,EAAI4H,YACJ5H,EAAI+D,UAAYgF,EAAKW,iBAAmB,EACxC1J,EAAIgI,OAAOzE,EAAMgG,GACjBvJ,EAAIiI,OAAO5E,EAAOkG,GAClBvJ,EAAIsI,QACR,CACJ,CACA,SAASqB,GAAa3J,EAAK+I,GACvB,MAAMa,EAAW5J,EAAIyJ,UACrBzJ,EAAIyJ,UAAYV,EAAKtN,MACrBuE,EAAI6J,SAASd,EAAKxF,KAAMwF,EAAK3F,IAAK2F,EAAKtE,MAAOsE,EAAKpC,QACnD3G,EAAIyJ,UAAYG,CACpB,CAGI,SAASE,GAAW9J,EAAK2E,EAAMzR,EAAGE,EAAGqM,EAAMsJ,EAAO,CAAC,GACnD,MAAMgB,EAAQva,EAAQmV,GAAQA,EAAO,CACjCA,GAEE2D,EAASS,EAAKiB,YAAc,GAA0B,KAArBjB,EAAKkB,YAC5C,IAAIlZ,EAAG+X,EAIP,IAHA9I,EAAIwG,OACJxG,EAAIP,KAAOA,EAAKqG,OAtDpB,SAAuB9F,EAAK+I,GACpBA,EAAKmB,aACLlK,EAAIyH,UAAUsB,EAAKmB,YAAY,GAAInB,EAAKmB,YAAY,IAEnD5a,EAAcyZ,EAAKzB,WACpBtH,EAAI0H,OAAOqB,EAAKzB,UAEhByB,EAAKtN,QACLuE,EAAIyJ,UAAYV,EAAKtN,OAErBsN,EAAKoB,YACLnK,EAAImK,UAAYpB,EAAKoB,WAErBpB,EAAKqB,eACLpK,EAAIoK,aAAerB,EAAKqB,aAEhC,CAuCIC,CAAcrK,EAAK+I,GACfhY,EAAI,EAAGA,EAAIgZ,EAAM7Y,SAAUH,EAC3B+X,EAAOiB,EAAMhZ,GACTgY,EAAKuB,UACLX,GAAa3J,EAAK+I,EAAKuB,UAEvBhC,IACIS,EAAKkB,cACLjK,EAAIwJ,YAAcT,EAAKkB,aAEtB3a,EAAcyZ,EAAKiB,eACpBhK,EAAI+D,UAAYgF,EAAKiB,aAEzBhK,EAAIuK,WAAWzB,EAAM5V,EAAGE,EAAG2V,EAAKyB,WAEpCxK,EAAIyK,SAAS3B,EAAM5V,EAAGE,EAAG2V,EAAKyB,UAC9B3B,GAAa7I,EAAK9M,EAAGE,EAAG0V,EAAMC,GAC9B3V,GAAKlD,OAAOuP,EAAKG,YAErBI,EAAI4G,SACR,CAKI,SAAS8D,GAAmB1K,EAAKmI,GACjC,MAAM,EAAEjV,EAAE,EAAEE,EAAE,EAAE2T,EAAE,EAAE4D,EAAE,OAAEpD,GAAYY,EAEpCnI,EAAI8H,IAAI5U,EAAIqU,EAAOqD,QAASxX,EAAImU,EAAOqD,QAASrD,EAAOqD,QAAS,IAAMhW,EAAIA,GAAI,GAE9EoL,EAAIiI,OAAO/U,EAAGE,EAAIuX,EAAIpD,EAAOsD,YAE7B7K,EAAI8H,IAAI5U,EAAIqU,EAAOsD,WAAYzX,EAAIuX,EAAIpD,EAAOsD,WAAYtD,EAAOsD,WAAYjW,EAAIM,GAAS,GAE1F8K,EAAIiI,OAAO/U,EAAI6T,EAAIQ,EAAOuD,YAAa1X,EAAIuX,GAE3C3K,EAAI8H,IAAI5U,EAAI6T,EAAIQ,EAAOuD,YAAa1X,EAAIuX,EAAIpD,EAAOuD,YAAavD,EAAOuD,YAAa5V,EAAS,GAAG,GAEhG8K,EAAIiI,OAAO/U,EAAI6T,EAAG3T,EAAImU,EAAOwD,UAE7B/K,EAAI8H,IAAI5U,EAAI6T,EAAIQ,EAAOwD,SAAU3X,EAAImU,EAAOwD,SAAUxD,EAAOwD,SAAU,GAAI7V,GAAS,GAEpF8K,EAAIiI,OAAO/U,EAAIqU,EAAOqD,QAASxX,EACnC,CAEA,MAAM4X,GAAc,uCACdC,GAAa,wEAWf,SAASC,GAAa3b,EAAOkF,GAC7B,MAAM0W,GAAW,GAAK5b,GAAO6b,MAAMJ,IACnC,IAAKG,GAA0B,WAAfA,EAAQ,GACpB,OAAc,IAAP1W,EAGX,OADAlF,GAAS4b,EAAQ,GACVA,EAAQ,IACX,IAAK,KACD,OAAO5b,EACX,IAAK,IACDA,GAAS,IAGjB,OAAOkF,EAAOlF,CAClB,CACA,MAAM8b,GAAgBpY,IAAKA,GAAK,EAChC,SAASqY,GAAkB/b,EAAOgc,GAC9B,MAAMC,EAAM,CAAC,EACPC,EAAWzb,EAASub,GACpBta,EAAOwa,EAAW9b,OAAOsB,KAAKsa,GAASA,EACvCG,EAAO1b,EAAST,GAASkc,EAAYE,GAAOrb,EAAef,EAAMoc,GAAOpc,EAAMgc,EAAMI,KAAWA,GAAOpc,EAAMoc,GAAQ,IAAIpc,EAC9H,IAAK,MAAMoc,KAAQ1a,EACfua,EAAIG,GAAQN,GAAaK,EAAKC,IAElC,OAAOH,CACX,CAQI,SAASI,GAAOrc,GAChB,OAAO+b,GAAkB/b,EAAO,CAC5B6T,IAAK,IACLC,MAAO,IACPC,OAAQ,IACRC,KAAM,KAEd,CAOI,SAASsI,GAActc,GACvB,OAAO+b,GAAkB/b,EAAO,CAC5B,UACA,WACA,aACA,eAER,CAQI,SAASuc,GAAUvc,GACnB,MAAM+D,EAAMsY,GAAOrc,GAGnB,OAFA+D,EAAImR,MAAQnR,EAAIiQ,KAAOjQ,EAAI+P,MAC3B/P,EAAIqT,OAASrT,EAAI8P,IAAM9P,EAAIgQ,OACpBhQ,CACX,CAOI,SAASyY,GAAOzZ,EAAS0Z,GACzB1Z,EAAUA,GAAW,CAAC,EACtB0Z,EAAWA,GAAYhK,GAASvC,KAChC,IAAIhL,EAAOnE,EAAegC,EAAQmC,KAAMuX,EAASvX,MAC7B,iBAATA,IACPA,EAAOwX,SAASxX,EAAM,KAE1B,IAAIkL,EAAQrP,EAAegC,EAAQqN,MAAOqM,EAASrM,OAC/CA,KAAW,GAAKA,GAAOyL,MAAMH,MAC7BiB,QAAQC,KAAK,kCAAoCxM,EAAQ,KACzDA,OAAQZ,GAEZ,MAAMU,EAAO,CACTC,OAAQpP,EAAegC,EAAQoN,OAAQsM,EAAStM,QAChDE,WAAYsL,GAAa5a,EAAegC,EAAQsN,WAAYoM,EAASpM,YAAanL,GAClFA,OACAkL,QACAE,OAAQvP,EAAegC,EAAQuN,OAAQmM,EAASnM,QAChDiG,OAAQ,IAGZ,OADArG,EAAKqG,OAzdL,SAAsBrG,GACtB,OAAKA,GAAQnQ,EAAcmQ,EAAKhL,OAASnF,EAAcmQ,EAAKC,QACjD,MAEHD,EAAKE,MAAQF,EAAKE,MAAQ,IAAM,KAAOF,EAAKI,OAASJ,EAAKI,OAAS,IAAM,IAAMJ,EAAKhL,KAAO,MAAQgL,EAAKC,MACpH,CAodkB0M,CAAa3M,GACpBA,CACX,CAWI,SAAS4M,GAAQC,EAAQlN,EAAS1N,EAAO6a,GACzC,IACIxb,EAAGO,EAAM/B,EADTid,GAAY,EAEhB,IAAIzb,EAAI,EAAGO,EAAOgb,EAAOpb,OAAQH,EAAIO,IAAQP,EAEzC,GADAxB,EAAQ+c,EAAOvb,QACDgO,IAAVxP,SAGYwP,IAAZK,GAA0C,mBAAV7P,IAChCA,EAAQA,EAAM6P,GACdoN,GAAY,QAEFzN,IAAVrN,GAAuBlC,EAAQD,KAC/BA,EAAQA,EAAMmC,EAAQnC,EAAM2B,QAC5Bsb,GAAY,QAEFzN,IAAVxP,GAIA,OAHIgd,IAASC,IACTD,EAAKC,WAAY,GAEdjd,CAGnB,CAeA,SAASkd,GAAcC,EAAetN,GAClC,OAAOzP,OAAOmO,OAAOnO,OAAOoC,OAAO2a,GAAgBtN,EACvD,CAWI,SAASuN,GAAgBC,EAAQC,EAAW,CAC5C,IACDC,EAAYd,EAAUe,EAAY,IAAIH,EAAO,IAC5C,MAAMI,EAAkBF,GAAcF,OACd,IAAbZ,IACPA,EAAWiB,GAAS,YAAaL,IAErC,MAAMM,EAAQ,CACV,CAACC,OAAOC,aAAc,SACtBC,YAAY,EACZC,QAASV,EACTW,YAAaP,EACb5K,UAAW4J,EACXwB,WAAYT,EACZ5L,SAAW1C,GAAQkO,GAAgB,CAC3BlO,KACGmO,GACJC,EAAUG,EAAiBhB,IAEtC,OAAO,IAAIyB,MAAMP,EAAO,CAGpBQ,eAAe,CAAC5b,EAAQ6Z,YACb7Z,EAAO6Z,UACP7Z,EAAO6b,aACPf,EAAO,GAAGjB,IACV,GAIXlP,IAAI,CAAC3K,EAAQ6Z,IACFiC,GAAQ9b,EAAQ6Z,GAAM,IAyOzC,SAA8BA,EAAMkB,EAAUD,EAAQiB,GAClD,IAAIte,EACJ,IAAK,MAAMue,KAAUjB,EAEjB,GADAtd,EAAQ0d,GAASc,GAAQD,EAAQnC,GAAOiB,QACnB,IAAVrd,EACP,OAAOye,GAAiBrC,EAAMpc,GAAS0e,GAAkBrB,EAAQiB,EAAOlC,EAAMpc,GAASA,CAGnG,CAjP6C2e,CAAqBvC,EAAMkB,EAAUD,EAAQ9a,KAKlFqc,yBAAyB,CAACrc,EAAQ6Z,IACvByC,QAAQD,yBAAyBrc,EAAOwb,QAAQ,GAAI3B,GAI/D0C,eAAe,IACJD,QAAQC,eAAezB,EAAO,IAIzCjY,IAAI,CAAC7C,EAAQ6Z,IACF2C,GAAqBxc,GAAQoM,SAASyN,GAIjD4C,QAASzc,GACEwc,GAAqBxc,GAIhC,GAAA8K,CAAK9K,EAAQ6Z,EAAMpc,GACf,MAAMif,EAAU1c,EAAO2c,WAAa3c,EAAO2c,SAAW1B,KAGtD,OAFAjb,EAAO6Z,GAAQ6C,EAAQ7C,GAAQpc,SACxBuC,EAAO6b,OACP,CACX,GAER,CAQI,SAASe,GAAeb,EAAOzO,EAASuP,EAAUC,GAClD,MAAM1B,EAAQ,CACVG,YAAY,EACZwB,OAAQhB,EACRiB,SAAU1P,EACV2P,UAAWJ,EACXK,OAAQ,IAAIC,IACZrQ,aAAcA,GAAaiP,EAAOe,GAClCM,WAAalP,GAAM0O,GAAeb,EAAO7N,EAAK2O,EAAUC,GACxDzN,SAAW1C,GAAQiQ,GAAeb,EAAM1M,SAAS1C,GAAQW,EAASuP,EAAUC,IAEhF,OAAO,IAAInB,MAAMP,EAAO,CAGpBQ,eAAe,CAAC5b,EAAQ6Z,YACb7Z,EAAO6Z,UACPkC,EAAMlC,IACN,GAIXlP,IAAI,CAAC3K,EAAQ6Z,EAAMwD,IACRvB,GAAQ9b,EAAQ6Z,GAAM,IA6DzC,SAA6B7Z,EAAQ6Z,EAAMwD,GACvC,MAAM,OAAEN,EAAO,SAAEC,EAAS,UAAEC,EAAYnQ,aAAcP,GAAiBvM,EACvE,IAAIvC,EAAQsf,EAAOlD,GAYnB,OAVItX,EAAW9E,IAAU8O,EAAY+Q,aAAazD,KAC9Cpc,EAWR,SAA4Boc,EAAM0D,EAAUvd,EAAQqd,GAChD,MAAM,OAAEN,EAAO,SAAEC,EAAS,UAAEC,EAAU,OAAEC,GAAYld,EACpD,GAAIkd,EAAOra,IAAIgX,GACX,MAAM,IAAI2D,MAAM,uBAAyB7f,MAAM+S,KAAKwM,GAAQO,KAAK,MAAQ,KAAO5D,GAEpFqD,EAAOQ,IAAI7D,GACX,IAAIpc,EAAQ8f,EAASP,EAAUC,GAAaI,GAM5C,OALAH,EAAOS,OAAO9D,GACVqC,GAAiBrC,EAAMpc,KAEvBA,EAAQ0e,GAAkBY,EAAOvB,QAASuB,EAAQlD,EAAMpc,IAErDA,CACX,CAxBgBmgB,CAAmB/D,EAAMpc,EAAOuC,EAAQqd,IAEhD3f,EAAQD,IAAUA,EAAM2B,SACxB3B,EAsBR,SAAuBoc,EAAMpc,EAAOuC,EAAQ6d,GACxC,MAAM,OAAEd,EAAO,SAAEC,EAAS,UAAEC,EAAYnQ,aAAcP,GAAiBvM,EACvE,QAA8B,IAAnBgd,EAASpd,OAAyBie,EAAYhE,GACrD,OAAOpc,EAAMuf,EAASpd,MAAQnC,EAAM2B,QACjC,GAAIlB,EAAST,EAAM,IAAK,CAE3B,MAAMqgB,EAAMrgB,EACNqd,EAASiC,EAAOvB,QAAQuC,QAAQ5W,GAAIA,IAAM2W,IAChDrgB,EAAQ,GACR,IAAK,MAAMmF,KAAQkb,EAAI,CACnB,MAAMrc,EAAW0a,GAAkBrB,EAAQiC,EAAQlD,EAAMjX,GACzDnF,EAAMsE,KAAK6a,GAAenb,EAAUub,EAAUC,GAAaA,EAAUpD,GAAOtN,GAChF,CACJ,CACA,OAAO9O,CACX,CArCgBugB,CAAcnE,EAAMpc,EAAOuC,EAAQuM,EAAYsR,cAEvD3B,GAAiBrC,EAAMpc,KAEvBA,EAAQmf,GAAenf,EAAOuf,EAAUC,GAAaA,EAAUpD,GAAOtN,IAEnE9O,CACX,CA5E6CwgB,CAAoBje,EAAQ6Z,EAAMwD,KAKvEhB,yBAAyB,CAACrc,EAAQ6Z,IACvB7Z,EAAO8M,aAAaoR,QAAU5B,QAAQzZ,IAAIkZ,EAAOlC,GAAQ,CAC5D9J,YAAY,EACZoO,cAAc,QACdlR,EAAYqP,QAAQD,yBAAyBN,EAAOlC,GAI5D0C,eAAe,IACJD,QAAQC,eAAeR,GAIlClZ,IAAI,CAAC7C,EAAQ6Z,IACFyC,QAAQzZ,IAAIkZ,EAAOlC,GAI9B4C,QAAQ,IACGH,QAAQG,QAAQV,GAI3BjR,IAAI,CAAC9K,EAAQ6Z,EAAMpc,KACfse,EAAMlC,GAAQpc,SACPuC,EAAO6Z,IACP,IAGnB,CAGI,SAAS/M,GAAaiP,EAAO7L,EAAW,CACxCkO,YAAY,EACZC,WAAW,IAEX,MAAM,YAAElO,EAAaD,EAASkO,WAAW,WAAE/N,EAAYH,EAASmO,UAAU,SAAEC,EAAUpO,EAASgO,SAAanC,EAC5G,MAAO,CACHmC,QAASI,EACTF,WAAYjO,EACZkO,UAAWhO,EACXiN,aAAc/a,EAAW4N,GAAeA,EAAc,IAAIA,EAC1D0N,YAAatb,EAAW8N,GAAcA,EAAa,IAAIA,EAE/D,CACA,MAAM4L,GAAU,CAACD,EAAQzM,IAAOyM,EAASA,EAAS9Z,EAAYqN,GAAQA,EAChE2M,GAAmB,CAACrC,EAAMpc,IAAQS,EAAST,IAAmB,aAAToc,IAAyD,OAAjChc,OAAO0e,eAAe9e,IAAmBA,EAAMoP,cAAgBhP,QAClJ,SAASie,GAAQ9b,EAAQ6Z,EAAMU,GAC3B,GAAI1c,OAAOC,UAAUmD,eAAejD,KAAKgC,EAAQ6Z,IAAkB,gBAATA,EACtD,OAAO7Z,EAAO6Z,GAElB,MAAMpc,EAAQ8c,IAGd,OADAva,EAAO6Z,GAAQpc,EACRA,CACX,CA+CA,SAAS8gB,GAAgBrE,EAAUL,EAAMpc,GACrC,OAAO8E,EAAW2X,GAAYA,EAASL,EAAMpc,GAASyc,CAC1D,CACA,MAAMsE,GAAW,CAACne,EAAKoe,KAAiB,IAARpe,EAAeoe,EAAwB,iBAARpe,EAAmBkB,EAAiBkd,EAAQpe,QAAO4M,EAClH,SAASyR,GAAU5T,EAAK6T,EAActe,EAAKue,EAAgBnhB,GACvD,IAAK,MAAMghB,KAAUE,EAAa,CAC9B,MAAMhS,EAAQ6R,GAASne,EAAKoe,GAC5B,GAAI9R,EAAO,CACP7B,EAAI4S,IAAI/Q,GACR,MAAMuN,EAAWqE,GAAgB5R,EAAM2D,UAAWjQ,EAAK5C,GACvD,QAAwB,IAAbyc,GAA4BA,IAAa7Z,GAAO6Z,IAAa0E,EAGpE,OAAO1E,CAEf,MAAO,IAAc,IAAVvN,QAA6C,IAAnBiS,GAAkCve,IAAQue,EAG3E,OAAO,IAEf,CACA,OAAO,CACX,CACA,SAASzC,GAAkBwC,EAAcld,EAAUoY,EAAMpc,GACrD,MAAMud,EAAavZ,EAASga,YACtBvB,EAAWqE,GAAgB9c,EAAS6O,UAAWuJ,EAAMpc,GACrDohB,EAAY,IACXF,KACA3D,GAEDlQ,EAAM,IAAIqS,IAChBrS,EAAI4S,IAAIjgB,GACR,IAAI4C,EAAMye,GAAiBhU,EAAK+T,EAAWhF,EAAMK,GAAYL,EAAMpc,GACnE,OAAY,OAAR4C,SAGoB,IAAb6Z,GAA4BA,IAAaL,IAChDxZ,EAAMye,GAAiBhU,EAAK+T,EAAW3E,EAAU7Z,EAAK5C,GAC1C,OAAR4C,KAIDwa,GAAgBld,MAAM+S,KAAK5F,GAAM,CACpC,IACDkQ,EAAYd,GAAU,IAQ7B,SAAsBzY,EAAUoY,EAAMpc,GAClC,MAAMghB,EAAShd,EAASia,aAClB7B,KAAQ4E,IACVA,EAAO5E,GAAQ,CAAC,GAEpB,MAAM7Z,EAASye,EAAO5E,GACtB,OAAInc,EAAQsC,IAAW9B,EAAST,GAErBA,EAEJuC,GAAU,CAAC,CACtB,CAnBiC+e,CAAatd,EAAUoY,EAAMpc,IAC9D,CACA,SAASqhB,GAAiBhU,EAAK+T,EAAWxe,EAAK6Z,EAAUtX,GACrD,KAAMvC,GACFA,EAAMqe,GAAU5T,EAAK+T,EAAWxe,EAAK6Z,EAAUtX,GAEnD,OAAOvC,CACX,CAsBA,SAAS8a,GAAS9a,EAAKya,GACnB,IAAK,MAAMnO,KAASmO,EAAO,CACvB,IAAKnO,EACD,SAEJ,MAAMlP,EAAQkP,EAAMtM,GACpB,QAAqB,IAAV5C,EACP,OAAOA,CAEf,CACJ,CACA,SAAS+e,GAAqBxc,GAC1B,IAAIb,EAAOa,EAAO6b,MAIlB,OAHK1c,IACDA,EAAOa,EAAO6b,MAItB,SAAkCf,GAC9B,MAAMhQ,EAAM,IAAIqS,IAChB,IAAK,MAAMxQ,KAASmO,EAChB,IAAK,MAAMza,KAAOxC,OAAOsB,KAAKwN,GAAOoR,QAAQ5d,IAAKA,EAAEiQ,WAAW,OAC3DtF,EAAI4S,IAAIrd,GAGhB,OAAO1C,MAAM+S,KAAK5F,EACtB,CAZ8BkU,CAAyBhf,EAAOwb,UAEnDrc,CACX,CAqMI,SAAS8f,KACT,MAAyB,oBAAXzY,QAA8C,oBAAb0Y,QACnD,CAGI,SAASC,GAAeC,GACxB,IAAIX,EAASW,EAAQC,WAIrB,OAHIZ,GAAgC,wBAAtBA,EAAO1gB,aACjB0gB,EAASA,EAAOa,MAEbb,CACX,CAII,SAASc,GAAcC,EAAY/S,EAAMgT,GACzC,IAAIC,EAUJ,MAT0B,iBAAfF,GACPE,EAAgBvF,SAASqF,EAAY,KACJ,IAA7BA,EAAWlf,QAAQ,OAEnBof,EAAgBA,EAAgB,IAAMjT,EAAK4S,WAAWI,KAG1DC,EAAgBF,EAEbE,CACX,CAvMgBthB,OAAOuhB,QAwMvB,MAAMC,GAAoBC,GAAUA,EAAQC,cAAcC,YAAYH,iBAAiBC,EAAS,MAI1FG,GAAY,CACd,MACA,QACA,SACA,QAEJ,SAASC,GAAmBC,EAAQrS,EAAOsS,GACvC,MAAMC,EAAS,CAAC,EAChBD,EAASA,EAAS,IAAMA,EAAS,GACjC,IAAI,IAAIlhB,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,MAAMohB,EAAML,GAAU/gB,GACtBmhB,EAAOC,GAAO9b,WAAW2b,EAAOrS,EAAQ,IAAMwS,EAAMF,KAAY,CACpE,CAGA,OAFAC,EAAOzN,MAAQyN,EAAO3O,KAAO2O,EAAO7O,MACpC6O,EAAOvL,OAASuL,EAAO9O,IAAM8O,EAAO5O,OAC7B4O,CACX,CACA,MAAME,GAAe,CAAClf,EAAGE,EAAGtB,KAAUoB,EAAI,GAAKE,EAAI,MAAQtB,IAAWA,EAAOugB,YA+BzE,SAASC,GAAoBC,EAAOlV,GACpC,GAAI,WAAYkV,EACZ,OAAOA,EAEX,MAAM,OAAEjM,EAAO,wBAAEH,GAA6B9I,EACxCsC,EAAQ+R,GAAiBpL,GACzBkM,EAAgC,eAApB7S,EAAM8S,UAClBC,EAAWX,GAAmBpS,EAAO,WACrCgT,EAAUZ,GAAmBpS,EAAO,SAAU,UAC9C,EAAEzM,EAAE,EAAEE,EAAE,IAAEwf,GAnChB,SAA2Bnc,EAAG6P,GAC9B,MAAMuM,EAAUpc,EAAEoc,QACZjhB,EAASihB,GAAWA,EAAQ3hB,OAAS2hB,EAAQ,GAAKpc,GAClD,QAAEqc,EAAQ,QAAEC,GAAanhB,EAC/B,IACIsB,EAAGE,EADHwf,GAAM,EAEV,GAAIR,GAAaU,EAASC,EAAStc,EAAE3E,QACjCoB,EAAI4f,EACJ1f,EAAI2f,MACD,CACH,MAAM5K,EAAO7B,EAAO0M,wBACpB9f,EAAItB,EAAOqhB,QAAU9K,EAAK5E,KAC1BnQ,EAAIxB,EAAOshB,QAAU/K,EAAK/E,IAC1BwP,GAAM,CACV,CACA,MAAO,CACH1f,IACAE,IACAwf,MAER,CAe6BO,CAAkBZ,EAAOjM,GAC5CU,EAAU0L,EAASnP,MAAQqP,GAAOD,EAAQpP,MAC1C0D,EAAUyL,EAAStP,KAAOwP,GAAOD,EAAQvP,KAC/C,IAAI,MAAEqB,EAAM,OAAEkC,GAAYtJ,EAK1B,OAJImV,IACA/N,GAASiO,EAASjO,MAAQkO,EAAQlO,MAClCkC,GAAU+L,EAAS/L,OAASgM,EAAQhM,QAEjC,CACHzT,EAAG2B,KAAKgB,OAAO3C,EAAI8T,GAAWvC,EAAQ6B,EAAO7B,MAAQ0B,GACrD/S,EAAGyB,KAAKgB,OAAOzC,EAAI6T,GAAWN,EAASL,EAAOK,OAASR,GAE/D,CA0BA,MAAMiN,GAAUngB,GAAI4B,KAAKgB,MAAU,GAAJ5C,GAAU,GAuCrC,SAASogB,GAAYhW,EAAOiW,EAAYC,GACxC,MAAMC,EAAaF,GAAc,EAC3BG,EAAe5e,KAAKmB,MAAMqH,EAAMsJ,OAAS6M,GACzCE,EAAc7e,KAAKmB,MAAMqH,EAAMoH,MAAQ+O,GAC7CnW,EAAMsJ,OAAS9R,KAAKmB,MAAMqH,EAAMsJ,QAChCtJ,EAAMoH,MAAQ5P,KAAKmB,MAAMqH,EAAMoH,OAC/B,MAAM6B,EAASjJ,EAAMiJ,OAQrB,OAJIA,EAAO3G,QAAU4T,IAAejN,EAAO3G,MAAMgH,SAAWL,EAAO3G,MAAM8E,SACrE6B,EAAO3G,MAAMgH,OAAS,GAAGtJ,EAAMsJ,WAC/BL,EAAO3G,MAAM8E,MAAQ,GAAGpH,EAAMoH,YAE9BpH,EAAM8I,0BAA4BqN,GAAclN,EAAOK,SAAW8M,GAAgBnN,EAAO7B,QAAUiP,KACnGrW,EAAM8I,wBAA0BqN,EAChClN,EAAOK,OAAS8M,EAChBnN,EAAO7B,MAAQiP,EACfrW,EAAM2C,IAAI2T,aAAaH,EAAY,EAAG,EAAGA,EAAY,EAAG,IACjD,EAGf,CAKI,MAAMI,GAA+B,WACrC,IAAIC,GAAmB,EACvB,IACI,MAAMvhB,EAAU,CACZ,WAAIwhB,GAEA,OADAD,GAAmB,GACZ,CACX,GAEA9C,OACAzY,OAAOyb,iBAAiB,OAAQ,KAAMzhB,GACtCgG,OAAO0b,oBAAoB,OAAQ,KAAM1hB,GAEjD,CAAE,MAAOmE,GAET,CACA,OAAOod,CACX,CAjByC,GA0BrC,SAASI,GAAatC,EAASuC,GAC/B,MAAM3kB,EA/LV,SAAkB4kB,EAAID,GAClB,OAAOxC,GAAiByC,GAAIC,iBAAiBF,EACjD,CA6LkBG,CAAS1C,EAASuC,GAC1B/I,EAAU5b,GAASA,EAAM6b,MAAM,qBACrC,OAAOD,GAAWA,EAAQ,QAAKpM,CACnC,CA4EA,SAASuV,GAAcC,EAAKC,EAAO/P,GAC/B,OAAO8P,EAxCmB,SAASC,EAAO/P,GAC1C,MAAO,CACHvR,EAAGA,GACQshB,EAAQA,EAAQ/P,EAAQvR,EAEnC,QAAAuhB,CAAU1N,GACNtC,EAAQsC,CACZ,EACAoD,UAAWvR,GACO,WAAVA,EACOA,EAEM,UAAVA,EAAoB,OAAS,QAExC8b,MAAM,CAACxhB,EAAG3D,IACC2D,EAAI3D,EAEfolB,WAAW,CAACzhB,EAAG0hB,IACJ1hB,EAAI0hB,EAGvB,CAmBiBC,CAAsBL,EAAO/P,GAjBnC,CACHvR,EAAGA,GACQA,EAEX,QAAAuhB,CAAU1N,GAAI,EACdoD,UAAWvR,GACAA,EAEX8b,MAAM,CAACxhB,EAAG3D,IACC2D,EAAI3D,EAEfolB,WAAW,CAACzhB,EAAG4hB,IACJ5hB,EAMnB,CACA,SAAS6hB,GAAsB/U,EAAKgV,GAChC,IAAIrV,EAAOsV,EACO,QAAdD,GAAqC,QAAdA,IACvBrV,EAAQK,EAAIsG,OAAO3G,MACnBsV,EAAW,CACPtV,EAAMyU,iBAAiB,aACvBzU,EAAMuV,oBAAoB,cAE9BvV,EAAMwV,YAAY,YAAaH,EAAW,aAC1ChV,EAAIoV,kBAAoBH,EAEhC,CACA,SAASI,GAAqBrV,EAAKiV,QACdlW,IAAbkW,WACOjV,EAAIoV,kBACXpV,EAAIsG,OAAO3G,MAAMwV,YAAY,YAAaF,EAAS,GAAIA,EAAS,IAExE,CC94EA,MAAMK,GACF,WAAA3W,GACIvB,KAAKmY,SAAW,KAChBnY,KAAKoY,QAAU,IAAIvZ,IACnBmB,KAAKqY,UAAW,EAChBrY,KAAKsY,eAAY3W,CACrB,CACH,OAAA4W,CAAQtY,EAAOuY,EAAOC,EAAMnmB,GACrB,MAAMomB,EAAYF,EAAM1d,UAAUxI,GAC5BqmB,EAAWH,EAAMtT,SACvBwT,EAAU1d,SAAS5H,GAAKA,EAAG,CACnB6M,QACA2Y,QAASJ,EAAMI,QACfD,WACAE,YAAaphB,KAAKgC,IAAIgf,EAAOD,EAAM5e,MAAO+e,MAEtD,CACH,QAAAG,GACW9Y,KAAKmY,WAGTnY,KAAKqY,UAAW,EAChBrY,KAAKmY,SAAWld,EAAiBvI,KAAKwI,QAAQ,KAC1C8E,KAAK+Y,UACL/Y,KAAKmY,SAAW,KACZnY,KAAKqY,UACLrY,KAAK8Y,UACT,IAER,CACH,OAAAC,CAAQN,EAAOO,KAAKC,OACb,IAAIC,EAAY,EAChBlZ,KAAKoY,QAAQpd,SAAQ,CAACwd,EAAOvY,KACzB,IAAKuY,EAAMW,UAAYX,EAAMY,MAAMtlB,OAC/B,OAEJ,MAAMslB,EAAQZ,EAAMY,MACpB,IAEI9hB,EAFA3D,EAAIylB,EAAMtlB,OAAS,EACnBulB,GAAO,EAEX,KAAM1lB,GAAK,IAAKA,EACZ2D,EAAO8hB,EAAMzlB,GACT2D,EAAKgiB,SACDhiB,EAAKiiB,OAASf,EAAMtT,WACpBsT,EAAMtT,SAAW5N,EAAKiiB,QAE1BjiB,EAAKkiB,KAAKf,GACVY,GAAO,IAEPD,EAAMzlB,GAAKylB,EAAMA,EAAMtlB,OAAS,GAChCslB,EAAMK,OAGVJ,IACApZ,EAAMoZ,OACNrZ,KAAKuY,QAAQtY,EAAOuY,EAAOC,EAAM,aAEhCW,EAAMtlB,SACP0kB,EAAMW,SAAU,EAChBnZ,KAAKuY,QAAQtY,EAAOuY,EAAOC,EAAM,YACjCD,EAAMI,SAAU,GAEpBM,GAAaE,EAAMtlB,MAAM,IAE7BkM,KAAKsY,UAAYG,EACC,IAAdS,IACAlZ,KAAKqY,UAAW,EAExB,CACH,SAAAqB,CAAUzZ,GACH,MAAM0Z,EAAS3Z,KAAKoY,QACpB,IAAII,EAAQmB,EAAOta,IAAIY,GAavB,OAZKuY,IACDA,EAAQ,CACJW,SAAS,EACTP,SAAS,EACTQ,MAAO,GACPte,UAAW,CACP8e,SAAU,GACVC,SAAU,KAGlBF,EAAOna,IAAIS,EAAOuY,IAEfA,CACX,CACH,MAAAsB,CAAO7Z,EAAOkV,EAAO4E,GACd/Z,KAAK0Z,UAAUzZ,GAAOnF,UAAUqa,GAAO1e,KAAKsjB,EAChD,CACH,GAAA3H,CAAInS,EAAOmZ,GACCA,GAAUA,EAAMtlB,QAGrBkM,KAAK0Z,UAAUzZ,GAAOmZ,MAAM3iB,QAAQ2iB,EACxC,CACH,GAAA7hB,CAAI0I,GACG,OAAOD,KAAK0Z,UAAUzZ,GAAOmZ,MAAMtlB,OAAS,CAChD,CACH,KAAA8F,CAAMqG,GACC,MAAMuY,EAAQxY,KAAKoY,QAAQ/Y,IAAIY,GAC1BuY,IAGLA,EAAMW,SAAU,EAChBX,EAAM5e,MAAQof,KAAKC,MACnBT,EAAMtT,SAAWsT,EAAMY,MAAMY,QAAO,CAACC,EAAKC,IAAMziB,KAAKiC,IAAIugB,EAAKC,EAAIC,YAAY,GAC9Ena,KAAK8Y,WACT,CACA,OAAAK,CAAQlZ,GACJ,IAAKD,KAAKqY,SACN,OAAO,EAEX,MAAMG,EAAQxY,KAAKoY,QAAQ/Y,IAAIY,GAC/B,SAAKuY,GAAUA,EAAMW,SAAYX,EAAMY,MAAMtlB,OAIjD,CACH,IAAAsmB,CAAKna,GACE,MAAMuY,EAAQxY,KAAKoY,QAAQ/Y,IAAIY,GAC/B,IAAKuY,IAAUA,EAAMY,MAAMtlB,OACvB,OAEJ,MAAMslB,EAAQZ,EAAMY,MACpB,IAAIzlB,EAAIylB,EAAMtlB,OAAS,EACvB,KAAMH,GAAK,IAAKA,EACZylB,EAAMzlB,GAAG0mB,SAEb7B,EAAMY,MAAQ,GACdpZ,KAAKuY,QAAQtY,EAAOuY,EAAOQ,KAAKC,MAAO,WAC3C,CACH,MAAAqB,CAAOra,GACA,OAAOD,KAAKoY,QAAQ/F,OAAOpS,EAC/B,EAEJ,IAAIsa,GAA2B,IAAIrC,GAEnC,MAAMsC,GAAc,cACdC,GAAgB,CAClBC,QAAQ,CAACtV,EAAME,EAAIqV,IACRA,EAAS,GAAMrV,EAAKF,EAElC,KAAA/G,CAAO+G,EAAME,EAAIqV,GACV,MAAMC,EAAKvc,GAAM+G,GAAQoV,IACnBK,EAAKD,EAAGE,OAASzc,GAAMiH,GAAMkV,IACnC,OAAOK,GAAMA,EAAGC,MAAQD,EAAGE,IAAIH,EAAID,GAAQlc,YAAc6G,CAC7D,EACA0V,OAAO,CAAC5V,EAAME,EAAIqV,IACPvV,GAAQE,EAAKF,GAAQuV,GAGpC,MAAMM,GACF,WAAA1Z,CAAY2Z,EAAKxmB,EAAQ6Z,EAAMjJ,GAC3B,MAAM6V,EAAezmB,EAAO6Z,GAC5BjJ,EAAK2J,GAAQ,CACTiM,EAAI5V,GACJA,EACA6V,EACAD,EAAI9V,OAER,MAAMA,EAAO6J,GAAQ,CACjBiM,EAAI9V,KACJ+V,EACA7V,IAEJtF,KAAKsZ,SAAU,EACftZ,KAAKob,IAAMF,EAAI9nB,IAAMqnB,GAAcS,EAAI5oB,aAAe8S,GACtDpF,KAAKqb,QAAUrf,GAAQkf,EAAI/V,SAAWnJ,GAAQC,OAC9C+D,KAAKsb,OAAS7jB,KAAKmB,MAAMogB,KAAKC,OAASiC,EAAIjW,OAAS,IACpDjF,KAAKma,UAAYna,KAAKuZ,OAAS9hB,KAAKmB,MAAMsiB,EAAIhW,UAC9ClF,KAAKub,QAAUL,EAAI7V,KACnBrF,KAAKwb,QAAU9mB,EACfsL,KAAKyb,MAAQlN,EACbvO,KAAK0b,MAAQtW,EACbpF,KAAK2b,IAAMrW,EACXtF,KAAK4b,eAAYja,CACrB,CACA,MAAA6D,GACI,OAAOxF,KAAKsZ,OAChB,CACA,MAAAuC,CAAOX,EAAK5V,EAAImT,GACZ,GAAIzY,KAAKsZ,QAAS,CACdtZ,KAAKuY,SAAQ,GACb,MAAM4C,EAAenb,KAAKwb,QAAQxb,KAAKyb,OACjCK,EAAUrD,EAAOzY,KAAKsb,OACtB1a,EAASZ,KAAKma,UAAY2B,EAChC9b,KAAKsb,OAAS7C,EACdzY,KAAKma,UAAY1iB,KAAKmB,MAAMnB,KAAKiC,IAAIkH,EAAQsa,EAAIhW,WACjDlF,KAAKuZ,QAAUuC,EACf9b,KAAKub,QAAUL,EAAI7V,KACnBrF,KAAK2b,IAAM1M,GAAQ,CACfiM,EAAI5V,GACJA,EACA6V,EACAD,EAAI9V,OAERpF,KAAK0b,MAAQzM,GAAQ,CACjBiM,EAAI9V,KACJ+V,EACA7V,GAER,CACJ,CACA,MAAA+U,GACQra,KAAKsZ,UACLtZ,KAAKwZ,KAAKR,KAAKC,OACfjZ,KAAKsZ,SAAU,EACftZ,KAAKuY,SAAQ,GAErB,CACA,IAAAiB,CAAKf,GACD,MAAMqD,EAAUrD,EAAOzY,KAAKsb,OACtBpW,EAAWlF,KAAKma,UAChB5L,EAAOvO,KAAKyb,MACZrW,EAAOpF,KAAK0b,MACZrW,EAAOrF,KAAKub,MACZjW,EAAKtF,KAAK2b,IAChB,IAAIhB,EAEJ,GADA3a,KAAKsZ,QAAUlU,IAASE,IAAOD,GAAQyW,EAAU5W,IAC5ClF,KAAKsZ,QAGN,OAFAtZ,KAAKwb,QAAQjN,GAAQjJ,OACrBtF,KAAKuY,SAAQ,GAGbuD,EAAU,EACV9b,KAAKwb,QAAQjN,GAAQnJ,GAGzBuV,EAASmB,EAAU5W,EAAW,EAC9ByV,EAAStV,GAAQsV,EAAS,EAAI,EAAIA,EAASA,EAC3CA,EAAS3a,KAAKqb,QAAQ5jB,KAAKgC,IAAI,EAAGhC,KAAKiC,IAAI,EAAGihB,KAC9C3a,KAAKwb,QAAQjN,GAAQvO,KAAKob,IAAIhW,EAAME,EAAIqV,GAC5C,CACA,IAAAoB,GACI,MAAMC,EAAWhc,KAAK4b,YAAc5b,KAAK4b,UAAY,IACrD,OAAO,IAAIK,SAAQ,CAACC,EAAKC,KACrBH,EAASvlB,KAAK,CACVylB,MACAC,OACF,GAEV,CACA,OAAA5D,CAAQ6D,GACJ,MAAMC,EAASD,EAAW,MAAQ,MAC5BJ,EAAWhc,KAAK4b,WAAa,GACnC,IAAI,IAAIjoB,EAAI,EAAGA,EAAIqoB,EAASloB,OAAQH,IAChCqoB,EAASroB,GAAG0oB,IAEpB,EAGJ,MAAMC,GACF,WAAA/a,CAAYtB,EAAOsc,GACfvc,KAAKwc,OAASvc,EACdD,KAAKyc,YAAc,IAAI5d,IACvBmB,KAAK0c,UAAUH,EACnB,CACA,SAAAG,CAAUH,GACN,IAAK3pB,EAAS2pB,GACV,OAEJ,MAAMI,EAAmBpqB,OAAOsB,KAAK+Q,GAASlD,WACxCkb,EAAgB5c,KAAKyc,YAC3BlqB,OAAOsqB,oBAAoBN,GAAQvhB,SAASjG,IACxC,MAAMmmB,EAAMqB,EAAOxnB,GACnB,IAAKnC,EAASsoB,GACV,OAEJ,MAAMkB,EAAW,CAAC,EAClB,IAAK,MAAMU,KAAUH,EACjBP,EAASU,GAAU5B,EAAI4B,IAE1B1qB,EAAQ8oB,EAAI3V,aAAe2V,EAAI3V,YAAc,CAC1CxQ,IACDiG,SAASuT,IACJA,IAASxZ,GAAQ6nB,EAAcrlB,IAAIgX,IACnCqO,EAAcpd,IAAI+O,EAAM6N,EAC5B,GACF,GAEV,CACH,eAAAW,CAAgBroB,EAAQkL,GACjB,MAAMod,EAAapd,EAAO1K,QACpBA,EAwEd,SAA8BR,EAAQsoB,GAClC,IAAKA,EACD,OAEJ,IAAI9nB,EAAUR,EAAOQ,QACrB,GAAKA,EAUL,OANIA,EAAQ+nB,UACRvoB,EAAOQ,QAAUA,EAAU3C,OAAOmO,OAAO,CAAC,EAAGxL,EAAS,CAClD+nB,SAAS,EACTC,YAAa,CAAC,KAGfhoB,EATHR,EAAOQ,QAAU8nB,CAUzB,CAxFwBG,CAAqBzoB,EAAQsoB,GAC7C,IAAK9nB,EACD,MAAO,GAEX,MAAMyQ,EAAa3F,KAAKod,kBAAkBloB,EAAS8nB,GAOnD,OANIA,EAAWC,SAwDvB,SAAkBtX,EAAYJ,GAC1B,MAAM4T,EAAU,GACVtlB,EAAOtB,OAAOsB,KAAK0R,GACzB,IAAI,IAAI5R,EAAI,EAAGA,EAAIE,EAAKC,OAAQH,IAAI,CAChC,MAAM0pB,EAAO1X,EAAW9R,EAAKF,IACzB0pB,GAAQA,EAAK7X,UACb2T,EAAQ1iB,KAAK4mB,EAAKtB,OAE1B,CACA,OAAOE,QAAQqB,IAAInE,EACvB,CAjEYoE,CAAS7oB,EAAOQ,QAAQgoB,YAAaF,GAAYQ,MAAK,KAClD9oB,EAAOQ,QAAU8nB,CAAU,IAC5B,SAGArX,CACX,CACH,iBAAAyX,CAAkB1oB,EAAQkL,GACnB,MAAMgd,EAAgB5c,KAAKyc,YACrB9W,EAAa,GACbwT,EAAUzkB,EAAOwoB,cAAgBxoB,EAAOwoB,YAAc,CAAC,GACvD/O,EAAQ5b,OAAOsB,KAAK+L,GACpB6Y,EAAOO,KAAKC,MAClB,IAAItlB,EACJ,IAAIA,EAAIwa,EAAMra,OAAS,EAAGH,GAAK,IAAKA,EAAE,CAClC,MAAM4a,EAAOJ,EAAMxa,GACnB,GAAuB,MAAnB4a,EAAKzX,OAAO,GACZ,SAEJ,GAAa,YAATyX,EAAoB,CACpB5I,EAAWlP,QAAQuJ,KAAK+c,gBAAgBroB,EAAQkL,IAChD,QACJ,CACA,MAAMzN,EAAQyN,EAAO2O,GACrB,IAAI7M,EAAYyX,EAAQ5K,GACxB,MAAM2M,EAAM0B,EAAcvd,IAAIkP,GAC9B,GAAI7M,EAAW,CACX,GAAIwZ,GAAOxZ,EAAU8D,SAAU,CAC3B9D,EAAUma,OAAOX,EAAK/oB,EAAOsmB,GAC7B,QACJ,CACI/W,EAAU2Y,QAElB,CACKa,GAAQA,EAAIhW,UAIjBiU,EAAQ5K,GAAQ7M,EAAY,IAAIuZ,GAAUC,EAAKxmB,EAAQ6Z,EAAMpc,GAC7DwT,EAAWlP,KAAKiL,IAJZhN,EAAO6Z,GAAQpc,CAKvB,CACA,OAAOwT,CACX,CACH,MAAAkW,CAAOnnB,EAAQkL,GACR,GAA8B,IAA1BI,KAAKyc,YAAYplB,KAEjB,YADA9E,OAAOmO,OAAOhM,EAAQkL,GAG1B,MAAM+F,EAAa3F,KAAKod,kBAAkB1oB,EAAQkL,GAClD,OAAI+F,EAAW7R,QACXymB,GAASnI,IAAIpS,KAAKwc,OAAQ7W,IACnB,QAFX,CAIJ,EA+BJ,SAAS8X,GAAU/Z,EAAOga,GACtB,MAAM/R,EAAOjI,GAASA,EAAMxO,SAAW,CAAC,EAClCxB,EAAUiY,EAAKjY,QACf+F,OAAmBkI,IAAbgK,EAAKlS,IAAoBikB,EAAkB,EACjDhkB,OAAmBiI,IAAbgK,EAAKjS,IAAoBgkB,EAAkB,EACvD,MAAO,CACH9jB,MAAOlG,EAAUgG,EAAMD,EACvBI,IAAKnG,EAAU+F,EAAMC,EAE7B,CAgCA,SAASikB,GAAwB1d,EAAO2d,GACpC,MAAM/pB,EAAO,GACPgqB,EAAW5d,EAAM6d,uBAAuBF,GAC9C,IAAIjqB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAO2pB,EAAS/pB,OAAQH,EAAIO,IAAQP,EAC3CE,EAAK4C,KAAKonB,EAASlqB,GAAGW,OAE1B,OAAOT,CACX,CACA,SAASkqB,GAAWC,EAAO7rB,EAAO8rB,EAAS/oB,EAAU,CAAC,GAClD,MAAMrB,EAAOmqB,EAAMnqB,KACbqqB,EAA8B,WAAjBhpB,EAAQ+N,KAC3B,IAAItP,EAAGO,EAAMG,EAAc8pB,EAC3B,GAAc,OAAVhsB,EAAJ,CAGA,IAAIwB,EAAI,EAAGO,EAAOL,EAAKC,OAAQH,EAAIO,IAAQP,EAAE,CAEzC,GADAU,GAAgBR,EAAKF,GACjBU,IAAiB4pB,EAAS,CAC1B,GAAI/oB,EAAQooB,IACR,SAEJ,KACJ,CACAa,EAAaH,EAAMpe,OAAOvL,GACtBxB,EAAesrB,KAAgBD,GAAwB,IAAV/rB,GAAe+F,EAAK/F,KAAW+F,EAAKimB,MACjFhsB,GAASgsB,EAEjB,CACA,OAAOhsB,CAdP,CAeJ,CAiBA,SAASisB,GAAU1a,EAAO2a,GACtB,MAAMC,EAAU5a,GAASA,EAAMxO,QAAQopB,QACvC,OAAOA,QAAuB3c,IAAZ2c,QAAwC3c,IAAf0c,EAAKL,KACpD,CAWA,SAASO,GAAiBC,EAAQC,EAAUC,GACxC,MAAMC,EAAWH,EAAOC,KAAcD,EAAOC,GAAY,CAAC,GAC1D,OAAOE,EAASD,KAAgBC,EAASD,GAAc,CAAC,EAC5D,CACA,SAASE,GAAoBZ,EAAOa,EAAQC,EAAUxsB,GAClD,IAAK,MAAM+rB,KAAQQ,EAAOE,wBAAwBzsB,GAAMoB,UAAU,CAC9D,MAAMvB,EAAQ6rB,EAAMK,EAAK/pB,OACzB,GAAIwqB,GAAY3sB,EAAQ,IAAM2sB,GAAY3sB,EAAQ,EAC9C,OAAOksB,EAAK/pB,KAEpB,CACA,OAAO,IACX,CACA,SAAS0qB,GAAaC,EAAYC,GAC9B,MAAM,MAAEjf,EAAQkf,YAAad,GAAUY,EACjCT,EAASve,EAAMmf,UAAYnf,EAAMmf,QAAU,CAAC,IAC5C,OAAEC,EAAO,OAAER,EAASvqB,MAAOD,GAAkBgqB,EAC7CiB,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,KACfxqB,EA7BV,SAAqB0qB,EAAYC,EAAYrB,GACzC,MAAO,GAAGoB,EAAWxtB,MAAMytB,EAAWztB,MAAMosB,EAAKL,OAASK,EAAK/rB,MACnE,CA2BgBqtB,CAAYN,EAAQR,EAAQR,GAClCnqB,EAAOgrB,EAAOprB,OACpB,IAAIkqB,EACJ,IAAI,IAAIrqB,EAAI,EAAGA,EAAIO,IAAQP,EAAE,CACzB,MAAM2D,EAAO4nB,EAAOvrB,IACZ,CAAC2rB,GAAQhrB,EAAQ,CAACkrB,GAAQrtB,GAAWmF,EAE7C0mB,GADmB1mB,EAAK8nB,UAAY9nB,EAAK8nB,QAAU,CAAC,IACjCI,GAASjB,GAAiBC,EAAQzpB,EAAKT,GAC1D0pB,EAAM3pB,GAAgBlC,EACtB6rB,EAAM4B,KAAOhB,GAAoBZ,EAAOa,GAAQ,EAAMR,EAAK/rB,MAC3D0rB,EAAM6B,QAAUjB,GAAoBZ,EAAOa,GAAQ,EAAOR,EAAK/rB,OAC1C0rB,EAAM8B,gBAAkB9B,EAAM8B,cAAgB,CAAC,IACvDzrB,GAAgBlC,CACjC,CACJ,CACA,SAAS4tB,GAAgB9f,EAAOsf,GAC5B,MAAM5b,EAAS1D,EAAM0D,OACrB,OAAOpR,OAAOsB,KAAK8P,GAAQ8O,QAAQ1d,GAAM4O,EAAO5O,GAAKwqB,OAASA,IAAMS,OACxE,CAuBA,SAASC,GAAY5B,EAAMjF,GACvB,MAAM/kB,EAAegqB,EAAKY,WAAW3qB,MAC/BirB,EAAOlB,EAAKQ,QAAUR,EAAKQ,OAAOU,KACxC,GAAKA,EAAL,CAGAnG,EAAQA,GAASiF,EAAK6B,QACtB,IAAK,MAAMhB,KAAU9F,EAAM,CACvB,MAAMoF,EAASU,EAAOE,QACtB,IAAKZ,QAA2B7c,IAAjB6c,EAAOe,SAAsD5d,IAA/B6c,EAAOe,GAAMlrB,GACtD,cAEGmqB,EAAOe,GAAMlrB,QACesN,IAA/B6c,EAAOe,GAAMO,oBAA4Ene,IAA7C6c,EAAOe,GAAMO,cAAczrB,WAChEmqB,EAAOe,GAAMO,cAAczrB,EAE1C,CAXA,CAYJ,CACA,MAAM8rB,GAAsBld,GAAgB,UAATA,GAA6B,SAATA,EACjDmd,GAAmB,CAACC,EAAQC,IAASA,EAASD,EAAS9tB,OAAOmO,OAAO,CAAC,EAAG2f,GAK/E,MAAME,GACLC,gBAAkB,CAAC,EACnBA,0BAA4B,KAC5BA,uBAAyB,KACzB,WAAAjf,CAAYtB,EAAO5L,GACZ2L,KAAKC,MAAQA,EACbD,KAAKgH,KAAO/G,EAAM2C,IAClB5C,KAAK1L,MAAQD,EACb2L,KAAKygB,gBAAkB,CAAC,EACxBzgB,KAAKmf,YAAcnf,KAAK0gB,UACxB1gB,KAAK2gB,MAAQ3gB,KAAKmf,YAAY7sB,KAC9B0N,KAAK9K,aAAUyM,EACd3B,KAAK4gB,UAAW,EACjB5gB,KAAK6gB,WAAQlf,EACb3B,KAAK8gB,iBAAcnf,EACnB3B,KAAK+gB,oBAAiBpf,EACtB3B,KAAKghB,gBAAarf,EAClB3B,KAAKihB,gBAAatf,EAClB3B,KAAKkhB,qBAAsB,EAC3BlhB,KAAKmhB,oBAAqB,EAC1BnhB,KAAKohB,cAAWzf,EAChB3B,KAAKqhB,UAAY,GACjBrhB,KAAKshB,8BAAgCA,mBACrCthB,KAAKuhB,2BAA6BA,gBAClCvhB,KAAKwhB,YACT,CACA,UAAAA,GACI,MAAMnD,EAAOre,KAAKmf,YAClBnf,KAAK0c,YACL1c,KAAKyhB,aACLpD,EAAKqD,SAAWtD,GAAUC,EAAKQ,OAAQR,GACvCre,KAAK2hB,cACD3hB,KAAK9K,QAAQ8V,OAAShL,KAAKC,MAAM2hB,gBAAgB,WACjD9S,QAAQC,KAAK,qKAErB,CACA,WAAA8S,CAAYxtB,GACJ2L,KAAK1L,QAAUD,GACf4rB,GAAYjgB,KAAKmf,aAErBnf,KAAK1L,MAAQD,CACjB,CACA,UAAAotB,GACI,MAAMxhB,EAAQD,KAAKC,MACboe,EAAOre,KAAKmf,YACZ2C,EAAU9hB,KAAK+hB,aACfC,EAAW,CAACzC,EAAMzpB,EAAGE,EAAGisB,IAAa,MAAT1C,EAAezpB,EAAa,MAATypB,EAAe0C,EAAIjsB,EAClEksB,EAAM7D,EAAK8D,QAAUjvB,EAAe4uB,EAAQK,QAASpC,GAAgB9f,EAAO,MAC5EmiB,EAAM/D,EAAKgE,QAAUnvB,EAAe4uB,EAAQO,QAAStC,GAAgB9f,EAAO,MAC5EqiB,EAAMjE,EAAKkE,QAAUrvB,EAAe4uB,EAAQS,QAASxC,GAAgB9f,EAAO,MAC5E8C,EAAYsb,EAAKtb,UACjByf,EAAMnE,EAAKoE,QAAUT,EAASjf,EAAWmf,EAAKE,EAAKE,GACnDI,EAAMrE,EAAKsE,QAAUX,EAASjf,EAAWqf,EAAKF,EAAKI,GACzDjE,EAAKuE,OAAS5iB,KAAK6iB,cAAcX,GACjC7D,EAAKyE,OAAS9iB,KAAK6iB,cAAcT,GACjC/D,EAAK0E,OAAS/iB,KAAK6iB,cAAcP,GACjCjE,EAAKgB,OAASrf,KAAK6iB,cAAcL,GACjCnE,EAAKQ,OAAS7e,KAAK6iB,cAAcH,EACrC,CACA,UAAAX,GACI,OAAO/hB,KAAKC,MAAMsI,KAAKzG,SAAS9B,KAAK1L,MACzC,CACA,OAAAosB,GACI,OAAO1gB,KAAKC,MAAM+iB,eAAehjB,KAAK1L,MAC1C,CACH,aAAAuuB,CAAcI,GACP,OAAOjjB,KAAKC,MAAM0D,OAAOsf,EAC7B,CACH,cAAAC,CAAexf,GACR,MAAM2a,EAAOre,KAAKmf,YAClB,OAAOzb,IAAU2a,EAAKgB,OAAShB,EAAKQ,OAASR,EAAKgB,MACtD,CACA,KAAA8D,GACInjB,KAAK+Y,QAAQ,QACjB,CACH,QAAAqK,GACO,MAAM/E,EAAOre,KAAKmf,YACdnf,KAAK6gB,OACLpmB,EAAoBuF,KAAK6gB,MAAO7gB,MAEhCqe,EAAKqD,UACLzB,GAAY5B,EAEpB,CACH,UAAAgF,GACO,MAAMvB,EAAU9hB,KAAK+hB,aACfxZ,EAAOuZ,EAAQvZ,OAASuZ,EAAQvZ,KAAO,IACvCsY,EAAQ7gB,KAAK6gB,MACnB,GAAIjuB,EAAS2V,GAAO,CAChB,MAAM8V,EAAOre,KAAKmf,YAClBnf,KAAK6gB,MA5MjB,SAAkCtY,EAAM8V,GACpC,MAAM,OAAEgB,EAAO,OAAER,GAAYR,EACvBiF,EAA2B,MAAhBjE,EAAOE,KAAe,IAAM,IACvCgE,EAA2B,MAAhB1E,EAAOU,KAAe,IAAM,IACvC1rB,EAAOtB,OAAOsB,KAAK0U,GACnBib,EAAQ,IAAInxB,MAAMwB,EAAKC,QAC7B,IAAIH,EAAGO,EAAMa,EACb,IAAIpB,EAAI,EAAGO,EAAOL,EAAKC,OAAQH,EAAIO,IAAQP,EACvCoB,EAAMlB,EAAKF,GACX6vB,EAAM7vB,GAAK,CACP,CAAC2vB,GAAWvuB,EACZ,CAACwuB,GAAWhb,EAAKxT,IAGzB,OAAOyuB,CACX,CA6LyBC,CAAyBlb,EAAM8V,EAChD,MAAO,GAAIwC,IAAUtY,EAAM,CACvB,GAAIsY,EAAO,CACPpmB,EAAoBomB,EAAO7gB,MAC3B,MAAMqe,EAAOre,KAAKmf,YAClBc,GAAY5B,GACZA,EAAK6B,QAAU,EACnB,CACI3X,GAAQhW,OAAOmxB,aAAanb,MD1KjB7N,EC2KO6N,GD1KpB1N,SACNH,EAAMG,SAASC,UAAUrE,KCyKOuJ,ODtKpCzN,OAAOoxB,eAAejpB,EAAO,WAAY,CACrCmY,cAAc,EACdpO,YAAY,EACZtS,MAAO,CACH2I,UAAW,CCkKiBkF,SD7JpCxF,EAAYQ,SAASjG,IACjB,MAAMsnB,EAAS,UAAYzlB,EAAY7B,GACjC6uB,EAAOlpB,EAAM3F,GACnBxC,OAAOoxB,eAAejpB,EAAO3F,EAAK,CAC9B8d,cAAc,EACdpO,YAAY,EACZ,KAAAtS,IAAUkB,GACN,MAAM6oB,EAAM0H,EAAKrwB,MAAMyM,KAAM3M,GAM7B,OALAqH,EAAMG,SAASC,UAAUE,SAAS6oB,IACA,mBAAnBA,EAAOxH,IACdwH,EAAOxH,MAAWhpB,EACtB,IAEG6oB,CACX,GACF,MCgJElc,KAAKqhB,UAAY,GACjBrhB,KAAK6gB,MAAQtY,CACjB,CD/KR,IAA2B7N,CCgLvB,CACA,WAAAinB,GACI,MAAMtD,EAAOre,KAAKmf,YAClBnf,KAAKqjB,aACDrjB,KAAKshB,qBACLjD,EAAKyD,QAAU,IAAI9hB,KAAKshB,mBAEhC,CACA,qBAAAwC,CAAsBC,GAClB,MAAM1F,EAAOre,KAAKmf,YACZ2C,EAAU9hB,KAAK+hB,aACrB,IAAIiC,GAAe,EACnBhkB,KAAKqjB,aACL,MAAMY,EAAa5F,EAAKqD,SACxBrD,EAAKqD,SAAWtD,GAAUC,EAAKQ,OAAQR,GACnCA,EAAKL,QAAU8D,EAAQ9D,QACvBgG,GAAe,EACf/D,GAAY5B,GACZA,EAAKL,MAAQ8D,EAAQ9D,OAEzBhe,KAAKkkB,gBAAgBH,IACjBC,GAAgBC,IAAe5F,EAAKqD,WACpC1C,GAAahf,KAAMqe,EAAK6B,QAEhC,CACH,SAAAxD,GACO,MAAMH,EAASvc,KAAKC,MAAMsc,OACpB4H,EAAY5H,EAAO6H,iBAAiBpkB,KAAK2gB,OACzCnR,EAAS+M,EAAO8H,gBAAgBrkB,KAAK+hB,aAAcoC,GAAW,GACpEnkB,KAAK9K,QAAUqnB,EAAO+H,eAAe9U,EAAQxP,KAAKmJ,cAClDnJ,KAAK4gB,SAAW5gB,KAAK9K,QAAQqO,QAC7BvD,KAAKygB,gBAAkB,CAAC,CAC5B,CACH,KAAA8D,CAAM3qB,EAAO4qB,GACN,MAAQrF,YAAad,EAAOwC,MAAOtY,GAAUvI,MACvC,OAAEqf,EAAO,SAAEqC,GAAcrD,EACzBiB,EAAQD,EAAOE,KACrB,IAEI5rB,EAAGumB,EAAKgF,EAFRuF,EAAmB,IAAV7qB,GAAe4qB,IAAUjc,EAAKzU,QAAgBuqB,EAAKqG,QAC5DC,EAAO/qB,EAAQ,GAAKykB,EAAK6B,QAAQtmB,EAAQ,GAE7C,IAAsB,IAAlBoG,KAAK4gB,SACLvC,EAAK6B,QAAU3X,EACf8V,EAAKqG,SAAU,EACfxF,EAAS3W,MACN,CAEC2W,EADA9sB,EAAQmW,EAAK3O,IACJoG,KAAK4kB,eAAevG,EAAM9V,EAAM3O,EAAO4qB,GACzC5xB,EAAS2V,EAAK3O,IACZoG,KAAK6kB,gBAAgBxG,EAAM9V,EAAM3O,EAAO4qB,GAExCxkB,KAAK8kB,mBAAmBzG,EAAM9V,EAAM3O,EAAO4qB,GAExD,MAAMO,EAA6B,IAAmB,OAAf7K,EAAIoF,IAAmBqF,GAAQzK,EAAIoF,GAASqF,EAAKrF,GACxF,IAAI3rB,EAAI,EAAGA,EAAI6wB,IAAS7wB,EACpB0qB,EAAK6B,QAAQvsB,EAAIiG,GAASsgB,EAAMgF,EAAOvrB,GACnC8wB,IACIM,MACAN,GAAS,GAEbE,EAAOzK,GAGfmE,EAAKqG,QAAUD,CACnB,CACI/C,GACA1C,GAAahf,KAAMkf,EAE3B,CACH,kBAAA4F,CAAmBzG,EAAM9V,EAAM3O,EAAO4qB,GAC/B,MAAM,OAAEnF,EAAO,OAAER,GAAYR,EACvBiB,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,KACfyF,EAAS3F,EAAO4F,YAChBC,EAAc7F,IAAWR,EACzBK,EAAS,IAAI7sB,MAAMmyB,GACzB,IAAI7wB,EAAGO,EAAMI,EACb,IAAIX,EAAI,EAAGO,EAAOswB,EAAO7wB,EAAIO,IAAQP,EACjCW,EAAQX,EAAIiG,EACZslB,EAAOvrB,GAAK,CACR,CAAC2rB,GAAQ4F,GAAe7F,EAAOkF,MAAMS,EAAO1wB,GAAQA,GACpD,CAACkrB,GAAQX,EAAO0F,MAAMhc,EAAKjU,GAAQA,IAG3C,OAAO4qB,CACX,CACH,cAAA0F,CAAevG,EAAM9V,EAAM3O,EAAO4qB,GAC3B,MAAM,OAAE5B,EAAO,OAAEE,GAAYzE,EACvBa,EAAS,IAAI7sB,MAAMmyB,GACzB,IAAI7wB,EAAGO,EAAMI,EAAOgD,EACpB,IAAI3D,EAAI,EAAGO,EAAOswB,EAAO7wB,EAAIO,IAAQP,EACjCW,EAAQX,EAAIiG,EACZtC,EAAOiR,EAAKjU,GACZ4qB,EAAOvrB,GAAK,CACRmC,EAAG8sB,EAAO2B,MAAMjtB,EAAK,GAAIhD,GACzB0B,EAAG8sB,EAAOyB,MAAMjtB,EAAK,GAAIhD,IAGjC,OAAO4qB,CACX,CACH,eAAA2F,CAAgBxG,EAAM9V,EAAM3O,EAAO4qB,GAC5B,MAAM,OAAE5B,EAAO,OAAEE,GAAYzE,GACvB,SAAE8G,EAAU,IAAI,SAAEC,EAAU,KAASplB,KAAK4gB,SAC1C1B,EAAS,IAAI7sB,MAAMmyB,GACzB,IAAI7wB,EAAGO,EAAMI,EAAOgD,EACpB,IAAI3D,EAAI,EAAGO,EAAOswB,EAAO7wB,EAAIO,IAAQP,EACjCW,EAAQX,EAAIiG,EACZtC,EAAOiR,EAAKjU,GACZ4qB,EAAOvrB,GAAK,CACRmC,EAAG8sB,EAAO2B,MAAMtuB,EAAiBqB,EAAM6tB,GAAW7wB,GAClD0B,EAAG8sB,EAAOyB,MAAMtuB,EAAiBqB,EAAM8tB,GAAW9wB,IAG1D,OAAO4qB,CACX,CACH,SAAAmG,CAAU/wB,GACH,OAAO0L,KAAKmf,YAAYe,QAAQ5rB,EACpC,CACH,cAAAgxB,CAAehxB,GACR,OAAO0L,KAAKmf,YAAY5W,KAAKjU,EACjC,CACH,UAAAypB,CAAWra,EAAOwb,EAAQjc,GACnB,MAAMhD,EAAQD,KAAKC,MACboe,EAAOre,KAAKmf,YACZhtB,EAAQ+sB,EAAOxb,EAAM6b,MAK3B,OAAOxB,GAJO,CACVlqB,KAAM8pB,GAAwB1d,GAAO,GACrCL,OAAQsf,EAAOE,QAAQ1b,EAAM6b,MAAMO,eAEd3tB,EAAOksB,EAAK/pB,MAAO,CACxC2O,QAER,CACH,qBAAAsiB,CAAsBhtB,EAAOmL,EAAOwb,EAAQlB,GACrC,MAAMwH,EAActG,EAAOxb,EAAM6b,MACjC,IAAIptB,EAAwB,OAAhBqzB,EAAuBC,IAAMD,EACzC,MAAM5lB,EAASoe,GAASkB,EAAOE,QAAQ1b,EAAM6b,MACzCvB,GAASpe,IACToe,EAAMpe,OAASA,EACfzN,EAAQ4rB,GAAWC,EAAOwH,EAAaxlB,KAAKmf,YAAY7qB,QAE5DiE,EAAMkB,IAAMhC,KAAKgC,IAAIlB,EAAMkB,IAAKtH,GAChCoG,EAAMmB,IAAMjC,KAAKiC,IAAInB,EAAMmB,IAAKvH,EACpC,CACH,SAAAuzB,CAAUhiB,EAAOiiB,GACV,MAAMtH,EAAOre,KAAKmf,YACZe,EAAU7B,EAAK6B,QACfuE,EAASpG,EAAKqG,SAAWhhB,IAAU2a,EAAKgB,OACxCnrB,EAAOgsB,EAAQpsB,OACf8xB,EAAa5lB,KAAKkjB,eAAexf,GACjCsa,EAjQM,EAAC2H,EAAUtH,EAAMpe,IAAQ0lB,IAAatH,EAAKwH,QAAUxH,EAAKqD,UAAY,CAClF7tB,KAAM8pB,GAAwB1d,GAAO,GACrCL,OAAQ,MA+PMkmB,CAAYH,EAAUtH,EAAMre,KAAKC,OACzC1H,EAAQ,CACVkB,IAAK3G,OAAO8E,kBACZ8B,IAAK5G,OAAOizB,oBAERtsB,IAAKusB,EAAWtsB,IAAKusB,GA7VrC,SAAuBviB,GACnB,MAAM,IAAEjK,EAAI,IAAEC,EAAI,WAAEwsB,EAAW,WAAEC,GAAgBziB,EAAM0iB,gBACvD,MAAO,CACH3sB,IAAKysB,EAAazsB,EAAM3G,OAAOizB,kBAC/BrsB,IAAKysB,EAAazsB,EAAM5G,OAAO8E,kBAEvC,CAuVmDwuB,CAAcR,GACzD,IAAIjyB,EAAGurB,EACP,SAASmH,IACLnH,EAASgB,EAAQvsB,GACjB,MAAMwqB,EAAae,EAAO0G,EAAWrG,MACrC,OAAQ1sB,EAAeqsB,EAAOxb,EAAM6b,QAAUyG,EAAW7H,GAAc8H,EAAW9H,CACtF,CACA,IAAIxqB,EAAI,EAAGA,EAAIO,IACPmyB,MAGJrmB,KAAKulB,sBAAsBhtB,EAAOmL,EAAOwb,EAAQlB,IAC7CyG,MALe9wB,GASvB,GAAI8wB,EACA,IAAI9wB,EAAIO,EAAO,EAAGP,GAAK,IAAKA,EACxB,IAAI0yB,IAAJ,CAGArmB,KAAKulB,sBAAsBhtB,EAAOmL,EAAOwb,EAAQlB,GACjD,KAFA,CAKR,OAAOzlB,CACX,CACA,kBAAA+tB,CAAmB5iB,GACf,MAAMwb,EAASlf,KAAKmf,YAAYe,QAC1BtgB,EAAS,GACf,IAAIjM,EAAGO,EAAM/B,EACb,IAAIwB,EAAI,EAAGO,EAAOgrB,EAAOprB,OAAQH,EAAIO,IAAQP,EACzCxB,EAAQ+sB,EAAOvrB,GAAG+P,EAAM6b,MACpB1sB,EAAeV,IACfyN,EAAOnJ,KAAKtE,GAGpB,OAAOyN,CACX,CACH,cAAA2mB,GACO,OAAO,CACX,CACH,gBAAAC,CAAiBlyB,GACV,MAAM+pB,EAAOre,KAAKmf,YACZE,EAAShB,EAAKgB,OACdR,EAASR,EAAKQ,OACdK,EAASlf,KAAKqlB,UAAU/wB,GAC9B,MAAO,CACHmyB,MAAOpH,EAAS,GAAKA,EAAOqH,iBAAiBxH,EAAOG,EAAOE,OAAS,GACpEptB,MAAO0sB,EAAS,GAAKA,EAAO6H,iBAAiBxH,EAAOL,EAAOU,OAAS,GAE5E,CACH,OAAAxG,CAAQ9V,GACD,MAAMob,EAAOre,KAAKmf,YAClBnf,KAAK6b,OAAO5Y,GAAQ,WACpBob,EAAKsI,MA5db,SAAgBx0B,GACZ,IAAIwJ,EAAGsmB,EAAG7qB,EAAGwvB,EASb,OARIh0B,EAAST,IACTwJ,EAAIxJ,EAAM6T,IACVic,EAAI9vB,EAAM8T,MACV7O,EAAIjF,EAAM+T,OACV0gB,EAAIz0B,EAAMgU,MAEVxK,EAAIsmB,EAAI7qB,EAAIwvB,EAAIz0B,EAEb,CACH6T,IAAKrK,EACLsK,MAAOgc,EACP/b,OAAQ9O,EACR+O,KAAMygB,EACNC,UAAoB,IAAV10B,EAElB,CA2cqB20B,CAAO5zB,EAAe8M,KAAK9K,QAAQsR,KAzexD,SAAqBoc,EAAQE,EAAQpF,GACjC,IAAwB,IAApBA,EACA,OAAO,EAEX,MAAM5nB,EAAI2nB,GAAUmF,EAAQlF,GACtB1nB,EAAIynB,GAAUqF,EAAQpF,GAC5B,MAAO,CACH1X,IAAKhQ,EAAE6D,IACPoM,MAAOnQ,EAAE+D,IACTqM,OAAQlQ,EAAE4D,MACVuM,KAAMrQ,EAAE8D,MAEhB,CA6d8DmtB,CAAY1I,EAAKuE,OAAQvE,EAAKyE,OAAQ9iB,KAAKumB,mBACrG,CACH,MAAA1K,CAAO5Y,GAAO,CACX,IAAAoW,GACI,MAAMzW,EAAM5C,KAAKgH,KACX/G,EAAQD,KAAKC,MACboe,EAAOre,KAAKmf,YACZhd,EAAWkc,EAAK9V,MAAQ,GACxB8C,EAAOpL,EAAM+mB,UACbxhB,EAAS,GACT5L,EAAQoG,KAAKghB,YAAc,EAC3BwD,EAAQxkB,KAAKihB,YAAc9e,EAASrO,OAAS8F,EAC7CiK,EAA0B7D,KAAK9K,QAAQ2O,wBAC7C,IAAIlQ,EAIJ,IAHI0qB,EAAKyD,SACLzD,EAAKyD,QAAQzI,KAAKzW,EAAKyI,EAAMzR,EAAO4qB,GAEpC7wB,EAAIiG,EAAOjG,EAAIiG,EAAQ4qB,IAAS7wB,EAAE,CAClC,MAAM4gB,EAAUpS,EAASxO,GACrB4gB,EAAQsR,SAGRtR,EAAQ/O,QAAU3B,EAClB2B,EAAO/O,KAAK8d,GAEZA,EAAQ8E,KAAKzW,EAAKyI,GAE1B,CACA,IAAI1X,EAAI,EAAGA,EAAI6R,EAAO1R,SAAUH,EAC5B6R,EAAO7R,GAAG0lB,KAAKzW,EAAKyI,EAE5B,CACH,QAAA4L,CAAS3iB,EAAOkR,GACT,MAAMvC,EAAOuC,EAAS,SAAW,UACjC,YAAiB7D,IAAVrN,GAAuB0L,KAAKmf,YAAY2C,QAAU9hB,KAAKinB,6BAA6BhkB,GAAQjD,KAAKknB,0BAA0B5yB,GAAS,EAAG2O,EAClJ,CACH,UAAAkG,CAAW7U,EAAOkR,EAAQvC,GACnB,MAAM6e,EAAU9hB,KAAK+hB,aACrB,IAAI/f,EACJ,GAAI1N,GAAS,GAAKA,EAAQ0L,KAAKmf,YAAY5W,KAAKzU,OAAQ,CACpD,MAAMygB,EAAUvU,KAAKmf,YAAY5W,KAAKjU,GACtC0N,EAAUuS,EAAQ6M,WAAa7M,EAAQ6M,SAtYnD,SAA2BjO,EAAQ7e,EAAOigB,GACtC,OAAOlF,GAAc8D,EAAQ,CACzB3N,QAAQ,EACR2hB,UAAW7yB,EACX4qB,YAAQvd,EACRylB,SAAKzlB,EACL4S,UACAjgB,QACA2O,KAAM,UACN3Q,KAAM,QAEd,CA2X8D+0B,CAAkBrnB,KAAKmJ,aAAc7U,EAAOigB,IAC9FvS,EAAQkd,OAASlf,KAAKqlB,UAAU/wB,GAChC0N,EAAQolB,IAAMtF,EAAQvZ,KAAKjU,GAC3B0N,EAAQ1N,MAAQ0N,EAAQmlB,UAAY7yB,CACxC,MACI0N,EAAUhC,KAAKohB,WAAaphB,KAAKohB,SArZ7C,SAA8BjO,EAAQ7e,GAClC,OAAO+a,GAAc8D,EAAQ,CACzB3N,QAAQ,EACRsc,aAASngB,EACTtN,aAAcC,EACdA,QACA2O,KAAM,UACN3Q,KAAM,WAEd,CA4YwDg1B,CAAqBtnB,KAAKC,MAAMkJ,aAAcnJ,KAAK1L,QAC/F0N,EAAQ8f,QAAUA,EAClB9f,EAAQ1N,MAAQ0N,EAAQ3N,aAAe2L,KAAK1L,MAIhD,OAFA0N,EAAQwD,SAAWA,EACnBxD,EAAQiB,KAAOA,EACRjB,CACX,CACH,4BAAAilB,CAA6BhkB,GACtB,OAAOjD,KAAKunB,uBAAuBvnB,KAAKshB,mBAAmBrvB,GAAIgR,EACnE,CACH,yBAAAikB,CAA0B5yB,EAAO2O,GAC1B,OAAOjD,KAAKunB,uBAAuBvnB,KAAKuhB,gBAAgBtvB,GAAIgR,EAAM3O,EACtE,CACH,sBAAAizB,CAAuBC,EAAavkB,EAAO,UAAW3O,GAC/C,MAAMkR,EAAkB,WAATvC,EACT6M,EAAQ9P,KAAKygB,gBACbxhB,EAAWuoB,EAAc,IAAMvkB,EAC/Bod,EAASvQ,EAAM7Q,GACfwoB,EAAUznB,KAAKkhB,qBAAuBlqB,EAAQ1C,GACpD,GAAI+rB,EACA,OAAOD,GAAiBC,EAAQoH,GAEpC,MAAMlL,EAASvc,KAAKC,MAAMsc,OACpB4H,EAAY5H,EAAOmL,wBAAwB1nB,KAAK2gB,MAAO6G,GACvD/X,EAAWjK,EAAS,CACtB,GAAGgiB,SACH,QACAA,EACA,IACA,CACAA,EACA,IAEEhY,EAAS+M,EAAO8H,gBAAgBrkB,KAAK+hB,aAAcoC,GACnDwD,EAAQp1B,OAAOsB,KAAK+Q,GAASzC,SAASqlB,IAEtC5nB,EAAS2c,EAAOqL,oBAAoBpY,EAAQmY,GADlC,IAAI3nB,KAAKmJ,WAAW7U,EAAOkR,EAAQvC,IACewM,GAKlE,OAJI7P,EAAOqd,UACPrd,EAAOqd,QAAUwK,EACjB3X,EAAM7Q,GAAY1M,OAAOs1B,OAAOzH,GAAiBxgB,EAAQ6nB,KAEtD7nB,CACX,CACH,kBAAAkoB,CAAmBxzB,EAAOyzB,EAAYviB,GAC/B,MAAMvF,EAAQD,KAAKC,MACb6P,EAAQ9P,KAAKygB,gBACbxhB,EAAW,aAAa8oB,IACxB1H,EAASvQ,EAAM7Q,GACrB,GAAIohB,EACA,OAAOA,EAEX,IAAInrB,EACJ,IAAgC,IAA5B+K,EAAM/K,QAAQwM,UAAqB,CACnC,MAAM6a,EAASvc,KAAKC,MAAMsc,OACpB4H,EAAY5H,EAAOyL,0BAA0BhoB,KAAK2gB,MAAOoH,GACzDvY,EAAS+M,EAAO8H,gBAAgBrkB,KAAK+hB,aAAcoC,GACzDjvB,EAAUqnB,EAAO+H,eAAe9U,EAAQxP,KAAKmJ,WAAW7U,EAAOkR,EAAQuiB,GAC3E,CACA,MAAMpiB,EAAa,IAAI2W,GAAWrc,EAAO/K,GAAWA,EAAQyQ,YAI5D,OAHIzQ,GAAWA,EAAQ+a,aACnBH,EAAM7Q,GAAY1M,OAAOs1B,OAAOliB,IAE7BA,CACX,CACH,gBAAAsiB,CAAiB/yB,GACV,GAAKA,EAAQ+nB,QAGb,OAAOjd,KAAK+gB,iBAAmB/gB,KAAK+gB,eAAiBxuB,OAAOmO,OAAO,CAAC,EAAGxL,GAC3E,CACH,cAAAgzB,CAAejlB,EAAMklB,GACd,OAAQA,GAAiBhI,GAAmBld,IAASjD,KAAKC,MAAMmoB,mBACpE,CACH,iBAAAC,CAAkBzuB,EAAOqJ,GAClB,MAAMqlB,EAAYtoB,KAAKknB,0BAA0BttB,EAAOqJ,GAClDslB,EAA0BvoB,KAAK+gB,eAC/BoH,EAAgBnoB,KAAKioB,iBAAiBK,GACtCJ,EAAiBloB,KAAKkoB,eAAejlB,EAAMklB,IAAkBA,IAAkBI,EAErF,OADAvoB,KAAKwoB,oBAAoBL,EAAellB,EAAMqlB,GACvC,CACHH,gBACAD,iBAER,CACH,aAAAO,CAAclU,EAASjgB,EAAOiR,EAAYtC,GAC/Bkd,GAAmBld,GACnB1Q,OAAOmO,OAAO6T,EAAShP,GAEvBvF,KAAK8nB,mBAAmBxzB,EAAO2O,GAAM4Y,OAAOtH,EAAShP,EAE7D,CACH,mBAAAijB,CAAoBL,EAAellB,EAAM+Z,GAC9BmL,IAAkBhI,GAAmBld,IACrCjD,KAAK8nB,wBAAmBnmB,EAAWsB,GAAM4Y,OAAOsM,EAAenL,EAEvE,CACH,SAAA0L,CAAUnU,EAASjgB,EAAO2O,EAAMuC,GACzB+O,EAAQ/O,OAASA,EACjB,MAAMtQ,EAAU8K,KAAKiX,SAAS3iB,EAAOkR,GACrCxF,KAAK8nB,mBAAmBxzB,EAAO2O,EAAMuC,GAAQqW,OAAOtH,EAAS,CACzDrf,SAAUsQ,GAAUxF,KAAKioB,iBAAiB/yB,IAAYA,GAE9D,CACA,gBAAAyzB,CAAiBpU,EAASlgB,EAAcC,GACpC0L,KAAK0oB,UAAUnU,EAASjgB,EAAO,UAAU,EAC7C,CACA,aAAAs0B,CAAcrU,EAASlgB,EAAcC,GACjC0L,KAAK0oB,UAAUnU,EAASjgB,EAAO,UAAU,EAC7C,CACH,wBAAAu0B,GACO,MAAMtU,EAAUvU,KAAKmf,YAAY2C,QAC7BvN,GACAvU,KAAK0oB,UAAUnU,OAAS5S,EAAW,UAAU,EAErD,CACH,qBAAAmnB,GACO,MAAMvU,EAAUvU,KAAKmf,YAAY2C,QAC7BvN,GACAvU,KAAK0oB,UAAUnU,OAAS5S,EAAW,UAAU,EAErD,CACH,eAAAuiB,CAAgBH,GACT,MAAMxb,EAAOvI,KAAK6gB,MACZ1e,EAAWnC,KAAKmf,YAAY5W,KAClC,IAAK,MAAO8T,EAAQ0M,EAAMC,KAAShpB,KAAKqhB,UACpCrhB,KAAKqc,GAAQ0M,EAAMC,GAEvBhpB,KAAKqhB,UAAY,GACjB,MAAM4H,EAAU9mB,EAASrO,OACnBo1B,EAAU3gB,EAAKzU,OACf0wB,EAAQ/sB,KAAKgC,IAAIyvB,EAASD,GAC5BzE,GACAxkB,KAAKukB,MAAM,EAAGC,GAEd0E,EAAUD,EACVjpB,KAAKmpB,gBAAgBF,EAASC,EAAUD,EAASlF,GAC1CmF,EAAUD,GACjBjpB,KAAKopB,gBAAgBF,EAASD,EAAUC,EAEhD,CACH,eAAAC,CAAgBvvB,EAAO4qB,EAAOT,GAAmB,GAC1C,MAAM1F,EAAOre,KAAKmf,YACZ5W,EAAO8V,EAAK9V,KACZ1O,EAAMD,EAAQ4qB,EACpB,IAAI7wB,EACJ,MAAM01B,EAAQ7W,IAEV,IADAA,EAAI1e,QAAU0wB,EACV7wB,EAAI6e,EAAI1e,OAAS,EAAGH,GAAKkG,EAAKlG,IAC9B6e,EAAI7e,GAAK6e,EAAI7e,EAAI6wB,EACrB,EAGJ,IADA6E,EAAK9gB,GACD5U,EAAIiG,EAAOjG,EAAIkG,IAAOlG,EACtB4U,EAAK5U,GAAK,IAAIqM,KAAKuhB,gBAEnBvhB,KAAK4gB,UACLyI,EAAKhL,EAAK6B,SAEdlgB,KAAKukB,MAAM3qB,EAAO4qB,GACdT,GACA/jB,KAAKspB,eAAe/gB,EAAM3O,EAAO4qB,EAAO,QAEhD,CACA,cAAA8E,CAAe/U,EAAS3a,EAAO4qB,EAAOvhB,GAAO,CAChD,eAAAmmB,CAAgBxvB,EAAO4qB,GAChB,MAAMnG,EAAOre,KAAKmf,YAClB,GAAInf,KAAK4gB,SAAU,CACf,MAAM2I,EAAUlL,EAAK6B,QAAQnlB,OAAOnB,EAAO4qB,GACvCnG,EAAKqD,UACLzB,GAAY5B,EAAMkL,EAE1B,CACAlL,EAAK9V,KAAKxN,OAAOnB,EAAO4qB,EAC5B,CACH,KAAAgF,CAAMn2B,GACC,GAAI2M,KAAK4gB,SACL5gB,KAAKqhB,UAAU5qB,KAAKpD,OACjB,CACH,MAAOgpB,EAAQ0M,EAAMC,GAAQ31B,EAC7B2M,KAAKqc,GAAQ0M,EAAMC,EACvB,CACAhpB,KAAKC,MAAMwpB,aAAahzB,KAAK,CACzBuJ,KAAK1L,SACFjB,GAEX,CACA,WAAAq2B,GACI,MAAMlF,EAAQmF,UAAU71B,OACxBkM,KAAKwpB,MAAM,CACP,kBACAxpB,KAAK+hB,aAAaxZ,KAAKzU,OAAS0wB,EAChCA,GAER,CACA,UAAAoF,GACI5pB,KAAKwpB,MAAM,CACP,kBACAxpB,KAAKmf,YAAY5W,KAAKzU,OAAS,EAC/B,GAER,CACA,YAAA+1B,GACI7pB,KAAKwpB,MAAM,CACP,kBACA,EACA,GAER,CACA,aAAAM,CAAclwB,EAAO4qB,GACbA,GACAxkB,KAAKwpB,MAAM,CACP,kBACA5vB,EACA4qB,IAGR,MAAMuF,EAAWJ,UAAU71B,OAAS,EAChCi2B,GACA/pB,KAAKwpB,MAAM,CACP,kBACA5vB,EACAmwB,GAGZ,CACA,cAAAC,GACIhqB,KAAKwpB,MAAM,CACP,kBACA,EACAG,UAAU71B,QAElB,EAcH,SAASm2B,GAAqB5L,GAC3B,MAAM3a,EAAQ2a,EAAKgB,OACbzf,EAbV,SAA2B8D,EAAOpR,GAC9B,IAAKoR,EAAMwmB,OAAOC,KAAM,CACpB,MAAMC,EAAe1mB,EAAMqb,wBAAwBzsB,GACnD,IAAIsN,EAAS,GACb,IAAI,IAAIjM,EAAI,EAAGO,EAAOk2B,EAAat2B,OAAQH,EAAIO,EAAMP,IACjDiM,EAASA,EAAOyqB,OAAOD,EAAaz2B,GAAGsrB,WAAWqH,mBAAmB5iB,IAEzEA,EAAMwmB,OAAOC,KD7mBjB,SAAsB/Q,GACtB,MAAM5Z,EAAM,IAAIqS,IAAIuH,GACpB,OAAI5Z,EAAInI,OAAS+hB,EAAMtlB,OACZslB,EAEJ/mB,MAAM+S,KAAK5F,EACtB,CCumB4B8qB,CAAa1qB,EAAO2qB,MAAK,CAACpzB,EAAGC,IAAID,EAAIC,IAC7D,CACA,OAAOsM,EAAMwmB,OAAOC,IACxB,CAGmBK,CAAkB9mB,EAAO2a,EAAK/rB,MAC7C,IACIqB,EAAGO,EAAMu2B,EAAM9F,EADflrB,EAAMiK,EAAMgnB,QAEhB,MAAMC,EAAmB,KACR,QAATF,IAA4B,QAAVA,IAGlBzzB,EAAQ2tB,KACRlrB,EAAMhC,KAAKgC,IAAIA,EAAKhC,KAAKY,IAAIoyB,EAAO9F,IAASlrB,IAEjDkrB,EAAO8F,EAAI,EAEf,IAAI92B,EAAI,EAAGO,EAAO0L,EAAO9L,OAAQH,EAAIO,IAAQP,EACzC82B,EAAO/mB,EAAMknB,iBAAiBhrB,EAAOjM,IACrCg3B,IAGJ,IADAhG,OAAOhjB,EACHhO,EAAI,EAAGO,EAAOwP,EAAM3D,MAAMjM,OAAQH,EAAIO,IAAQP,EAC9C82B,EAAO/mB,EAAMmnB,gBAAgBl3B,GAC7Bg3B,IAEJ,OAAOlxB,CACX,CA0DA,SAASqxB,GAAWC,EAAOzzB,EAAMunB,EAAQlrB,GAMrC,OALIvB,EAAQ24B,GAtBhB,SAAuBA,EAAOzzB,EAAMunB,EAAQlrB,GACxC,MAAMq3B,EAAanM,EAAO0F,MAAMwG,EAAM,GAAIp3B,GACpCs3B,EAAWpM,EAAO0F,MAAMwG,EAAM,GAAIp3B,GAClC8F,EAAMhC,KAAKgC,IAAIuxB,EAAYC,GAC3BvxB,EAAMjC,KAAKiC,IAAIsxB,EAAYC,GACjC,IAAIC,EAAWzxB,EACX0xB,EAASzxB,EACTjC,KAAKY,IAAIoB,GAAOhC,KAAKY,IAAIqB,KACzBwxB,EAAWxxB,EACXyxB,EAAS1xB,GAEbnC,EAAKunB,EAAOU,MAAQ4L,EACpB7zB,EAAK8zB,QAAU,CACXF,WACAC,SACAvxB,MAAOoxB,EACPnxB,IAAKoxB,EACLxxB,MACAC,MAER,CAGQ2xB,CAAcN,EAAOzzB,EAAMunB,EAAQlrB,GAEnC2D,EAAKunB,EAAOU,MAAQV,EAAO0F,MAAMwG,EAAOp3B,GAErC2D,CACX,CACA,SAASg0B,GAAsBjN,EAAM9V,EAAM3O,EAAO4qB,GAC9C,MAAMnF,EAAShB,EAAKgB,OACdR,EAASR,EAAKQ,OACdmG,EAAS3F,EAAO4F,YAChBC,EAAc7F,IAAWR,EACzBK,EAAS,GACf,IAAIvrB,EAAGO,EAAMoD,EAAMyzB,EACnB,IAAIp3B,EAAIiG,EAAO1F,EAAO0F,EAAQ4qB,EAAO7wB,EAAIO,IAAQP,EAC7Co3B,EAAQxiB,EAAK5U,GACb2D,EAAO,CAAC,EACRA,EAAK+nB,EAAOE,MAAQ2F,GAAe7F,EAAOkF,MAAMS,EAAOrxB,GAAIA,GAC3DurB,EAAOzoB,KAAKq0B,GAAWC,EAAOzzB,EAAMunB,EAAQlrB,IAEhD,OAAOurB,CACX,CACA,SAASqM,GAAWC,GAChB,OAAOA,QAA8B7pB,IAApB6pB,EAAON,eAA4CvpB,IAAlB6pB,EAAOL,MAC7D,CAiCA,SAASM,GAAiBlmB,EAAYrQ,EAAS8oB,EAAO1pB,GAClD,IAAIo3B,EAAOx2B,EAAQy2B,cACnB,MAAMzP,EAAM,CAAC,EACb,IAAKwP,EAED,YADAnmB,EAAWomB,cAAgBzP,GAG/B,IAAa,IAATwP,EAOA,YANAnmB,EAAWomB,cAAgB,CACvB3lB,KAAK,EACLC,OAAO,EACPC,QAAQ,EACRC,MAAM,IAId,MAAM,MAAEvM,EAAM,IAAEC,EAAI,QAAEnG,EAAQ,IAAEsS,EAAI,OAAEE,GA1C1C,SAAqBX,GACjB,IAAI7R,EAASkG,EAAOC,EAAKmM,EAAKE,EAiB9B,OAhBIX,EAAWqmB,YACXl4B,EAAU6R,EAAWqe,KAAOre,EAAWzP,EACvC8D,EAAQ,OACRC,EAAM,UAENnG,EAAU6R,EAAWqe,KAAOre,EAAWvP,EACvC4D,EAAQ,SACRC,EAAM,OAENnG,GACAsS,EAAM,MACNE,EAAS,UAETF,EAAM,QACNE,EAAS,OAEN,CACHtM,QACAC,MACAnG,UACAsS,MACAE,SAER,CAiBsD2lB,CAAYtmB,GACjD,WAATmmB,GAAqB1N,IACrBzY,EAAWumB,oBAAqB,GAC3B9N,EAAM4B,MAAQ,KAAOtrB,EACtBo3B,EAAO1lB,GACCgY,EAAM6B,SAAW,KAAOvrB,EAChCo3B,EAAOxlB,GAEPgW,EAAI6P,GAAU7lB,EAAQtM,EAAOC,EAAKnG,KAAY,EAC9Cg4B,EAAO1lB,IAGfkW,EAAI6P,GAAUL,EAAM9xB,EAAOC,EAAKnG,KAAY,EAC5C6R,EAAWomB,cAAgBzP,CAC/B,CACA,SAAS6P,GAAUL,EAAMv0B,EAAGC,EAAG1D,GAS/B,IAAcs4B,EAAM53B,EAAI63B,EAFpB,OANIv4B,GAQgBu4B,EAPK70B,EACrBs0B,EAAOQ,GADPR,GAOMM,EAPMN,MAOAt3B,EAPM+C,GAQD80B,EAAKD,IAASC,EAAK73B,EAAK43B,EAPnB50B,EAAGD,IAEzBu0B,EAAOQ,GAASR,EAAMv0B,EAAGC,GAEtBs0B,CACX,CAIA,SAASQ,GAASr2B,EAAG+D,EAAOC,GACxB,MAAa,UAANhE,EAAgB+D,EAAc,QAAN/D,EAAcgE,EAAMhE,CACvD,CACA,SAASs2B,GAAiB5mB,GAAY,cAAE6mB,GAAkBC,GACtD9mB,EAAW6mB,cAAkC,SAAlBA,EAAqC,IAAVC,EAAc,IAAO,EAAID,CACnF,CACA,MAAME,WAAsB/L,GACxBC,UAAY,MACfA,gBAAkB,CACXc,oBAAoB,EACpBC,gBAAiB,MACjBgL,mBAAoB,GACpBC,cAAe,GACfC,SAAS,EACT9mB,WAAY,CACRjH,QAAS,CACLpM,KAAM,SACNiT,WAAY,CACR,IACA,IACA,OACA,QACA,aAKnBib,iBAAmB,CACZ7c,OAAQ,CACJ+oB,QAAS,CACLp6B,KAAM,WACN+T,QAAQ,EACRK,KAAM,CACFL,QAAQ,IAGhBsmB,QAAS,CACLr6B,KAAM,SACNgU,aAAa,KAI5B,kBAAAwe,CAAmBzG,EAAM9V,EAAM3O,EAAO4qB,GAC/B,OAAO8G,GAAsBjN,EAAM9V,EAAM3O,EAAO4qB,EACpD,CACH,cAAAI,CAAevG,EAAM9V,EAAM3O,EAAO4qB,GAC3B,OAAO8G,GAAsBjN,EAAM9V,EAAM3O,EAAO4qB,EACpD,CACH,eAAAK,CAAgBxG,EAAM9V,EAAM3O,EAAO4qB,GAC5B,MAAM,OAAEnF,EAAO,OAAER,GAAYR,GACvB,SAAE8G,EAAU,IAAI,SAAEC,EAAU,KAASplB,KAAK4gB,SAC1C0C,EAA2B,MAAhBjE,EAAOE,KAAe4F,EAAWC,EAC5C7B,EAA2B,MAAhB1E,EAAOU,KAAe4F,EAAWC,EAC5ClG,EAAS,GACf,IAAIvrB,EAAGO,EAAMoD,EAAMpB,EACnB,IAAIvC,EAAIiG,EAAO1F,EAAO0F,EAAQ4qB,EAAO7wB,EAAIO,IAAQP,EAC7CuC,EAAMqS,EAAK5U,GACX2D,EAAO,CAAC,EACRA,EAAK+nB,EAAOE,MAAQF,EAAOkF,MAAMtuB,EAAiBC,EAAKotB,GAAW3vB,GAClEurB,EAAOzoB,KAAKq0B,GAAW70B,EAAiBC,EAAKqtB,GAAWjsB,EAAMunB,EAAQlrB,IAE1E,OAAOurB,CACX,CACH,qBAAAqG,CAAsBhtB,EAAOmL,EAAOwb,EAAQlB,GACrC4O,MAAMrH,sBAAsBhtB,EAAOmL,EAAOwb,EAAQlB,GAClD,MAAMwN,EAAStM,EAAOkM,QAClBI,GAAU9nB,IAAU1D,KAAKmf,YAAYN,SACrCtmB,EAAMkB,IAAMhC,KAAKgC,IAAIlB,EAAMkB,IAAK+xB,EAAO/xB,KACvClB,EAAMmB,IAAMjC,KAAKiC,IAAInB,EAAMmB,IAAK8xB,EAAO9xB,KAE/C,CACH,cAAA6sB,GACO,OAAO,CACX,CACH,gBAAAC,CAAiBlyB,GACV,MAAM+pB,EAAOre,KAAKmf,aACZ,OAAEE,EAAO,OAAER,GAAYR,EACvBa,EAASlf,KAAKqlB,UAAU/wB,GACxBk3B,EAAStM,EAAOkM,QAChBj5B,EAAQo5B,GAAWC,GAAU,IAAMA,EAAO5xB,MAAQ,KAAO4xB,EAAO3xB,IAAM,IAAM,GAAKglB,EAAO6H,iBAAiBxH,EAAOL,EAAOU,OAC7H,MAAO,CACHkH,MAAO,GAAKpH,EAAOqH,iBAAiBxH,EAAOG,EAAOE,OAClDptB,QAER,CACA,UAAAqvB,GACIxhB,KAAKkhB,qBAAsB,EAC3B0L,MAAMpL,aACOxhB,KAAKmf,YACbnB,MAAQhe,KAAK+hB,aAAa/D,KACnC,CACA,MAAAnC,CAAO5Y,GACH,MAAMob,EAAOre,KAAKmf,YAClBnf,KAAKspB,eAAejL,EAAK9V,KAAM,EAAG8V,EAAK9V,KAAKzU,OAAQmP,EACxD,CACA,cAAAqmB,CAAeuD,EAAMjzB,EAAO4qB,EAAOvhB,GAC/B,MAAMkgB,EAAiB,UAATlgB,GACR,MAAE3O,EAAQ6qB,aAAa,OAAEN,IAAe7e,KACxC4jB,EAAO/E,EAAOiO,eACdlB,EAAa/M,EAAOkO,eACpBC,EAAQhtB,KAAKitB,aACb,cAAE9E,EAAc,eAAED,GAAoBloB,KAAKqoB,kBAAkBzuB,EAAOqJ,GAC1E,IAAI,IAAItP,EAAIiG,EAAOjG,EAAIiG,EAAQ4qB,EAAO7wB,IAAI,CACtC,MAAMurB,EAASlf,KAAKqlB,UAAU1xB,GACxBu5B,EAAU/J,GAASjxB,EAAcgtB,EAAOL,EAAOU,OAAS,CAC1DqE,OACAuJ,KAAMvJ,GACN5jB,KAAKotB,yBAAyBz5B,GAC5B05B,EAAUrtB,KAAKstB,yBAAyB35B,EAAGq5B,GAC3ChP,GAASkB,EAAOE,SAAW,CAAC,GAAGP,EAAOU,MACtCha,EAAa,CACfqmB,aACAhI,KAAMsJ,EAAQtJ,KACdkI,oBAAqB9N,GAASuN,GAAWrM,EAAOkM,UAAY92B,IAAU0pB,EAAM4B,MAAQtrB,IAAU0pB,EAAM6B,QACpG/pB,EAAG81B,EAAasB,EAAQC,KAAOE,EAAQE,OACvCv3B,EAAG41B,EAAayB,EAAQE,OAASL,EAAQC,KACzC5jB,OAAQqiB,EAAayB,EAAQh2B,KAAOI,KAAKY,IAAI60B,EAAQ71B,MACrDgQ,MAAOukB,EAAan0B,KAAKY,IAAI60B,EAAQ71B,MAAQg2B,EAAQh2B,MAErD6wB,IACA3iB,EAAWrQ,QAAUizB,GAAiBnoB,KAAKknB,0BAA0BvzB,EAAGk5B,EAAKl5B,GAAG6R,OAAS,SAAWvC,IAExG,MAAM/N,EAAUqQ,EAAWrQ,SAAW23B,EAAKl5B,GAAGuB,QAC9Cu2B,GAAiBlmB,EAAYrQ,EAAS8oB,EAAO1pB,GAC7C63B,GAAiB5mB,EAAYrQ,EAAS83B,EAAMX,OAC5CrsB,KAAKyoB,cAAcoE,EAAKl5B,GAAIA,EAAG4R,EAAYtC,EAC/C,CACJ,CACH,UAAAuqB,CAAWnzB,EAAM8sB,GACV,MAAM,OAAE9H,GAAYrf,KAAKmf,YACnBtB,EAAWwB,EAAON,wBAAwB/e,KAAK2gB,OAAOlO,QAAQ4L,GAAOA,EAAKY,WAAW/pB,QAAQu3B,UAC7FnO,EAAUe,EAAOnqB,QAAQopB,QACzBE,EAAS,GACTiP,EAAYpP,IACd,MAAMa,EAASb,EAAKY,WAAWoG,UAAU8B,GACnCuG,EAAMxO,GAAUA,EAAOb,EAAKQ,OAAOU,MACzC,GAAIrtB,EAAcw7B,IAAQ10B,MAAM00B,GAC5B,OAAO,CACX,EAEJ,IAAK,MAAMrP,KAAQR,EACf,SAAkBlc,IAAdwlB,IAA2BsG,EAASpP,QAGxB,IAAZC,IAAqD,IAAhCE,EAAOxpB,QAAQqpB,EAAKL,aAA6Brc,IAAZ2c,QAAwC3c,IAAf0c,EAAKL,QACxFQ,EAAO/nB,KAAK4nB,EAAKL,OAEjBK,EAAK/pB,QAAU+F,GACf,MAMR,OAHKmkB,EAAO1qB,QACR0qB,EAAO/nB,UAAKkL,GAET6c,CACX,CACH,cAAAmP,CAAer5B,GACR,OAAO0L,KAAKwtB,gBAAW7rB,EAAWrN,GAAOR,MAC7C,CACH,cAAA85B,CAAev5B,EAAc4P,EAAMkjB,GAC5B,MAAM3I,EAASxe,KAAKwtB,WAAWn5B,EAAc8yB,GACvC7yB,OAAiBqN,IAATsC,EAAqBua,EAAOxpB,QAAQiP,IAAS,EAC3D,OAAkB,IAAX3P,EAAekqB,EAAO1qB,OAAS,EAAIQ,CAC9C,CACH,SAAA24B,GACO,MAAMthB,EAAO3L,KAAK9K,QACZmpB,EAAOre,KAAKmf,YACZE,EAAShB,EAAKgB,OACdwO,EAAS,GACf,IAAIl6B,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAOmqB,EAAK9V,KAAKzU,OAAQH,EAAIO,IAAQP,EAC5Ck6B,EAAOp3B,KAAK4oB,EAAOuL,iBAAiB5qB,KAAKqlB,UAAU1xB,GAAG0rB,EAAOE,MAAO5rB,IAExE,MAAMm6B,EAAeniB,EAAKmiB,aAE1B,MAAO,CACHr0B,IAFQq0B,GAAgB7D,GAAqB5L,GAG7CwP,SACAj0B,MAAOylB,EAAO0O,YACdl0B,IAAKwlB,EAAO2O,UACZC,WAAYjuB,KAAK2tB,iBACjBjqB,MAAO2b,EACPoN,QAAS9gB,EAAK8gB,QACdJ,MAAOyB,EAAe,EAAIniB,EAAK4gB,mBAAqB5gB,EAAK6gB,cAEjE,CACH,wBAAAY,CAAyB94B,GAClB,MAAQ6qB,aAAa,OAAEN,EAAO,SAAE6C,EAAWptB,MAAOD,GAAkBa,SAAW0uB,KAAMsK,EAAU,aAAEC,IAAqBnuB,KAChHouB,EAAaF,GAAa,EAC1BhP,EAASlf,KAAKqlB,UAAU/wB,GACxBk3B,EAAStM,EAAOkM,QAChBiD,EAAW9C,GAAWC,GAC5B,IAGI2B,EAAM91B,EAHNlF,EAAQ+sB,EAAOL,EAAOU,MACtB3lB,EAAQ,EACR9F,EAAS4tB,EAAW1hB,KAAK+d,WAAWc,EAAQK,EAAQwC,GAAYvvB,EAEhE2B,IAAW3B,IACXyH,EAAQ9F,EAAS3B,EACjB2B,EAAS3B,GAETk8B,IACAl8B,EAAQq5B,EAAON,SACfp3B,EAAS03B,EAAOL,OAASK,EAAON,SAClB,IAAV/4B,GAAe+F,EAAK/F,KAAW+F,EAAKszB,EAAOL,UAC3CvxB,EAAQ,GAEZA,GAASzH,GAEb,MAAM64B,EAAc94B,EAAcg8B,IAAeG,EAAuBz0B,EAAZs0B,EAC5D,IAAItK,EAAO/E,EAAO+L,iBAAiBI,GAOnC,GALImC,EADAntB,KAAKC,MAAMquB,kBAAkBh6B,GACtBuqB,EAAO+L,iBAAiBhxB,EAAQ9F,GAEhC8vB,EAEXvsB,EAAO81B,EAAOvJ,EACVnsB,KAAKY,IAAIhB,GAAQ82B,EAAc,CAC/B92B,EApSZ,SAAiBA,EAAMwnB,EAAQuP,GAC3B,OAAa,IAAT/2B,EACOa,EAAKb,IAERwnB,EAAOkO,eAAiB,GAAK,IAAMlO,EAAOplB,KAAO20B,EAAa,GAAK,EAC/E,CA+RmBG,CAAQl3B,EAAMwnB,EAAQuP,GAAcD,EACvCh8B,IAAUi8B,IACVxK,GAAQvsB,EAAO,GAEnB,MAAMm3B,EAAa3P,EAAO4P,mBAAmB,GACvCC,EAAW7P,EAAO4P,mBAAmB,GACrCh1B,EAAMhC,KAAKgC,IAAI+0B,EAAYE,GAC3Bh1B,EAAMjC,KAAKiC,IAAI80B,EAAYE,GACjC9K,EAAOnsB,KAAKiC,IAAIjC,KAAKgC,IAAImqB,EAAMlqB,GAAMD,GACrC0zB,EAAOvJ,EAAOvsB,EACVqqB,IAAa2M,IACbnP,EAAOE,QAAQP,EAAOU,MAAMO,cAAczrB,GAAgBwqB,EAAO8P,iBAAiBxB,GAAQtO,EAAO8P,iBAAiB/K,GAE1H,CACA,GAAIA,IAAS/E,EAAO+L,iBAAiBwD,GAAa,CAC9C,MAAMQ,EAAW12B,EAAKb,GAAQwnB,EAAOgQ,qBAAqBT,GAAc,EACxExK,GAAQgL,EACRv3B,GAAQu3B,CACZ,CACA,MAAO,CACHv3B,OACAusB,OACAuJ,OACAI,OAAQJ,EAAO91B,EAAO,EAE9B,CACH,wBAAAi2B,CAAyBh5B,EAAO04B,GACzB,MAAMtpB,EAAQspB,EAAMtpB,MACdxO,EAAU8K,KAAK9K,QACfu4B,EAAWv4B,EAAQu4B,SACnBqB,EAAkB57B,EAAegC,EAAQ45B,gBAAiBC,KAChE,IAAIxB,EAAQl2B,EACZ,GAAI21B,EAAMP,QAAS,CACf,MAAMwB,EAAaR,EAAWztB,KAAK2tB,eAAer5B,GAAS04B,EAAMiB,WAC3D11B,EAAiC,SAAzBrD,EAAQ44B,aAzYjC,SAAmCx5B,EAAO04B,EAAO93B,EAAS+4B,GACvD,MAAMJ,EAASb,EAAMa,OACfpD,EAAOoD,EAAOv5B,GACpB,IAAIqwB,EAAOrwB,EAAQ,EAAIu5B,EAAOv5B,EAAQ,GAAK,KACvC06B,EAAO16B,EAAQu5B,EAAO/5B,OAAS,EAAI+5B,EAAOv5B,EAAQ,GAAK,KAC3D,MAAM26B,EAAU/5B,EAAQq3B,mBACX,OAAT5H,IACAA,EAAO8F,GAAiB,OAATuE,EAAgBhC,EAAMnzB,IAAMmzB,EAAMpzB,MAAQo1B,EAAOvE,IAEvD,OAATuE,IACAA,EAAOvE,EAAOA,EAAO9F,GAEzB,MAAM/qB,EAAQ6wB,GAAQA,EAAOhzB,KAAKgC,IAAIkrB,EAAMqK,IAAS,EAAIC,EAEzD,MAAO,CACHC,MAFSz3B,KAAKY,IAAI22B,EAAOrK,GAAQ,EAAIsK,EAEvBhB,EACd5B,MAAOn3B,EAAQs3B,cACf5yB,QAER,CAsX4Du1B,CAA0B76B,EAAO04B,EAAO93B,EAAS+4B,GAzZ5G,SAAkC35B,EAAO04B,EAAO93B,EAAS+4B,GACtD,MAAMmB,EAAYl6B,EAAQ44B,aAC1B,IAAIz2B,EAAMg1B,EAQV,OAPIn6B,EAAck9B,IACd/3B,EAAO21B,EAAMvzB,IAAMvE,EAAQq3B,mBAC3BF,EAAQn3B,EAAQs3B,gBAEhBn1B,EAAO+3B,EAAYnB,EACnB5B,EAAQ,GAEL,CACH6C,MAAO73B,EAAO42B,EACd5B,QACAzyB,MAAOozB,EAAMa,OAAOv5B,GAAS+C,EAAO,EAE5C,CA0Y2Hg4B,CAAyB/6B,EAAO04B,EAAO93B,EAAS+4B,GACzJqB,EAAatvB,KAAK4tB,eAAe5tB,KAAK1L,MAAO0L,KAAKmf,YAAYnB,MAAOyP,EAAWn5B,OAAQqN,GAC9F4rB,EAASh1B,EAAMqB,MAAQrB,EAAM22B,MAAQI,EAAa/2B,EAAM22B,MAAQ,EAChE73B,EAAOI,KAAKgC,IAAIq1B,EAAiBv2B,EAAM22B,MAAQ32B,EAAM8zB,MACzD,MACIkB,EAAS7pB,EAAMknB,iBAAiB5qB,KAAKqlB,UAAU/wB,GAAOoP,EAAM6b,MAAOjrB,GACnE+C,EAAOI,KAAKgC,IAAIq1B,EAAiB9B,EAAMvzB,IAAMuzB,EAAMX,OAEvD,MAAO,CACHzI,KAAM2J,EAASl2B,EAAO,EACtB81B,KAAMI,EAASl2B,EAAO,EACtBk2B,SACAl2B,OAER,CACA,IAAAgiB,GACI,MAAMgF,EAAOre,KAAKmf,YACZN,EAASR,EAAKQ,OACd0Q,EAAQlR,EAAK9V,KACbrU,EAAOq7B,EAAMz7B,OACnB,IAAIH,EAAI,EACR,KAAMA,EAAIO,IAAQP,EACyB,OAAnCqM,KAAKqlB,UAAU1xB,GAAGkrB,EAAOU,OAAmBgQ,EAAM57B,GAAGkyB,QACrD0J,EAAM57B,GAAG0lB,KAAKrZ,KAAKgH,KAG/B,EA69BJ,SAASwoB,GAAaC,EAASlQ,EAAMptB,EAAO+Q,GACxC,MAAM,WAAE+b,EAAW,KAAE1W,EAAK,QAAEmc,GAAa+K,EACnCpQ,EAASJ,EAAWE,YAAYE,OACtC,GAAIA,GAAUE,IAASF,EAAOE,MAAiB,MAATA,GAAgBmF,GAAWnc,EAAKzU,OAAQ,CAC1E,MAAM47B,EAAerQ,EAAOsQ,eAAiBp1B,EAAgBH,EAC7D,IAAK8I,EACD,OAAOwsB,EAAannB,EAAMgX,EAAMptB,GAC7B,GAAI8sB,EAAW8B,eAAgB,CAClC,MAAMhK,EAAKxO,EAAK,GACVhQ,EAA+B,mBAAhBwe,EAAG6Y,UAA2B7Y,EAAG6Y,SAASrQ,GAC/D,GAAIhnB,EAAO,CACP,MAAMqB,EAAQ81B,EAAannB,EAAMgX,EAAMptB,EAAQoG,GACzCsB,EAAM61B,EAAannB,EAAMgX,EAAMptB,EAAQoG,GAC7C,MAAO,CACH4B,GAAIP,EAAMO,GACVD,GAAIL,EAAIK,GAEhB,CACJ,CACJ,CACA,MAAO,CACHC,GAAI,EACJD,GAAIqO,EAAKzU,OAAS,EAE1B,CACC,SAAS+7B,GAAyB5vB,EAAOsf,EAAMuQ,EAAUC,EAAS7sB,GAC/D,MAAM2a,EAAW5d,EAAM+vB,+BACjB79B,EAAQ29B,EAASvQ,GACvB,IAAI,IAAI5rB,EAAI,EAAGO,EAAO2pB,EAAS/pB,OAAQH,EAAIO,IAAQP,EAAE,CACjD,MAAM,MAAEW,EAAM,KAAEiU,GAAUsV,EAASlqB,IAC7B,GAAEwG,EAAG,GAAED,GAAQs1B,GAAa3R,EAASlqB,GAAI4rB,EAAMptB,EAAO+Q,GAC5D,IAAI,IAAI+sB,EAAI91B,EAAI81B,GAAK/1B,IAAM+1B,EAAE,CACzB,MAAM1b,EAAUhM,EAAK0nB,GAChB1b,EAAQ2b,MACTH,EAAQxb,EAASjgB,EAAO27B,EAEhC,CACJ,CACJ,CAUC,SAASE,GAAkBlwB,EAAO6vB,EAAUvQ,EAAM6Q,EAAkBjtB,GACjE,MAAMiW,EAAQ,GACd,OAAKjW,GAAqBlD,EAAMowB,cAAcP,IAe9CD,GAAyB5vB,EAAOsf,EAAMuQ,GAZf,SAASvb,EAASlgB,EAAcC,IAC9C6O,GAAqBgI,GAAeoJ,EAAStU,EAAM+mB,UAAW,KAG/DzS,EAAQ+b,QAAQR,EAASh6B,EAAGg6B,EAAS95B,EAAGo6B,IACxChX,EAAM3iB,KAAK,CACP8d,UACAlgB,eACAC,SAGZ,IACgE,GACzD8kB,GAfIA,CAgBf,CA0DC,SAASmX,GAAgBtwB,EAAO6vB,EAAUvQ,EAAMrc,EAAWktB,EAAkBjtB,GAC1E,OAAKA,GAAqBlD,EAAMowB,cAAcP,GAG9B,MAATvQ,GAAiBrc,EAvC3B,SAAkCjD,EAAO6vB,EAAUvQ,EAAMrc,EAAWktB,EAAkBjtB,GACnF,IAAIiW,EAAQ,GACZ,MAAMoX,EArDT,SAAkCjR,GAC/B,MAAMkR,GAA8B,IAAvBlR,EAAKvqB,QAAQ,KACpB07B,GAA8B,IAAvBnR,EAAKvqB,QAAQ,KAC1B,OAAO,SAAS27B,EAAKC,GACjB,MAAMC,EAASJ,EAAOh5B,KAAKY,IAAIs4B,EAAI76B,EAAI86B,EAAI96B,GAAK,EAC1Cg7B,EAASJ,EAAOj5B,KAAKY,IAAIs4B,EAAI36B,EAAI46B,EAAI56B,GAAK,EAChD,OAAOyB,KAAK6F,KAAK7F,KAAKkB,IAAIk4B,EAAQ,GAAKp5B,KAAKkB,IAAIm4B,EAAQ,GAC5D,CACJ,CA6C2BC,CAAyBxR,GAChD,IAAIyR,EAAcl+B,OAAO8E,kBA8BzB,OADAi4B,GAAyB5vB,EAAOsf,EAAMuQ,GA5BtC,SAAwBvb,EAASlgB,EAAcC,GAC3C,MAAMg8B,EAAU/b,EAAQ+b,QAAQR,EAASh6B,EAAGg6B,EAAS95B,EAAGo6B,GACxD,GAAIltB,IAAcotB,EACd,OAEJ,MAAM/C,EAAShZ,EAAQ0c,eAAeb,GAEtC,IADsBjtB,IAAoBlD,EAAMowB,cAAc9C,KACzC+C,EACjB,OAEJ,MAAMY,EAAWV,EAAeV,EAAUvC,GACtC2D,EAAWF,GACX5X,EAAQ,CACJ,CACI7E,UACAlgB,eACAC,UAGR08B,EAAcE,GACPA,IAAaF,GACpB5X,EAAM3iB,KAAK,CACP8d,UACAlgB,eACAC,SAGZ,IAEO8kB,CACX,CAKyG+X,CAAyBlxB,EAAO6vB,EAAUvQ,EAAMrc,EAAWktB,EAAkBjtB,GA7DrL,SAA+BlD,EAAO6vB,EAAUvQ,EAAM6Q,GACnD,IAAIhX,EAAQ,GAmBZ,OADAyW,GAAyB5vB,EAAOsf,EAAMuQ,GAjBtC,SAAwBvb,EAASlgB,EAAcC,GAC3C,MAAM,WAAE88B,EAAW,SAAEC,GAAc9c,EAAQ+c,SAAS,CAChD,aACA,YACDlB,IACG,MAAEmB,GDtxEhB,SAA2BC,EAAaC,GACpC,MAAMC,EAAsBD,EAAW37B,EAAI07B,EAAY17B,EACjD67B,EAAsBF,EAAWz7B,EAAIw7B,EAAYx7B,EACjD47B,EAA2Bn6B,KAAK6F,KAAKo0B,EAAsBA,EAAsBC,EAAsBA,GAC7G,IAAIJ,EAAQ95B,KAAKo6B,MAAMF,EAAqBD,GAI5C,OAHIH,GAAS,GAAM/5B,IACf+5B,GAAS75B,GAEN,CACH65B,QACAL,SAAUU,EAElB,CC0wE2BE,CAAkBvd,EAAS,CAC1Cze,EAAGg6B,EAASh6B,EACZE,EAAG85B,EAAS95B,KD1vEpB,SAAuBu7B,EAAO33B,EAAOC,EAAKk4B,GAC1C,MAAM56B,EAAIoC,EAAgBg4B,GACpB11B,EAAItC,EAAgBK,GACpBP,EAAIE,EAAgBM,GACpBm4B,EAAez4B,EAAgBsC,EAAI1E,GACnC86B,EAAa14B,EAAgBF,EAAIlC,GACjC+6B,EAAe34B,EAAgBpC,EAAI0E,GACnCs2B,EAAa54B,EAAgBpC,EAAIkC,GACvC,OAAOlC,IAAM0E,GAAK1E,IAAMkC,GAAK04B,GAAyBl2B,IAAMxC,GAAK24B,EAAeC,GAAcC,EAAeC,CACjH,ECmvEYC,CAAcb,EAAOH,EAAYC,IACjCjY,EAAM3iB,KAAK,CACP8d,UACAlgB,eACAC,SAGZ,IAEO8kB,CACX,CAwCwCiZ,CAAsBpyB,EAAO6vB,EAAUvQ,EAAM6Q,GAFtE,EAGf,CACC,SAASkC,GAAaryB,EAAO6vB,EAAUvQ,EAAMrc,EAAWktB,GACrD,MAAMhX,EAAQ,GACRmZ,EAAuB,MAAThT,EAAe,WAAa,WAChD,IAAIiT,GAAiB,EAWrB,OAVA3C,GAAyB5vB,EAAOsf,EAAMuQ,GAAU,CAACvb,EAASlgB,EAAcC,KAChEigB,EAAQge,GAAazC,EAASvQ,GAAO6Q,KACrChX,EAAM3iB,KAAK,CACP8d,UACAlgB,eACAC,UAEJk+B,EAAiBA,GAAkBje,EAAQ+b,QAAQR,EAASh6B,EAAGg6B,EAAS95B,EAAGo6B,GAC/E,IAEAltB,IAAcsvB,EACP,GAEJpZ,CACX,CACC,IAAIqZ,GAAc,CACf5C,4BACA6C,MAAO,CACV,KAAAp+B,CAAO2L,EAAO5G,EAAGnE,EAASk7B,GACf,MAAMN,EAAW5a,GAAoB7b,EAAG4G,GAClCsf,EAAOrqB,EAAQqqB,MAAQ,IACvBpc,EAAmBjO,EAAQiO,mBAAoB,EAC/CiW,EAAQlkB,EAAQgO,UAAYitB,GAAkBlwB,EAAO6vB,EAAUvQ,EAAM6Q,EAAkBjtB,GAAoBotB,GAAgBtwB,EAAO6vB,EAAUvQ,GAAM,EAAO6Q,EAAkBjtB,GAC3KhB,EAAW,GACjB,OAAKiX,EAAMtlB,QAGXmM,EAAM+vB,+BAA+Bh1B,SAASqjB,IAC1C,MAAM/pB,EAAQ8kB,EAAM,GAAG9kB,MACjBigB,EAAU8J,EAAK9V,KAAKjU,GACtBigB,IAAYA,EAAQ2b,MACpB/tB,EAAS1L,KAAK,CACV8d,UACAlgB,aAAcgqB,EAAK/pB,MACnBA,SAER,IAEG6N,GAbI,EAcf,EACP,OAAA2f,CAAS7hB,EAAO5G,EAAGnE,EAASk7B,GACjB,MAAMN,EAAW5a,GAAoB7b,EAAG4G,GAClCsf,EAAOrqB,EAAQqqB,MAAQ,KACvBpc,EAAmBjO,EAAQiO,mBAAoB,EACrD,IAAIiW,EAAQlkB,EAAQgO,UAAYitB,GAAkBlwB,EAAO6vB,EAAUvQ,EAAM6Q,EAAkBjtB,GAAoBotB,GAAgBtwB,EAAO6vB,EAAUvQ,GAAM,EAAO6Q,EAAkBjtB,GAC/K,GAAIiW,EAAMtlB,OAAS,EAAG,CAClB,MAAMO,EAAe+kB,EAAM,GAAG/kB,aACxBkU,EAAOtI,EAAM+iB,eAAe3uB,GAAckU,KAChD6Q,EAAQ,GACR,IAAI,IAAIzlB,EAAI,EAAGA,EAAI4U,EAAKzU,SAAUH,EAC9BylB,EAAM3iB,KAAK,CACP8d,QAAShM,EAAK5U,GACdU,eACAC,MAAOX,GAGnB,CACA,OAAOylB,CACX,EACPhO,MAAM,CAACnL,EAAO5G,EAAGnE,EAASk7B,IAIRD,GAAkBlwB,EAHRiV,GAAoB7b,EAAG4G,GAC3B/K,EAAQqqB,MAAQ,KAEmB6Q,EADvBl7B,EAAQiO,mBAAoB,GAGhE,OAAAwvB,CAAS1yB,EAAO5G,EAAGnE,EAASk7B,GACjB,MAAMN,EAAW5a,GAAoB7b,EAAG4G,GAClCsf,EAAOrqB,EAAQqqB,MAAQ,KACvBpc,EAAmBjO,EAAQiO,mBAAoB,EACrD,OAAOotB,GAAgBtwB,EAAO6vB,EAAUvQ,EAAMrqB,EAAQgO,UAAWktB,EAAkBjtB,EACvF,EACPrN,EAAE,CAACmK,EAAO5G,EAAGnE,EAASk7B,IAEJkC,GAAaryB,EADHiV,GAAoB7b,EAAG4G,GACH,IAAK/K,EAAQgO,UAAWktB,GAExEp6B,EAAE,CAACiK,EAAO5G,EAAGnE,EAASk7B,IAEJkC,GAAaryB,EADHiV,GAAoB7b,EAAG4G,GACH,IAAK/K,EAAQgO,UAAWktB,KAKzE,MAAMwC,GAAmB,CACrB,OACA,MACA,QACA,UAEJ,SAASC,GAAiBn4B,EAAOo1B,GAC7B,OAAOp1B,EAAM+X,QAAQ5c,GAAIA,EAAEkf,MAAQ+a,GACvC,CACA,SAASgD,GAA4Bp4B,EAAO6kB,GACxC,OAAO7kB,EAAM+X,QAAQ5c,IAAyC,IAArC+8B,GAAiB59B,QAAQa,EAAEkf,MAAelf,EAAE2f,IAAI+J,OAASA,GACtF,CACA,SAASwT,GAAar4B,EAAOhH,GACzB,OAAOgH,EAAM6vB,MAAK,CAACpzB,EAAGC,KAClB,MAAMjD,EAAKT,EAAU0D,EAAID,EACnB/C,EAAKV,EAAUyD,EAAIC,EACzB,OAAOjD,EAAGsO,SAAWrO,EAAGqO,OAAStO,EAAGG,MAAQF,EAAGE,MAAQH,EAAGsO,OAASrO,EAAGqO,MAAM,GAEpF,CA0EA,SAASuwB,GAAeC,EAAYjM,EAAW7vB,EAAGC,GAC9C,OAAOK,KAAKiC,IAAIu5B,EAAW97B,GAAI6vB,EAAU7vB,IAAMM,KAAKiC,IAAIu5B,EAAW77B,GAAI4vB,EAAU5vB,GACrF,CACA,SAAS87B,GAAiBD,EAAYE,GAClCF,EAAWjtB,IAAMvO,KAAKiC,IAAIu5B,EAAWjtB,IAAKmtB,EAAWntB,KACrDitB,EAAW9sB,KAAO1O,KAAKiC,IAAIu5B,EAAW9sB,KAAMgtB,EAAWhtB,MACvD8sB,EAAW/sB,OAASzO,KAAKiC,IAAIu5B,EAAW/sB,OAAQitB,EAAWjtB,QAC3D+sB,EAAWhtB,MAAQxO,KAAKiC,IAAIu5B,EAAWhtB,MAAOktB,EAAWltB,MAC7D,CACA,SAASmtB,GAAWpM,EAAWqM,EAAQC,EAAQ9U,GAC3C,MAAM,IAAEzJ,EAAI,IAAES,GAAS8d,EACjBL,EAAajM,EAAUiM,WAC7B,IAAKrgC,EAASmiB,GAAM,CACZue,EAAOj8B,OACP2vB,EAAUjS,IAAQue,EAAOj8B,MAE7B,MAAM2mB,EAAQQ,EAAO8U,EAAOtV,QAAU,CAClC3mB,KAAM,EACNmtB,MAAO,GAEXxG,EAAM3mB,KAAOI,KAAKiC,IAAIskB,EAAM3mB,KAAMi8B,EAAO1H,WAAapW,EAAIjM,OAASiM,EAAInO,OACvEisB,EAAOj8B,KAAO2mB,EAAM3mB,KAAO2mB,EAAMwG,MACjCwC,EAAUjS,IAAQue,EAAOj8B,IAC7B,CACIme,EAAI+d,YACJL,GAAiBD,EAAYzd,EAAI+d,cAErC,MAAMC,EAAW/7B,KAAKiC,IAAI,EAAG25B,EAAOI,WAAaT,GAAeC,EAAYjM,EAAW,OAAQ,UACzF0M,EAAYj8B,KAAKiC,IAAI,EAAG25B,EAAOM,YAAcX,GAAeC,EAAYjM,EAAW,MAAO,WAC1F4M,EAAeJ,IAAaxM,EAAUrd,EACtCkqB,EAAgBH,IAAc1M,EAAUzZ,EAG9C,OAFAyZ,EAAUrd,EAAI6pB,EACdxM,EAAUzZ,EAAImmB,EACPJ,EAAO1H,WAAa,CACvBkI,KAAMF,EACNG,MAAOF,GACP,CACAC,KAAMD,EACNE,MAAOH,EAEf,CAaA,SAASI,GAAWpI,EAAY5E,GAC5B,MAAMiM,EAAajM,EAAUiM,WAa7B,OAZA,SAA4Bve,GACxB,MAAMpJ,EAAS,CACXnF,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GAKZ,OAHAwO,EAAU1Z,SAAS+Z,IACfzJ,EAAOyJ,GAAOtd,KAAKiC,IAAIstB,EAAUjS,GAAMke,EAAWle,GAAK,IAEpDzJ,CACX,CACoB2oB,CAAbrI,EAAgC,CACnC,OACA,SACoB,CACpB,MACA,UAER,CACA,SAASsI,GAASC,EAAOnN,EAAWqM,EAAQ7U,GACxC,MAAM4V,EAAa,GACnB,IAAIzgC,EAAGO,EAAMo/B,EAAQ9d,EAAK6e,EAAOC,EACjC,IAAI3gC,EAAI,EAAGO,EAAOigC,EAAMrgC,OAAQugC,EAAQ,EAAG1gC,EAAIO,IAAQP,EAAE,CACrD2/B,EAASa,EAAMxgC,GACf6hB,EAAM8d,EAAO9d,IACbA,EAAIqG,OAAOyX,EAAOjsB,OAAS2f,EAAUrd,EAAG2pB,EAAO/pB,QAAUyd,EAAUzZ,EAAGymB,GAAWV,EAAO1H,WAAY5E,IACpG,MAAM,KAAE8M,EAAK,MAAEC,GAAWX,GAAWpM,EAAWqM,EAAQC,EAAQ9U,GAChE6V,GAASP,GAAQM,EAAWtgC,OAC5BwgC,EAAUA,GAAWP,EAChBve,EAAI+e,UACLH,EAAW39B,KAAK68B,EAExB,CACA,OAAOe,GAASH,GAASE,EAAYpN,EAAWqM,EAAQ7U,IAAW8V,CACvE,CACA,SAASE,GAAWhf,EAAKrP,EAAMH,EAAKqB,EAAOkC,GACvCiM,EAAIxP,IAAMA,EACVwP,EAAIrP,KAAOA,EACXqP,EAAIvP,MAAQE,EAAOkB,EACnBmO,EAAItP,OAASF,EAAMuD,EACnBiM,EAAInO,MAAQA,EACZmO,EAAIjM,OAASA,CACjB,CACA,SAASkrB,GAAWN,EAAOnN,EAAWqM,EAAQ7U,GAC1C,MAAMkW,EAAcrB,EAAOttB,QAC3B,IAAI,EAAEjQ,EAAE,EAAEE,GAAOgxB,EACjB,IAAK,MAAMsM,KAAUa,EAAM,CACvB,MAAM3e,EAAM8d,EAAO9d,IACbwI,EAAQQ,EAAO8U,EAAOtV,QAAU,CAClCwG,MAAO,EACPmQ,OAAQ,EACRlyB,OAAQ,GAENA,EAAS6wB,EAAOsB,YAAc5W,EAAMvb,QAAU,EACpD,GAAI6wB,EAAO1H,WAAY,CACnB,MAAMvkB,EAAQ2f,EAAUrd,EAAIlH,EACtB8G,EAASyU,EAAM3mB,MAAQme,EAAIjM,OAC7BvS,EAAQgnB,EAAMpkB,SACd5D,EAAIgoB,EAAMpkB,OAEV4b,EAAI+e,SACJC,GAAWhf,EAAKkf,EAAYvuB,KAAMnQ,EAAGq9B,EAAOI,WAAaiB,EAAYzuB,MAAQyuB,EAAYvuB,KAAMoD,GAE/FirB,GAAWhf,EAAKwR,EAAU7gB,KAAO6X,EAAM2W,OAAQ3+B,EAAGqR,EAAOkC,GAE7DyU,EAAMpkB,MAAQ5D,EACdgoB,EAAM2W,QAAUttB,EAChBrR,EAAIwf,EAAItP,MACZ,KAAO,CACH,MAAMqD,EAASyd,EAAUzZ,EAAI9K,EACvB4E,EAAQ2W,EAAM3mB,MAAQme,EAAInO,MAC5BrQ,EAAQgnB,EAAMpkB,SACd9D,EAAIkoB,EAAMpkB,OAEV4b,EAAI+e,SACJC,GAAWhf,EAAK1f,EAAG4+B,EAAY1uB,IAAKqB,EAAOgsB,EAAOM,YAAce,EAAYxuB,OAASwuB,EAAY1uB,KAEjGwuB,GAAWhf,EAAK1f,EAAGkxB,EAAUhhB,IAAMgY,EAAM2W,OAAQttB,EAAOkC,GAE5DyU,EAAMpkB,MAAQ9D,EACdkoB,EAAM2W,QAAUprB,EAChBzT,EAAI0f,EAAIvP,KACZ,CACJ,CACA+gB,EAAUlxB,EAAIA,EACdkxB,EAAUhxB,EAAIA,CAClB,CACA,IAAI6+B,GAAU,CACb,MAAAC,CAAQ70B,EAAO3I,GACH2I,EAAMk0B,QACPl0B,EAAMk0B,MAAQ,IAElB78B,EAAKi9B,SAAWj9B,EAAKi9B,WAAY,EACjCj9B,EAAKw4B,SAAWx4B,EAAKw4B,UAAY,MACjCx4B,EAAKmL,OAASnL,EAAKmL,QAAU,EAC7BnL,EAAKy9B,QAAUz9B,EAAKy9B,SAAW,WAC3B,MAAO,CACH,CACIC,EAAG,EACH,IAAA3b,CAAM2N,GACF1vB,EAAK+hB,KAAK2N,EACd,GAGZ,EACA/mB,EAAMk0B,MAAM19B,KAAKa,EACrB,EACH,SAAA29B,CAAWh1B,EAAOi1B,GACX,MAAM5gC,EAAQ2L,EAAMk0B,MAAQl0B,EAAMk0B,MAAMn/B,QAAQkgC,IAAe,GAChD,IAAX5gC,GACA2L,EAAMk0B,MAAMp5B,OAAOzG,EAAO,EAElC,EACH,SAAAooB,CAAWzc,EAAO3I,EAAMpC,GACjBoC,EAAKi9B,SAAWr/B,EAAQq/B,SACxBj9B,EAAKw4B,SAAW56B,EAAQ46B,SACxBx4B,EAAKmL,OAASvN,EAAQuN,MAC1B,EACH,MAAAoZ,CAAQ5b,EAAOoH,EAAOkC,EAAQ4rB,GACvB,IAAKl1B,EACD,OAEJ,MAAM8F,EAAU2I,GAAUzO,EAAM/K,QAAQo+B,OAAOvtB,SACzCqvB,EAAiB39B,KAAKiC,IAAI2N,EAAQtB,EAAQsB,MAAO,GACjDguB,EAAkB59B,KAAKiC,IAAI6P,EAASxD,EAAQwD,OAAQ,GACpD4qB,EAvMd,SAA0BA,GACtB,MAAMmB,EAxDV,SAAmBnB,GACf,MAAMmB,EAAc,GACpB,IAAI3hC,EAAGO,EAAMshB,EAAKT,EAAKiJ,EAAO4W,EAC9B,IAAIjhC,EAAI,EAAGO,GAAQigC,GAAS,IAAIrgC,OAAQH,EAAIO,IAAQP,EAChD6hB,EAAM2e,EAAMxgC,KACTm8B,SAAU/a,EAAM7f,SAAW8oB,QAAQ4W,cAAa,IAAUpf,GAC7D8f,EAAY7+B,KAAK,CACbnC,MAAOX,EACP6hB,MACAT,MACA6W,WAAYpW,EAAIuX,eAChBtqB,OAAQ+S,EAAI/S,OACZub,MAAOA,GAASjJ,EAAMiJ,EACtB4W,gBAGR,OAAOU,CACX,CAuCwBC,CAAUpB,GACxBI,EAAWxB,GAAauC,EAAY7iB,QAAQ+iB,GAAOA,EAAKhgB,IAAI+e,YAAW,GACvEpuB,EAAO4sB,GAAaF,GAAiByC,EAAa,SAAS,GAC3DrvB,EAAQ8sB,GAAaF,GAAiByC,EAAa,UACnDtvB,EAAM+sB,GAAaF,GAAiByC,EAAa,QAAQ,GACzDpvB,EAAS6sB,GAAaF,GAAiByC,EAAa,WACpDG,EAAmB3C,GAA4BwC,EAAa,KAC5DI,EAAiB5C,GAA4BwC,EAAa,KAChE,MAAO,CACHf,WACAoB,WAAYxvB,EAAKkkB,OAAOrkB,GACxB4vB,eAAgB3vB,EAAMokB,OAAOqL,GAAgBrL,OAAOnkB,GAAQmkB,OAAOoL,GACnEzO,UAAW6L,GAAiByC,EAAa,aACzCO,SAAU1vB,EAAKkkB,OAAOpkB,GAAOokB,OAAOqL,GACpC9J,WAAY5lB,EAAIqkB,OAAOnkB,GAAQmkB,OAAOoL,GAE9C,CAsLsBK,CAAiB71B,EAAMk0B,OAC/B4B,EAAgB5B,EAAM0B,SACtBG,EAAkB7B,EAAMvI,WAC9Bp4B,EAAKyM,EAAMk0B,OAAQ3e,IACiB,mBAArBA,EAAIygB,cACXzgB,EAAIygB,cACR,IAEJ,MAAMC,EAA0BH,EAAc/b,QAAO,CAACmc,EAAOX,IAAOA,EAAKhgB,IAAItgB,UAAwC,IAA7BsgC,EAAKhgB,IAAItgB,QAAQkR,QAAoB+vB,EAAQA,EAAQ,GAAG,IAAM,EAChJ9C,EAAS9gC,OAAOs1B,OAAO,CACzB4L,WAAYpsB,EACZssB,YAAapqB,EACbxD,UACAqvB,iBACAC,kBACAe,aAAchB,EAAiB,EAAIc,EACnCG,cAAehB,EAAkB,IAE/BpC,EAAa1gC,OAAOmO,OAAO,CAAC,EAAGqF,GACrCmtB,GAAiBD,EAAYvkB,GAAUymB,IACvC,MAAMnO,EAAYz0B,OAAOmO,OAAO,CAC5BuyB,aACAtpB,EAAGyrB,EACH7nB,EAAG8nB,EACHv/B,EAAGiQ,EAAQI,KACXnQ,EAAG+P,EAAQC,KACZD,GACGyY,EArPb,SAAuBqW,EAASxB,GAC7B,MAAM7U,EAnBV,SAAqBqW,GACjB,MAAMrW,EAAS,CAAC,EAChB,IAAK,MAAMgX,KAAQX,EAAQ,CACvB,MAAM,MAAE7W,EAAM,IAAEjJ,EAAI,YAAE6f,GAAiBY,EACvC,IAAKxX,IAAU4U,GAAiB9xB,SAASiU,GACrC,SAEJ,MAAMnD,EAAS4M,EAAOR,KAAWQ,EAAOR,GAAS,CAC7CwG,MAAO,EACPmQ,OAAQ,EACRlyB,OAAQ,EACRpL,KAAM,IAEVua,EAAO4S,QACP5S,EAAOnP,QAAUmyB,CACrB,CACA,OAAOpW,CACX,CAEmB8X,CAAYzB,IACrB,aAAEuB,EAAa,cAAEC,GAAmBhD,EAC1C,IAAI1/B,EAAGO,EAAMo/B,EACb,IAAI3/B,EAAI,EAAGO,EAAO2gC,EAAQ/gC,OAAQH,EAAIO,IAAQP,EAAE,CAC5C2/B,EAASuB,EAAQlhC,GACjB,MAAM,SAAE4gC,GAAcjB,EAAO9d,IACvBwI,EAAQQ,EAAO8U,EAAOtV,OACtBrD,EAASqD,GAASsV,EAAOsB,YAAc5W,EAAMvb,OAC/C6wB,EAAO1H,YACP0H,EAAOjsB,MAAQsT,EAASA,EAASyb,EAAe7B,GAAYlB,EAAO+B,eACnE9B,EAAO/pB,OAAS8sB,IAEhB/C,EAAOjsB,MAAQ+uB,EACf9C,EAAO/pB,OAASoR,EAASA,EAAS0b,EAAgB9B,GAAYlB,EAAOgC,gBAE7E,CACA,OAAO7W,CACX,CAmOuB+X,CAAcR,EAAc1L,OAAO2L,GAAkB3C,GACpEa,GAASC,EAAMI,SAAUvN,EAAWqM,EAAQ7U,GAC5C0V,GAAS6B,EAAe/O,EAAWqM,EAAQ7U,GACvC0V,GAAS8B,EAAiBhP,EAAWqM,EAAQ7U,IAC7C0V,GAAS6B,EAAe/O,EAAWqM,EAAQ7U,GA3KvD,SAA0BwI,GACtB,MAAMiM,EAAajM,EAAUiM,WAC7B,SAASuD,EAAUzhB,GACf,MAAM0hB,EAASh/B,KAAKiC,IAAIu5B,EAAWle,GAAOiS,EAAUjS,GAAM,GAE1D,OADAiS,EAAUjS,IAAQ0hB,EACXA,CACX,CACAzP,EAAUhxB,GAAKwgC,EAAU,OACzBxP,EAAUlxB,GAAK0gC,EAAU,QACzBA,EAAU,SACVA,EAAU,SACd,CAkKQE,CAAiB1P,GACjByN,GAAWN,EAAMwB,WAAY3O,EAAWqM,EAAQ7U,GAChDwI,EAAUlxB,GAAKkxB,EAAUrd,EACzBqd,EAAUhxB,GAAKgxB,EAAUzZ,EACzBknB,GAAWN,EAAMyB,eAAgB5O,EAAWqM,EAAQ7U,GACpDve,EAAM+mB,UAAY,CACd7gB,KAAM6gB,EAAU7gB,KAChBH,IAAKghB,EAAUhhB,IACfC,MAAO+gB,EAAU7gB,KAAO6gB,EAAUrd,EAClCzD,OAAQ8gB,EAAUhhB,IAAMghB,EAAUzZ,EAClChE,OAAQyd,EAAUzZ,EAClBlG,MAAO2f,EAAUrd,GAErBnW,EAAK2gC,EAAMnN,WAAYsM,IACnB,MAAM9d,EAAM8d,EAAO9d,IACnBjjB,OAAOmO,OAAO8U,EAAKvV,EAAM+mB,WACzBxR,EAAIqG,OAAOmL,EAAUrd,EAAGqd,EAAUzZ,EAAG,CACjCpH,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GACV,GAEV,GAGJ,MAAMywB,GACL,cAAAC,CAAe1tB,EAAQ2tB,GAAc,CACrC,cAAAC,CAAe90B,GACR,OAAO,CACX,CACH,gBAAA2U,CAAiB1W,EAAO3N,EAAMqI,GAAW,CACzC,mBAAAic,CAAoB3W,EAAO3N,EAAMqI,GAAW,CAC5C,mBAAAuH,GACO,OAAO,CACX,CACH,cAAA60B,CAAexiB,EAASlN,EAAOkC,EAAQstB,GAGhC,OAFAxvB,EAAQ5P,KAAKiC,IAAI,EAAG2N,GAASkN,EAAQlN,OACrCkC,EAASA,GAAUgL,EAAQhL,OACpB,CACHlC,QACAkC,OAAQ9R,KAAKiC,IAAI,EAAGm9B,EAAcp/B,KAAKmB,MAAMyO,EAAQwvB,GAAettB,GAE5E,CACH,UAAAytB,CAAW9tB,GACJ,OAAO,CACX,CACH,YAAA+tB,CAAa1a,GACV,EAGJ,MAAM2a,WAAsBP,GACxB,cAAAC,CAAet/B,GACX,OAAOA,GAAQA,EAAK6R,YAAc7R,EAAK6R,WAAW,OAAS,IAC/D,CACA,YAAA8tB,CAAa1a,GACTA,EAAOrnB,QAAQwM,WAAY,CAC/B,EAGJ,MAAMy1B,GAAc,WACbC,GAAc,CACjBC,WAAY,YACZC,UAAW,YACXC,SAAU,UACVC,aAAc,aACdC,YAAa,YACbC,YAAa,YACbC,UAAW,UACXC,aAAc,WACdC,WAAY,YAEVC,GAAiB3lC,GAAkB,OAAVA,GAA4B,KAAVA,EAoC3C4lC,KAAuBvhB,IAA+B,CACxDE,SAAS,GAOb,SAASshB,GAAe/3B,EAAO3N,EAAMqI,GAC7BsF,GAASA,EAAMiJ,QACfjJ,EAAMiJ,OAAO0N,oBAAoBtkB,EAAMqI,EAAUo9B,GAEzD,CAYA,SAASE,GAAiBC,EAAUhvB,GAChC,IAAK,MAAM/H,KAAQ+2B,EACf,GAAI/2B,IAAS+H,GAAU/H,EAAKg3B,SAASjvB,GACjC,OAAO,CAGnB,CACA,SAASkvB,GAAqBn4B,EAAO3N,EAAMqI,GACvC,MAAMuO,EAASjJ,EAAMiJ,OACfmvB,EAAW,IAAIC,kBAAkBC,IACnC,IAAIC,GAAU,EACd,IAAK,MAAMzN,KAASwN,EAChBC,EAAUA,GAAWP,GAAiBlN,EAAM0N,WAAYvvB,GACxDsvB,EAAUA,IAAYP,GAAiBlN,EAAM2N,aAAcxvB,GAE3DsvB,GACA79B,GACJ,IAMJ,OAJA09B,EAASM,QAAQ/kB,SAAU,CACvBglB,WAAW,EACXC,SAAS,IAENR,CACX,CACA,SAASS,GAAqB74B,EAAO3N,EAAMqI,GACvC,MAAMuO,EAASjJ,EAAMiJ,OACfmvB,EAAW,IAAIC,kBAAkBC,IACnC,IAAIC,GAAU,EACd,IAAK,MAAMzN,KAASwN,EAChBC,EAAUA,GAAWP,GAAiBlN,EAAM2N,aAAcxvB,GAC1DsvB,EAAUA,IAAYP,GAAiBlN,EAAM0N,WAAYvvB,GAEzDsvB,GACA79B,GACJ,IAMJ,OAJA09B,EAASM,QAAQ/kB,SAAU,CACvBglB,WAAW,EACXC,SAAS,IAENR,CACX,CACA,MAAMU,GAAqB,IAAIl6B,IAC/B,IAAIm6B,GAAsB,EAC1B,SAASC,KACL,MAAMC,EAAMh+B,OAAO6G,iBACfm3B,IAAQF,KAGZA,GAAsBE,EACtBH,GAAmB/9B,SAAQ,CAACyK,EAAQxF,KAC5BA,EAAM8I,0BAA4BmwB,GAClCzzB,GACJ,IAER,CAaA,SAAS0zB,GAAqBl5B,EAAO3N,EAAMqI,GACvC,MAAMuO,EAASjJ,EAAMiJ,OACfkwB,EAAYlwB,GAAU2K,GAAe3K,GAC3C,IAAKkwB,EACD,OAEJ,MAAM3zB,EAASrK,GAAU,CAACiM,EAAOkC,KAC7B,MAAMI,EAAIyvB,EAAUC,YACpB1+B,EAAS0M,EAAOkC,GACZI,EAAIyvB,EAAUC,aACd1+B,GACJ,GACDO,QACGm9B,EAAW,IAAIiB,gBAAgBf,IACjC,MAAMxN,EAAQwN,EAAQ,GAChBlxB,EAAQ0jB,EAAMwO,YAAYlyB,MAC1BkC,EAASwhB,EAAMwO,YAAYhwB,OACnB,IAAVlC,GAA0B,IAAXkC,GAGnB9D,EAAO4B,EAAOkC,EAAO,IAIzB,OAFA8uB,EAASM,QAAQS,GAlCrB,SAAuCn5B,EAAOwF,GACrCszB,GAAmB1hC,MACpB6D,OAAOyb,iBAAiB,SAAUsiB,IAEtCF,GAAmBv5B,IAAIS,EAAOwF,EAClC,CA8BI+zB,CAA8Bv5B,EAAOwF,GAC9B4yB,CACX,CACA,SAASoB,GAAgBx5B,EAAO3N,EAAM+lC,GAC9BA,GACAA,EAASqB,aAEA,WAATpnC,GApCR,SAAyC2N,GACrC84B,GAAmB1mB,OAAOpS,GACrB84B,GAAmB1hC,MACpB6D,OAAO0b,oBAAoB,SAAUqiB,GAE7C,CAgCQU,CAAgC15B,EAExC,CACA,SAAS25B,GAAqB35B,EAAO3N,EAAMqI,GACvC,MAAMuO,EAASjJ,EAAMiJ,OACfuH,EAAQrV,GAAW+Z,IACH,OAAdlV,EAAM2C,KACNjI,EAtHZ,SAAyBwa,EAAOlV,GAC5B,MAAM3N,EAAO8kC,GAAYjiB,EAAM7iB,OAAS6iB,EAAM7iB,MACxC,EAAEwD,EAAE,EAAEE,GAAOkf,GAAoBC,EAAOlV,GAC9C,MAAO,CACH3N,OACA2N,QACA45B,OAAQ1kB,EACRrf,OAAS6L,IAAN7L,EAAkBA,EAAI,KACzBE,OAAS2L,IAAN3L,EAAkBA,EAAI,KAEjC,CA4GqB8jC,CAAgB3kB,EAAOlV,GACpC,GACDA,GAEH,OApIJ,SAAqBkB,EAAM7O,EAAMqI,GACzBwG,GACAA,EAAKwV,iBAAiBrkB,EAAMqI,EAAUo9B,GAE9C,CA+HIgC,CAAY7wB,EAAQ5W,EAAMme,GACnBA,CACX,CACC,MAAMupB,WAAoBrD,GAC1B,cAAAC,CAAe1tB,EAAQ2tB,GAChB,MAAM70B,EAAUkH,GAAUA,EAAOC,YAAcD,EAAOC,WAAW,MACjE,OAAInH,GAAWA,EAAQkH,SAAWA,GA/KzC,SAAoBA,EAAQ2tB,GACzB,MAAMt0B,EAAQ2G,EAAO3G,MACf03B,EAAe/wB,EAAOgxB,aAAa,UACnCC,EAAcjxB,EAAOgxB,aAAa,SAcxC,GAbAhxB,EAAOiuB,IAAe,CAClBve,QAAS,CACLrP,OAAQ0wB,EACR5yB,MAAO8yB,EACP53B,MAAO,CACH6D,QAAS7D,EAAM6D,QACfmD,OAAQhH,EAAMgH,OACdlC,MAAO9E,EAAM8E,SAIzB9E,EAAM6D,QAAU7D,EAAM6D,SAAW,QACjC7D,EAAM8S,UAAY9S,EAAM8S,WAAa,aACjCyiB,GAAcqC,GAAc,CAC5B,MAAMC,EAAevjB,GAAa3N,EAAQ,cACrBvH,IAAjBy4B,IACAlxB,EAAO7B,MAAQ+yB,EAEvB,CACA,GAAItC,GAAcmC,GACd,GAA4B,KAAxB/wB,EAAO3G,MAAMgH,OACbL,EAAOK,OAASL,EAAO7B,OAASwvB,GAAe,OAC5C,CACH,MAAMwD,EAAgBxjB,GAAa3N,EAAQ,eACrBvH,IAAlB04B,IACAnxB,EAAOK,OAAS8wB,EAExB,CAGR,CA8IYC,CAAWpxB,EAAQ2tB,GACZ70B,GAEJ,IACX,CACH,cAAA80B,CAAe90B,GACR,MAAMkH,EAASlH,EAAQkH,OACvB,IAAKA,EAAOiuB,IACR,OAAO,EAEX,MAAMve,EAAU1P,EAAOiuB,IAAave,QACpC,CACI,SACA,SACF5d,SAASuT,IACP,MAAMpc,EAAQymB,EAAQrK,GAClBrc,EAAcC,GACd+W,EAAOqxB,gBAAgBhsB,GAEvBrF,EAAOsxB,aAAajsB,EAAMpc,EAC9B,IAEJ,MAAMoQ,EAAQqW,EAAQrW,OAAS,CAAC,EAMhC,OALAhQ,OAAOsB,KAAK0O,GAAOvH,SAASjG,IACxBmU,EAAO3G,MAAMxN,GAAOwN,EAAMxN,EAAI,IAElCmU,EAAO7B,MAAQ6B,EAAO7B,aACf6B,EAAOiuB,KACP,CACX,CACH,gBAAAxgB,CAAiB1W,EAAO3N,EAAMqI,GACvBqF,KAAK4W,oBAAoB3W,EAAO3N,GAChC,MAAMmoC,EAAUx6B,EAAMy6B,WAAaz6B,EAAMy6B,SAAW,CAAC,GAM/C3K,EALW,CACb4K,OAAQvC,GACRwC,OAAQ9B,GACRrzB,OAAQ0zB,IAEa7mC,IAASsnC,GAClCa,EAAQnoC,GAAQy9B,EAAQ9vB,EAAO3N,EAAMqI,EACzC,CACH,mBAAAic,CAAoB3W,EAAO3N,GACpB,MAAMmoC,EAAUx6B,EAAMy6B,WAAaz6B,EAAMy6B,SAAW,CAAC,GAC/CjqB,EAAQgqB,EAAQnoC,GACjBme,KAGY,CACbkqB,OAAQlB,GACRmB,OAAQnB,GACRh0B,OAAQg0B,IAEannC,IAAS0lC,IAC1B/3B,EAAO3N,EAAMme,GACrBgqB,EAAQnoC,QAAQqP,EACpB,CACA,mBAAAO,GACI,OAAOhH,OAAO6G,gBAClB,CACH,cAAAg1B,CAAe7tB,EAAQ7B,EAAOkC,EAAQstB,GAC/B,ODrqCR,SAAwB3tB,EAAQ2xB,EAASC,EAAUjE,GAC/C,MAAMt0B,EAAQ+R,GAAiBpL,GACzB6xB,EAAUpmB,GAAmBpS,EAAO,UACpC6K,EAAW6G,GAAc1R,EAAM6K,SAAUlE,EAAQ,gBAAkBvR,EACnEqjC,EAAY/mB,GAAc1R,EAAMy4B,UAAW9xB,EAAQ,iBAAmBvR,EACtEsjC,EAhCV,SAA0B/xB,EAAQ7B,EAAOkC,GACrC,IAAI6D,EAAU4tB,EACd,QAAcr5B,IAAV0F,QAAkC1F,IAAX4H,EAAsB,CAC7C,MAAM6vB,EAAYlwB,GAAU2K,GAAe3K,GAC3C,GAAKkwB,EAGE,CACH,MAAMruB,EAAOquB,EAAUxjB,wBACjBslB,EAAiB5mB,GAAiB8kB,GAClC+B,EAAkBxmB,GAAmBumB,EAAgB,SAAU,SAC/DE,EAAmBzmB,GAAmBumB,EAAgB,WAC5D7zB,EAAQ0D,EAAK1D,MAAQ+zB,EAAiB/zB,MAAQ8zB,EAAgB9zB,MAC9DkC,EAASwB,EAAKxB,OAAS6xB,EAAiB7xB,OAAS4xB,EAAgB5xB,OACjE6D,EAAW6G,GAAcinB,EAAe9tB,SAAUgsB,EAAW,eAC7D4B,EAAY/mB,GAAcinB,EAAeF,UAAW5B,EAAW,eACnE,MAXI/xB,EAAQ6B,EAAOmwB,YACf9vB,EAASL,EAAOmyB,YAWxB,CACA,MAAO,CACHh0B,QACAkC,SACA6D,SAAUA,GAAYzV,EACtBqjC,UAAWA,GAAarjC,EAEhC,CAQ0B2jC,CAAiBpyB,EAAQ2xB,EAASC,GACxD,IAAI,MAAEzzB,EAAM,OAAEkC,GAAY0xB,EAC1B,GAAwB,gBAApB14B,EAAM8S,UAA6B,CACnC,MAAME,EAAUZ,GAAmBpS,EAAO,SAAU,SAC9C+S,EAAWX,GAAmBpS,EAAO,WAC3C8E,GAASiO,EAASjO,MAAQkO,EAAQlO,MAClCkC,GAAU+L,EAAS/L,OAASgM,EAAQhM,MACxC,CAeA,OAdAlC,EAAQ5P,KAAKiC,IAAI,EAAG2N,EAAQ0zB,EAAQ1zB,OACpCkC,EAAS9R,KAAKiC,IAAI,EAAGm9B,EAAcxvB,EAAQwvB,EAActtB,EAASwxB,EAAQxxB,QAC1ElC,EAAQ2O,GAAOve,KAAKgC,IAAI4N,EAAO+F,EAAU6tB,EAAc7tB,WACvD7D,EAASyM,GAAOve,KAAKgC,IAAI8P,EAAQyxB,EAAWC,EAAcD,YACtD3zB,IAAUkC,IAGVA,EAASyM,GAAO3O,EAAQ,UAEO1F,IAAZk5B,QAAsCl5B,IAAbm5B,IAC1BjE,GAAeoE,EAAc1xB,QAAUA,EAAS0xB,EAAc1xB,SAChFA,EAAS0xB,EAAc1xB,OACvBlC,EAAQ2O,GAAOve,KAAKmB,MAAM2Q,EAASstB,KAEhC,CACHxvB,QACAkC,SAER,CCsoCewtB,CAAe7tB,EAAQ7B,EAAOkC,EAAQstB,EACjD,CACH,UAAAG,CAAW9tB,GACJ,MAAMkwB,EAAYlwB,GAAU2K,GAAe3K,GAC3C,SAAUkwB,IAAaA,EAAUmC,YACrC,EAUJ,MAAMC,GACFhb,gBAAkB,CAAC,EACnBA,0BAAuB7e,EACvB7L,EACAE,EACAwP,QAAS,EACTtQ,QACAgoB,YACA,eAAAue,CAAgBrL,GACZ,MAAM,EAAEt6B,EAAE,EAAEE,GAAOgK,KAAKsxB,SAAS,CAC7B,IACA,KACDlB,GACH,MAAO,CACHt6B,IACAE,IAER,CACA,QAAA0lC,GACI,OAAO5iC,EAASkH,KAAKlK,IAAMgD,EAASkH,KAAKhK,EAC7C,CACA,QAAAs7B,CAASnjB,EAAOwtB,GACZ,MAAMnjB,EAAQxY,KAAKkd,YACnB,IAAKye,IAAUnjB,EAEX,OAAOxY,KAEX,MAAMoO,EAAM,CAAC,EAIb,OAHAD,EAAMnT,SAASuT,IACXH,EAAIG,GAAQiK,EAAMjK,IAASiK,EAAMjK,GAAM/I,SAAWgT,EAAMjK,GAAMoN,IAAM3b,KAAKuO,EAAK,IAE3EH,CACX,EA2EH,SAAS8hB,GAAKnwB,EAAO67B,EAAUC,EAASC,EAAYC,GACjD,MAAMniC,EAAQ1G,EAAe4oC,EAAY,GACnCjiC,EAAMpC,KAAKgC,IAAIvG,EAAe6oC,EAAUh8B,EAAMjM,QAASiM,EAAMjM,QACnE,IACIA,EAAQH,EAAGq7B,EADXxK,EAAQ,EAQZ,IANAqX,EAAUpkC,KAAKukC,KAAKH,GAChBE,IACAjoC,EAASioC,EAAWD,EACpBD,EAAU/nC,EAAS2D,KAAKmB,MAAM9E,EAAS+nC,IAE3C7M,EAAOp1B,EACDo1B,EAAO,GACTxK,IACAwK,EAAOv3B,KAAKgB,MAAMmB,EAAQ4qB,EAAQqX,GAEtC,IAAIloC,EAAI8D,KAAKiC,IAAIE,EAAO,GAAIjG,EAAIkG,EAAKlG,IAC7BA,IAAMq7B,IACN4M,EAASnlC,KAAKsJ,EAAMpM,IACpB6wB,IACAwK,EAAOv3B,KAAKgB,MAAMmB,EAAQ4qB,EAAQqX,GAG9C,CAeA,MACMI,GAAiB,CAACv4B,EAAOgoB,EAAMrlB,IAAkB,QAATqlB,GAA2B,SAATA,EAAkBhoB,EAAMgoB,GAAQrlB,EAAS3C,EAAMgoB,GAAQrlB,EACjH61B,GAAgB,CAACC,EAAaC,IAAgB3kC,KAAKgC,IAAI2iC,GAAiBD,EAAaA,GAC1F,SAASE,GAAO7pB,EAAK8pB,GAClB,MAAMxnB,EAAS,GACTynB,EAAY/pB,EAAI1e,OAASwoC,EACzB1oC,EAAM4e,EAAI1e,OAChB,IAAIH,EAAI,EACR,KAAMA,EAAIC,EAAKD,GAAK4oC,EAChBznB,EAAOre,KAAK+b,EAAI/a,KAAKmB,MAAMjF,KAE/B,OAAOmhB,CACX,CACC,SAAS0nB,GAAoB94B,EAAOpP,EAAOmoC,GACxC,MAAM3oC,EAAS4P,EAAM3D,MAAMjM,OACrB4oC,EAAajlC,KAAKgC,IAAInF,EAAOR,EAAS,GACtC8F,EAAQ8J,EAAMqqB,YACdl0B,EAAM6J,EAAMsqB,UACZ51B,EAAU,KAChB,IACIiO,EADAs2B,EAAYj5B,EAAMmnB,gBAAgB6R,GAEtC,KAAID,IAEIp2B,EADW,IAAXvS,EACS2D,KAAKiC,IAAIijC,EAAY/iC,EAAOC,EAAM8iC,GAC1B,IAAVroC,GACGoP,EAAMmnB,gBAAgB,GAAK8R,GAAa,GAExCA,EAAYj5B,EAAMmnB,gBAAgB6R,EAAa,IAAM,EAEnEC,GAAaD,EAAapoC,EAAQ+R,GAAUA,EACxCs2B,EAAY/iC,EAAQxB,GAAWukC,EAAY9iC,EAAMzB,IAIzD,OAAOukC,CACX,CAcC,SAASC,GAAkB1nC,GACxB,OAAOA,EAAQ2R,UAAY3R,EAAQ4R,WAAa,CACpD,CACC,SAAS+1B,GAAe3nC,EAAS0Z,GAC9B,IAAK1Z,EAAQkR,QACT,OAAO,EAEX,MAAM/D,EAAOsM,GAAOzZ,EAAQmN,KAAMuM,GAC5B7I,EAAU2I,GAAUxZ,EAAQ6Q,SAElC,OADc3T,EAAQ8C,EAAQqS,MAAQrS,EAAQqS,KAAKzT,OAAS,GAC7CuO,EAAKG,WAAauD,EAAQwD,MAC7C,CAcA,SAASuzB,GAAWthC,EAAOs0B,EAAUp8B,GAChC,IAAI0a,EAAM7S,EAAmBC,GAI9B,OAHI9H,GAAwB,UAAbo8B,IAAyBp8B,GAAwB,UAAbo8B,KAC/C1hB,EA7Ea,CAAC5S,GAAkB,SAAVA,EAAmB,QAAoB,UAAVA,EAAoB,OAASA,EA6E1EuhC,CAAa3uB,IAEhBA,CACX,CAwCA,MAAM4uB,WAAcxB,GAChB,WAAAj6B,CAAY2Z,GACR0R,QACC5sB,KAAK/N,GAAKipB,EAAIjpB,GACd+N,KAAK1N,KAAO4oB,EAAI5oB,KAChB0N,KAAK9K,aAAUyM,EACf3B,KAAK4C,IAAMsY,EAAItY,IACf5C,KAAKC,MAAQib,EAAIjb,MACjBD,KAAKgG,SAAMrE,EACX3B,KAAKkG,YAASvE,EACd3B,KAAKmG,UAAOxE,EACZ3B,KAAKiG,WAAQtE,EACb3B,KAAKqH,WAAQ1F,EACb3B,KAAKuJ,YAAS5H,EACf3B,KAAKi9B,SAAW,CACZ92B,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GAEXlG,KAAKoN,cAAWzL,EAChB3B,KAAKg7B,eAAYr5B,EACjB3B,KAAKk9B,gBAAav7B,EAClB3B,KAAKm9B,mBAAgBx7B,EACrB3B,KAAKo9B,iBAAcz7B,EACnB3B,KAAKq9B,kBAAe17B,EACpB3B,KAAKuf,UAAO5d,EACZ3B,KAAKs9B,mBAAgB37B,EACtB3B,KAAKvG,SAAMkI,EACX3B,KAAKtG,SAAMiI,EACX3B,KAAKu9B,YAAS57B,EACb3B,KAAKD,MAAQ,GACbC,KAAKw9B,eAAiB,KACtBx9B,KAAKy9B,YAAc,KACnBz9B,KAAK09B,YAAc,KACpB19B,KAAK0qB,QAAU,EACf1qB,KAAK29B,WAAa,EAClB39B,KAAK49B,kBAAoB,CAAC,EACzB59B,KAAK+tB,iBAAcpsB,EACnB3B,KAAKguB,eAAYrsB,EAClB3B,KAAK2vB,gBAAiB,EACtB3vB,KAAK69B,cAAWl8B,EAChB3B,KAAK89B,cAAWn8B,EAChB3B,KAAK+9B,mBAAgBp8B,EACrB3B,KAAKg+B,mBAAgBr8B,EACrB3B,KAAKi+B,aAAe,EACpBj+B,KAAKk+B,aAAe,EACpBl+B,KAAKkqB,OAAS,CAAC,EACflqB,KAAKm+B,mBAAoB,EACzBn+B,KAAKohB,cAAWzf,CACpB,CACH,IAAAy8B,CAAKlpC,GACE8K,KAAK9K,QAAUA,EAAQ4c,WAAW9R,KAAKmJ,cACvCnJ,KAAKuf,KAAOrqB,EAAQqqB,KACpBvf,KAAK89B,SAAW99B,KAAKukB,MAAMrvB,EAAQuE,KACnCuG,KAAK69B,SAAW79B,KAAKukB,MAAMrvB,EAAQwE,KACnCsG,KAAKg+B,cAAgBh+B,KAAKukB,MAAMrvB,EAAQmpC,cACxCr+B,KAAK+9B,cAAgB/9B,KAAKukB,MAAMrvB,EAAQopC,aAC5C,CACH,KAAA/Z,CAAM6C,EAAK9yB,GACJ,OAAO8yB,CACX,CACH,aAAAhB,GACO,IAAI,SAAE0X,EAAS,SAAED,EAAS,cAAEG,EAAc,cAAED,GAAmB/9B,KAK/D,OAJA89B,EAAW9qC,EAAgB8qC,EAAUhrC,OAAO8E,mBAC5CimC,EAAW7qC,EAAgB6qC,EAAU/qC,OAAOizB,mBAC5CiY,EAAgBhrC,EAAgBgrC,EAAelrC,OAAO8E,mBACtDmmC,EAAgB/qC,EAAgB+qC,EAAejrC,OAAOizB,mBAC/C,CACHtsB,IAAKzG,EAAgB8qC,EAAUE,GAC/BtkC,IAAK1G,EAAgB6qC,EAAUE,GAC/B7X,WAAYrzB,EAAeirC,GAC3B3X,WAAYtzB,EAAegrC,GAEnC,CACH,SAAAnY,CAAUC,GACH,IACIptB,GADA,IAAEkB,EAAI,IAAEC,EAAI,WAAEwsB,EAAW,WAAEC,GAAgBnmB,KAAKomB,gBAEpD,GAAIF,GAAcC,EACd,MAAO,CACH1sB,MACAC,OAGR,MAAM6kC,EAAQv+B,KAAK+e,0BACnB,IAAI,IAAIprB,EAAI,EAAGO,EAAOqqC,EAAMzqC,OAAQH,EAAIO,IAAQP,EAC5C4E,EAAQgmC,EAAM5qC,GAAGsrB,WAAWyG,UAAU1lB,KAAM2lB,GACvCO,IACDzsB,EAAMhC,KAAKgC,IAAIA,EAAKlB,EAAMkB,MAEzB0sB,IACDzsB,EAAMjC,KAAKiC,IAAIA,EAAKnB,EAAMmB,MAKlC,OAFAD,EAAM0sB,GAAc1sB,EAAMC,EAAMA,EAAMD,EACtCC,EAAMwsB,GAAczsB,EAAMC,EAAMD,EAAMC,EAC/B,CACHD,IAAKzG,EAAgByG,EAAKzG,EAAgB0G,EAAKD,IAC/CC,IAAK1G,EAAgB0G,EAAK1G,EAAgByG,EAAKC,IAEvD,CACH,UAAA65B,GACO,MAAO,CACHptB,KAAMnG,KAAKo9B,aAAe,EAC1Bp3B,IAAKhG,KAAKk9B,YAAc,EACxBj3B,MAAOjG,KAAKq9B,cAAgB,EAC5Bn3B,OAAQlG,KAAKm9B,eAAiB,EAEtC,CACH,QAAAqB,GACO,OAAOx+B,KAAKD,KAChB,CACH,SAAAklB,GACO,MAAM1c,EAAOvI,KAAKC,MAAMsI,KACxB,OAAOvI,KAAK9K,QAAQ8vB,SAAWhlB,KAAK+sB,eAAiBxkB,EAAKk2B,QAAUl2B,EAAKm2B,UAAYn2B,EAAKyc,QAAU,EACxG,CACH,aAAA2Z,CAAc3X,EAAYhnB,KAAKC,MAAM+mB,WAE9B,OADchnB,KAAKy9B,cAAgBz9B,KAAKy9B,YAAcz9B,KAAK4+B,mBAAmB5X,GAElF,CACA,YAAAiP,GACIj2B,KAAKkqB,OAAS,CAAC,EACflqB,KAAKm+B,mBAAoB,CAC7B,CACA,YAAAU,GACI1rC,EAAS6M,KAAK9K,QAAQ2pC,aAAc,CAChC7+B,MAER,CACH,MAAA6b,CAAOzO,EAAU4tB,EAAWD,GACrB,MAAM,YAAEz0B,EAAY,MAAEG,EAAQ1G,MAAO++B,GAAc9+B,KAAK9K,QAClD6pC,EAAaD,EAASC,WAC5B/+B,KAAK6+B,eACL7+B,KAAKoN,SAAWA,EAChBpN,KAAKg7B,UAAYA,EACjBh7B,KAAKi9B,SAAWlC,EAAUxoC,OAAOmO,OAAO,CACpCyF,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GACT60B,GACH/6B,KAAKD,MAAQ,KACbC,KAAK09B,YAAc,KACnB19B,KAAKw9B,eAAiB,KACtBx9B,KAAKy9B,YAAc,KACnBz9B,KAAKg/B,sBACLh/B,KAAKi/B,gBACLj/B,KAAKk/B,qBACLl/B,KAAK29B,WAAa39B,KAAK+sB,eAAiB/sB,KAAKqH,MAAQ0zB,EAAQ50B,KAAO40B,EAAQ90B,MAAQjG,KAAKuJ,OAASwxB,EAAQ/0B,IAAM+0B,EAAQ70B,OACnHlG,KAAKm+B,oBACNn+B,KAAKm/B,mBACLn/B,KAAKo/B,sBACLp/B,KAAKq/B,kBACLr/B,KAAKu9B,ODntEb,SAAmB+B,EAAQ74B,EAAOH,GAClC,MAAM,IAAE7M,EAAI,IAAEC,GAAS4lC,EACjB7I,GAxhDkB8I,GAwhDW7lC,EAAMD,GAAO,EAxhDK,iBAApCtH,EAwhDUsU,IAxhDsCtU,EAAMqE,SAAS,KAAOyC,WAAW9G,GAAS,IAAMotC,GAAaptC,GAyhDxHqtC,EAAW,CAACrtC,EAAOigB,IAAM9L,GAAyB,IAAVnU,EAAc,EAAIA,EAAQigB,EAzhDxD,IAACjgB,EAAOotC,EA0hDxB,MAAO,CACH9lC,IAAK+lC,EAAS/lC,GAAMhC,KAAKY,IAAIo+B,IAC7B/8B,IAAK8lC,EAAS9lC,EAAK+8B,GAE3B,CC2sE0BgJ,CAAUz/B,KAAMyG,EAAOH,GACrCtG,KAAKm+B,mBAAoB,GAE7Bn+B,KAAK0/B,mBACL1/B,KAAKD,MAAQC,KAAK2/B,cAAgB,GAClC3/B,KAAK4/B,kBACL,MAAMC,EAAkBd,EAAa/+B,KAAKD,MAAMjM,OAChDkM,KAAK8/B,sBAAsBD,EAAkBxD,GAAOr8B,KAAKD,MAAOg/B,GAAc/+B,KAAKD,OACnFC,KAAK0c,YACL1c,KAAK+/B,+BACL//B,KAAKggC,yBACLhgC,KAAKigC,8BACDnB,EAAS14B,UAAY04B,EAASj3B,UAAgC,SAApBi3B,EAAStqC,UACnDwL,KAAKD,MA3YjB,SAAkB2D,EAAO3D,GACrB,MAAM++B,EAAWp7B,EAAMxO,QAAQ6K,MACzBmgC,EAyBV,SAA2Bx8B,GACvB,MAAM2C,EAAS3C,EAAMxO,QAAQmR,OACvBS,EAAapD,EAAMy8B,YACnBC,EAAW18B,EAAMgnB,QAAU5jB,GAAcT,EAAS,EAAI,GACtDg6B,EAAW38B,EAAMi6B,WAAa72B,EACpC,OAAOrP,KAAKmB,MAAMnB,KAAKgC,IAAI2mC,EAAUC,GACzC,CA/B+BC,CAAkB58B,GACvC68B,EAAa9oC,KAAKgC,IAAIqlC,EAAS1C,eAAiB8D,EAAoBA,GACpEM,EAAe1B,EAAS72B,MAAMw4B,QA6CvC,SAAyB1gC,GACtB,MAAM+U,EAAS,GACf,IAAInhB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAO6L,EAAMjM,OAAQH,EAAIO,EAAMP,IAClCoM,EAAMpM,GAAGsU,OACT6M,EAAOre,KAAK9C,GAGpB,OAAOmhB,CACX,CAtDkD4rB,CAAgB3gC,GAAS,GACjE4gC,EAAkBH,EAAa1sC,OAC/B8sC,EAAQJ,EAAa,GACrBnmC,EAAOmmC,EAAaG,EAAkB,GACtC/E,EAAW,GACjB,GAAI+E,EAAkBJ,EAElB,OAgDP,SAAoBxgC,EAAO67B,EAAU4E,EAAc3E,GAChD,IAEIloC,EAFA6wB,EAAQ,EACRwK,EAAOwR,EAAa,GAGxB,IADA3E,EAAUpkC,KAAKukC,KAAKH,GAChBloC,EAAI,EAAGA,EAAIoM,EAAMjM,OAAQH,IACrBA,IAAMq7B,IACN4M,EAASnlC,KAAKsJ,EAAMpM,IACpB6wB,IACAwK,EAAOwR,EAAahc,EAAQqX,GAGxC,CA7DQgF,CAAW9gC,EAAO67B,EAAU4E,EAAcG,EAAkBJ,GACrD3E,EAEX,MAAMC,EAqBT,SAA0B2E,EAAczgC,EAAOwgC,GAC5C,MAAMO,EA4DT,SAAwBtuB,GACrB,MAAM5e,EAAM4e,EAAI1e,OAChB,IAAIH,EAAGotC,EACP,GAAIntC,EAAM,EACN,OAAO,EAEX,IAAImtC,EAAOvuB,EAAI,GAAI7e,EAAI,EAAGA,EAAIC,IAAOD,EACjC,GAAI6e,EAAI7e,GAAK6e,EAAI7e,EAAI,KAAOotC,EACxB,OAAO,EAGf,OAAOA,CACX,CAxE6BC,CAAeR,GAClC3E,EAAU97B,EAAMjM,OAASysC,EAC/B,IAAKO,EACD,OAAOrpC,KAAKiC,IAAImiC,EAAS,GAE7B,MAAMoF,EDjqGN,SAAoB9uC,GACpB,MAAM2iB,EAAS,GACTxX,EAAO7F,KAAK6F,KAAKnL,GACvB,IAAIwB,EACJ,IAAIA,EAAI,EAAGA,EAAI2J,EAAM3J,IACbxB,EAAQwB,GAAM,IACdmhB,EAAOre,KAAK9C,GACZmhB,EAAOre,KAAKtE,EAAQwB,IAO5B,OAJI2J,KAAiB,EAAPA,IACVwX,EAAOre,KAAK6G,GAEhBwX,EAAOyV,MAAK,CAACpzB,EAAGC,IAAID,EAAIC,IAAGqiB,MACpB3E,CACX,CCkpGoBosB,CAAWJ,GAC3B,IAAI,IAAIntC,EAAI,EAAGO,EAAO+sC,EAAQntC,OAAS,EAAGH,EAAIO,EAAMP,IAAI,CACpD,MAAMgnB,EAASsmB,EAAQttC,GACvB,GAAIgnB,EAASkhB,EACT,OAAOlhB,CAEf,CACA,OAAOljB,KAAKiC,IAAImiC,EAAS,EAC7B,CAnCoBsF,CAAiBX,EAAczgC,EAAOwgC,GACtD,GAAII,EAAkB,EAAG,CACrB,IAAIhtC,EAAGO,EACP,MAAMktC,EAAkBT,EAAkB,EAAIlpC,KAAKgB,OAAO4B,EAAOumC,IAAUD,EAAkB,IAAM,KAEnG,IADAzQ,GAAKnwB,EAAO67B,EAAUC,EAAS3pC,EAAckvC,GAAmB,EAAIR,EAAQQ,EAAiBR,GACzFjtC,EAAI,EAAGO,EAAOysC,EAAkB,EAAGhtC,EAAIO,EAAMP,IAC7Cu8B,GAAKnwB,EAAO67B,EAAUC,EAAS2E,EAAa7sC,GAAI6sC,EAAa7sC,EAAI,IAGrE,OADAu8B,GAAKnwB,EAAO67B,EAAUC,EAASxhC,EAAMnI,EAAckvC,GAAmBrhC,EAAMjM,OAASuG,EAAO+mC,GACrFxF,CACX,CAEA,OADA1L,GAAKnwB,EAAO67B,EAAUC,GACfD,CACX,CAiXyB/zB,CAAS7H,KAAMA,KAAKD,OACjCC,KAAK09B,YAAc,KACnB19B,KAAKqhC,iBAELxB,GACA7/B,KAAK8/B,sBAAsB9/B,KAAKD,OAEpCC,KAAKshC,YACLthC,KAAKuhC,MACLvhC,KAAKwhC,WACLxhC,KAAKyhC,aACT,CACH,SAAA/kB,GACO,IACI8R,EAAYE,EADZgT,EAAgB1hC,KAAK9K,QAAQxB,QAE7BsM,KAAK+sB,gBACLyB,EAAaxuB,KAAKmG,KAClBuoB,EAAW1uB,KAAKiG,QAEhBuoB,EAAaxuB,KAAKgG,IAClB0oB,EAAW1uB,KAAKkG,OAChBw7B,GAAiBA,GAErB1hC,KAAK+tB,YAAcS,EACnBxuB,KAAKguB,UAAYU,EACjB1uB,KAAK2vB,eAAiB+R,EACtB1hC,KAAK0qB,QAAUgE,EAAWF,EAC1BxuB,KAAK2hC,eAAiB3hC,KAAK9K,QAAQ0sC,aACvC,CACA,WAAAH,GACItuC,EAAS6M,KAAK9K,QAAQusC,YAAa,CAC/BzhC,MAER,CACA,mBAAAg/B,GACI7rC,EAAS6M,KAAK9K,QAAQ8pC,oBAAqB,CACvCh/B,MAER,CACA,aAAAi/B,GACQj/B,KAAK+sB,gBACL/sB,KAAKqH,MAAQrH,KAAKoN,SAClBpN,KAAKmG,KAAO,EACZnG,KAAKiG,MAAQjG,KAAKqH,QAElBrH,KAAKuJ,OAASvJ,KAAKg7B,UACnBh7B,KAAKgG,IAAM,EACXhG,KAAKkG,OAASlG,KAAKuJ,QAEvBvJ,KAAKo9B,YAAc,EACnBp9B,KAAKk9B,WAAa,EAClBl9B,KAAKq9B,aAAe,EACpBr9B,KAAKm9B,cAAgB,CACzB,CACA,kBAAA+B,GACI/rC,EAAS6M,KAAK9K,QAAQgqC,mBAAoB,CACtCl/B,MAER,CACA,UAAA6hC,CAAW59B,GACPjE,KAAKC,MAAM6hC,cAAc79B,EAAMjE,KAAKmJ,cACpChW,EAAS6M,KAAK9K,QAAQ+O,GAAO,CACzBjE,MAER,CACA,gBAAAm/B,GACIn/B,KAAK6hC,WAAW,mBACpB,CACA,mBAAAzC,GAAuB,CACvB,eAAAC,GACIr/B,KAAK6hC,WAAW,kBACpB,CACA,gBAAAnC,GACI1/B,KAAK6hC,WAAW,mBACpB,CACH,UAAAlC,GACO,MAAO,EACX,CACA,eAAAC,GACI5/B,KAAK6hC,WAAW,kBACpB,CACA,2BAAAE,GACI5uC,EAAS6M,KAAK9K,QAAQ6sC,4BAA6B,CAC/C/hC,MAER,CACH,kBAAAgiC,CAAmBjiC,GACZ,MAAM++B,EAAW9+B,KAAK9K,QAAQ6K,MAC9B,IAAIpM,EAAGO,EAAMslB,EACb,IAAI7lB,EAAI,EAAGO,EAAO6L,EAAMjM,OAAQH,EAAIO,EAAMP,IACtC6lB,EAAOzZ,EAAMpM,GACb6lB,EAAKiN,MAAQtzB,EAAS2rC,EAAS3rC,SAAU,CACrCqmB,EAAKrnB,MACLwB,EACAoM,GACDC,KAEX,CACA,0BAAAiiC,GACI9uC,EAAS6M,KAAK9K,QAAQ+sC,2BAA4B,CAC9CjiC,MAER,CACA,4BAAA+/B,GACI5sC,EAAS6M,KAAK9K,QAAQ6qC,6BAA8B,CAChD//B,MAER,CACA,sBAAAggC,GACI,MAAM9qC,EAAU8K,KAAK9K,QACf4pC,EAAW5pC,EAAQ6K,MACnBmiC,EAAWhG,GAAcl8B,KAAKD,MAAMjM,OAAQoB,EAAQ6K,MAAMq8B,eAC1D50B,EAAcs3B,EAASt3B,aAAe,EACtCC,EAAcq3B,EAASr3B,YAC7B,IACIV,EAAWi0B,EAAWmH,EADtB7E,EAAgB91B,EAEpB,IAAKxH,KAAKoiC,eAAiBtD,EAAS14B,SAAWoB,GAAeC,GAAey6B,GAAY,IAAMliC,KAAK+sB,eAEhG,YADA/sB,KAAKs9B,cAAgB91B,GAGzB,MAAM66B,EAAariC,KAAKsiC,iBAClBC,EAAgBF,EAAWG,OAAOn7B,MAClCo7B,EAAiBJ,EAAWK,QAAQn5B,OACpC6D,EAAW5T,EAAYwG,KAAKC,MAAMoH,MAAQk7B,EAAe,EAAGviC,KAAKoN,UACvErG,EAAY7R,EAAQmR,OAASrG,KAAKoN,SAAW80B,EAAW90B,GAAY80B,EAAW,GAC3EK,EAAgB,EAAIx7B,IACpBA,EAAYqG,GAAY80B,GAAYhtC,EAAQmR,OAAS,GAAM,IAC3D20B,EAAYh7B,KAAKg7B,UAAY4B,GAAkB1nC,EAAQwR,MAAQo4B,EAAS/4B,QAAU82B,GAAe3nC,EAAQoS,MAAOtH,KAAKC,MAAM/K,QAAQmN,MACnI8/B,EAAmB1qC,KAAK6F,KAAKilC,EAAgBA,EAAgBE,EAAiBA,GAC9EnF,EAA0B7lC,KAAKgC,IAAIhC,KAAKkrC,KAAKnpC,GAAa6oC,EAAWK,QAAQn5B,OAAS,GAAKxC,GAAY,EAAG,IAAKtP,KAAKkrC,KAAKnpC,EAAYwhC,EAAYmH,GAAmB,EAAG,IAAM1qC,KAAKkrC,KAAKnpC,EAAYipC,EAAiBN,GAAmB,EAAG,MD9lHhO,IAAM3qC,GC+lHhB8lC,EAAgB7lC,KAAKiC,IAAI8N,EAAa/P,KAAKgC,IAAIgO,EAAa61B,KAEhEt9B,KAAKs9B,cAAgBA,CACzB,CACA,2BAAA2C,GACI9sC,EAAS6M,KAAK9K,QAAQ+qC,4BAA6B,CAC/CjgC,MAER,CACA,aAAAqhC,GAAiB,CACjB,SAAAC,GACInuC,EAAS6M,KAAK9K,QAAQosC,UAAW,CAC7BthC,MAER,CACA,GAAAuhC,GACI,MAAMqB,EAAU,CACZv7B,MAAO,EACPkC,OAAQ,IAEN,MAAEtJ,EAAQ/K,SAAW6K,MAAO++B,EAAWx3B,MAAOu7B,EAAYn8B,KAAMo8B,IAAiB9iC,KACjFoG,EAAUpG,KAAKoiC,aACfrV,EAAe/sB,KAAK+sB,eAC1B,GAAI3mB,EAAS,CACT,MAAM28B,EAAclG,GAAegG,EAAW5iC,EAAM/K,QAAQmN,MAQ5D,GAPI0qB,GACA6V,EAAQv7B,MAAQrH,KAAKoN,SACrBw1B,EAAQr5B,OAASqzB,GAAkBkG,GAAYC,IAE/CH,EAAQr5B,OAASvJ,KAAKg7B,UACtB4H,EAAQv7B,MAAQu1B,GAAkBkG,GAAYC,GAE9CjE,EAAS14B,SAAWpG,KAAKD,MAAMjM,OAAQ,CACvC,MAAM,MAAE8sC,EAAM,KAAEvmC,EAAK,OAAEmoC,EAAO,QAAEE,GAAa1iC,KAAKsiC,iBAC5CU,EAAiC,EAAnBlE,EAAS/4B,QACvBk9B,EAAe/pC,EAAU8G,KAAKs9B,eAC9BvgC,EAAMtF,KAAKsF,IAAIkmC,GACfnnC,EAAMrE,KAAKqE,IAAImnC,GACrB,GAAIlW,EAAc,CACd,MAAMmW,EAAcpE,EAASp3B,OAAS,EAAI5L,EAAM0mC,EAAOn7B,MAAQtK,EAAM2lC,EAAQn5B,OAC7Eq5B,EAAQr5B,OAAS9R,KAAKgC,IAAIuG,KAAKg7B,UAAW4H,EAAQr5B,OAAS25B,EAAcF,EAC7E,KAAO,CACH,MAAMG,EAAarE,EAASp3B,OAAS,EAAI3K,EAAMylC,EAAOn7B,MAAQvL,EAAM4mC,EAAQn5B,OAC5Eq5B,EAAQv7B,MAAQ5P,KAAKgC,IAAIuG,KAAKoN,SAAUw1B,EAAQv7B,MAAQ87B,EAAaH,EACzE,CACAhjC,KAAKojC,kBAAkBxC,EAAOvmC,EAAMyB,EAAKiB,EAC7C,CACJ,CACAiD,KAAKqjC,iBACDtW,GACA/sB,KAAKqH,MAAQrH,KAAK0qB,QAAUzqB,EAAMoH,MAAQrH,KAAKi9B,SAAS92B,KAAOnG,KAAKi9B,SAASh3B,MAC7EjG,KAAKuJ,OAASq5B,EAAQr5B,SAEtBvJ,KAAKqH,MAAQu7B,EAAQv7B,MACrBrH,KAAKuJ,OAASvJ,KAAK0qB,QAAUzqB,EAAMsJ,OAASvJ,KAAKi9B,SAASj3B,IAAMhG,KAAKi9B,SAAS/2B,OAEtF,CACA,iBAAAk9B,CAAkBxC,EAAOvmC,EAAMyB,EAAKiB,GAChC,MAAQgD,OAAO,MAAEvE,EAAM,QAAEuK,GAAW,SAAE+pB,GAAc9vB,KAAK9K,QACnDouC,EAAmC,IAAvBtjC,KAAKs9B,cACjBiG,EAAgC,QAAbzT,GAAoC,MAAd9vB,KAAKuf,KACpD,GAAIvf,KAAK+sB,eAAgB,CACrB,MAAMyW,EAAaxjC,KAAK6qB,gBAAgB,GAAK7qB,KAAKmG,KAC5Cs9B,EAAczjC,KAAKiG,MAAQjG,KAAK6qB,gBAAgB7qB,KAAKD,MAAMjM,OAAS,GAC1E,IAAIspC,EAAc,EACdC,EAAe,EACfiG,EACIC,GACAnG,EAAcrgC,EAAM6jC,EAAMv5B,MAC1Bg2B,EAAevhC,EAAMzB,EAAKkP,SAE1B6zB,EAActhC,EAAM8kC,EAAMr3B,OAC1B8zB,EAAetgC,EAAM1C,EAAKgN,OAEb,UAAV7L,EACP6hC,EAAehjC,EAAKgN,MACH,QAAV7L,EACP4hC,EAAcwD,EAAMv5B,MACH,UAAV7L,IACP4hC,EAAcwD,EAAMv5B,MAAQ,EAC5Bg2B,EAAehjC,EAAKgN,MAAQ,GAEhCrH,KAAKo9B,YAAc3lC,KAAKiC,KAAK0jC,EAAcoG,EAAaz9B,GAAW/F,KAAKqH,OAASrH,KAAKqH,MAAQm8B,GAAa,GAC3GxjC,KAAKq9B,aAAe5lC,KAAKiC,KAAK2jC,EAAeoG,EAAc19B,GAAW/F,KAAKqH,OAASrH,KAAKqH,MAAQo8B,GAAc,EACnH,KAAO,CACH,IAAIvG,EAAa7iC,EAAKkP,OAAS,EAC3B4zB,EAAgByD,EAAMr3B,OAAS,EACrB,UAAV/N,GACA0hC,EAAa,EACbC,EAAgByD,EAAMr3B,QACL,QAAV/N,IACP0hC,EAAa7iC,EAAKkP,OAClB4zB,EAAgB,GAEpBn9B,KAAKk9B,WAAaA,EAAan3B,EAC/B/F,KAAKm9B,cAAgBA,EAAgBp3B,CACzC,CACJ,CACH,cAAAs9B,GACWrjC,KAAKi9B,WACLj9B,KAAKi9B,SAAS92B,KAAO1O,KAAKiC,IAAIsG,KAAKo9B,YAAap9B,KAAKi9B,SAAS92B,MAC9DnG,KAAKi9B,SAASj3B,IAAMvO,KAAKiC,IAAIsG,KAAKk9B,WAAYl9B,KAAKi9B,SAASj3B,KAC5DhG,KAAKi9B,SAASh3B,MAAQxO,KAAKiC,IAAIsG,KAAKq9B,aAAcr9B,KAAKi9B,SAASh3B,OAChEjG,KAAKi9B,SAAS/2B,OAASzO,KAAKiC,IAAIsG,KAAKm9B,cAAen9B,KAAKi9B,SAAS/2B,QAE1E,CACA,QAAAs7B,GACIruC,EAAS6M,KAAK9K,QAAQssC,SAAU,CAC5BxhC,MAER,CACH,YAAA+sB,GACO,MAAM,KAAExN,EAAK,SAAEuQ,GAAc9vB,KAAK9K,QAClC,MAAoB,QAAb46B,GAAmC,WAAbA,GAAkC,MAATvQ,CAC1D,CACH,UAAAmkB,GACO,OAAO1jC,KAAK9K,QAAQq/B,QACxB,CACH,qBAAAuL,CAAsB//B,GAGf,IAAIpM,EAAGO,EACP,IAHA8L,KAAK+hC,8BACL/hC,KAAKgiC,mBAAmBjiC,GAEpBpM,EAAI,EAAGO,EAAO6L,EAAMjM,OAAQH,EAAIO,EAAMP,IAClCzB,EAAc6N,EAAMpM,GAAG8yB,SACvB1mB,EAAMhF,OAAOpH,EAAG,GAChBO,IACAP,KAGRqM,KAAKiiC,4BACT,CACH,cAAAK,GACO,IAAID,EAAariC,KAAK09B,YACtB,IAAK2E,EAAY,CACb,MAAMtD,EAAa/+B,KAAK9K,QAAQ6K,MAAMg/B,WACtC,IAAIh/B,EAAQC,KAAKD,MACbg/B,EAAah/B,EAAMjM,SACnBiM,EAAQs8B,GAAOt8B,EAAOg/B,IAE1B/+B,KAAK09B,YAAc2E,EAAariC,KAAK2jC,mBAAmB5jC,EAAOA,EAAMjM,OAAQkM,KAAK9K,QAAQ6K,MAAMq8B,cACpG,CACA,OAAOiG,CACX,CACH,kBAAAsB,CAAmB5jC,EAAOjM,EAAQsoC,GAC3B,MAAM,IAAEx5B,EAAMg7B,kBAAmBgG,GAAY5jC,KACvC6jC,EAAS,GACTC,EAAU,GACVvH,EAAY9kC,KAAKmB,MAAM9E,EAASooC,GAAcpoC,EAAQsoC,IAC5D,IAEIzoC,EAAGs8B,EAAG8T,EAAMtd,EAAOud,EAAUC,EAAYn0B,EAAOtN,EAAY6E,EAAOkC,EAAQ26B,EAF3EC,EAAkB,EAClBC,EAAmB,EAEvB,IAAIzwC,EAAI,EAAGA,EAAIG,EAAQH,GAAK4oC,EAAU,CAUlC,GATA9V,EAAQ1mB,EAAMpM,GAAG8yB,MACjBud,EAAWhkC,KAAKqkC,wBAAwB1wC,GACxCiP,EAAIP,KAAO4hC,EAAaD,EAASt7B,OACjCoH,EAAQ8zB,EAAOK,GAAcL,EAAOK,IAAe,CAC/C17B,KAAM,CAAC,EACPC,GAAI,IAERhG,EAAawhC,EAASxhC,WACtB6E,EAAQkC,EAAS,EACZrX,EAAcu0B,IAAWr0B,EAAQq0B,IAG/B,GAAIr0B,EAAQq0B,GACf,IAAIwJ,EAAI,EAAG8T,EAAOtd,EAAM3yB,OAAQm8B,EAAI8T,IAAQ9T,EACxCiU,EAAezd,EAAMwJ,GAChB/9B,EAAcgyC,IAAiB9xC,EAAQ8xC,KACxC78B,EAAQiB,GAAa1F,EAAKkN,EAAMvH,KAAMuH,EAAMtH,GAAInB,EAAO68B,GACvD36B,GAAU/G,QAPlB6E,EAAQiB,GAAa1F,EAAKkN,EAAMvH,KAAMuH,EAAMtH,GAAInB,EAAOof,GACvDld,EAAS/G,EAUbqhC,EAAOptC,KAAK4Q,GACZy8B,EAAQrtC,KAAK8S,GACb46B,EAAkB1sC,KAAKiC,IAAI2N,EAAO88B,GAClCC,EAAmB3sC,KAAKiC,IAAI6P,EAAQ66B,EACxC,EA7iBP,SAAwBR,EAAQ9vC,GAC7BN,EAAKowC,GAAS9zB,IACV,MAAMtH,EAAKsH,EAAMtH,GACX87B,EAAQ97B,EAAG1U,OAAS,EAC1B,IAAIH,EACJ,GAAI2wC,EAAQxwC,EAAQ,CAChB,IAAIH,EAAI,EAAGA,EAAI2wC,IAAS3wC,SACbmc,EAAMvH,KAAKC,EAAG7U,IAEzB6U,EAAGzN,OAAO,EAAGupC,EACjB,IAER,CAkiBQC,CAAeX,EAAQ9vC,GACvB,MAAM0uC,EAASqB,EAAO7uC,QAAQmvC,GACxBzB,EAAUoB,EAAQ9uC,QAAQovC,GAC1BI,EAAWC,IAAM,CACfp9B,MAAOw8B,EAAOY,IAAQ,EACtBl7B,OAAQu6B,EAAQW,IAAQ,IAEhC,MAAO,CACH7D,MAAO4D,EAAQ,GACfnqC,KAAMmqC,EAAQ1wC,EAAS,GACvB0uC,OAAQgC,EAAQhC,GAChBE,QAAS8B,EAAQ9B,GACjBmB,SACAC,UAER,CACH,gBAAApd,CAAiBv0B,GACV,OAAOA,CACX,CACH,gBAAAy4B,CAAiBz4B,EAAOmC,GACjB,OAAOmxB,GACX,CACH,gBAAAkJ,CAAiB7lB,GAAQ,CACzB,eAAA+hB,CAAgBv2B,GACT,MAAMyL,EAAQC,KAAKD,MACnB,OAAIzL,EAAQ,GAAKA,EAAQyL,EAAMjM,OAAS,EAC7B,KAEJkM,KAAK4qB,iBAAiB7qB,EAAMzL,GAAOnC,MAC9C,CACH,kBAAAs8B,CAAmBiW,GACR1kC,KAAK2vB,iBACL+U,EAAU,EAAIA,GAElB,MAAM57B,EAAQ9I,KAAK+tB,YAAc2W,EAAU1kC,KAAK0qB,QAChD,OD1uHGlxB,EC0uHgBwG,KAAK2hC,eAAiB94B,GAAY7I,KAAKC,MAAO6I,EAAO,GAAKA,GD1uHtD,MAAO,MC2uHlC,CACH,kBAAA67B,CAAmB77B,GACZ,MAAM47B,GAAW57B,EAAQ9I,KAAK+tB,aAAe/tB,KAAK0qB,QAClD,OAAO1qB,KAAK2vB,eAAiB,EAAI+U,EAAUA,CAC/C,CACH,YAAA5X,GACO,OAAO9sB,KAAK4qB,iBAAiB5qB,KAAK4kC,eACtC,CACH,YAAAA,GACO,MAAM,IAAEnrC,EAAI,IAAEC,GAASsG,KACvB,OAAOvG,EAAM,GAAKC,EAAM,EAAIA,EAAMD,EAAM,GAAKC,EAAM,EAAID,EAAM,CACjE,CACH,UAAA0P,CAAW7U,GACJ,MAAMyL,EAAQC,KAAKD,OAAS,GAC5B,GAAIzL,GAAS,GAAKA,EAAQyL,EAAMjM,OAAQ,CACpC,MAAM0lB,EAAOzZ,EAAMzL,GACnB,OAAOklB,EAAK4H,WAAa5H,EAAK4H,SAnkB1C,SAA2BjO,EAAQ7e,EAAOklB,GACtC,OAAOnK,GAAc8D,EAAQ,CACzBqG,OACAllB,QACAhC,KAAM,QAEd,CA6jBqDuyC,CAAkB7kC,KAAKmJ,aAAc7U,EAAOklB,GACzF,CACA,OAAOxZ,KAAKohB,WAAaphB,KAAKohB,SA1kB3B/R,GA0kByDrP,KAAKC,MAAMkJ,aA1kB9C,CACzBzF,MAykBqF1D,KAxkBrF1N,KAAM,UAykBV,CACH,SAAA6tC,GACO,MAAM2E,EAAc9kC,KAAK9K,QAAQ6K,MAC3BglC,EAAM7rC,EAAU8G,KAAKs9B,eACrBvgC,EAAMtF,KAAKY,IAAIZ,KAAKsF,IAAIgoC,IACxBjpC,EAAMrE,KAAKY,IAAIZ,KAAKqE,IAAIipC,IACxB1C,EAAariC,KAAKsiC,iBAClBv8B,EAAU++B,EAAYh9B,iBAAmB,EACzC6B,EAAI04B,EAAaA,EAAWG,OAAOn7B,MAAQtB,EAAU,EACrDwH,EAAI80B,EAAaA,EAAWK,QAAQn5B,OAASxD,EAAU,EAC7D,OAAO/F,KAAK+sB,eAAiBxf,EAAIxQ,EAAM4M,EAAI7N,EAAM6N,EAAI5M,EAAMwQ,EAAIzR,EAAMyR,EAAIzR,EAAM6N,EAAI5M,EAAMwQ,EAAIxQ,EAAM4M,EAAI7N,CAC3G,CACH,UAAAsmC,GACO,MAAMh8B,EAAUpG,KAAK9K,QAAQkR,QAC7B,MAAgB,SAAZA,IACSA,EAENpG,KAAK+e,0BAA0BjrB,OAAS,CACnD,CACH,qBAAAkxC,CAAsBhe,GACf,MAAMzH,EAAOvf,KAAKuf,KACZtf,EAAQD,KAAKC,MACb/K,EAAU8K,KAAK9K,SACf,KAAEwR,EAAK,SAAEopB,EAAS,OAAE5oB,GAAYhS,EAChCmR,EAASK,EAAKL,OACd0mB,EAAe/sB,KAAK+sB,eAEpBoP,EADQn8B,KAAKD,MACOjM,QAAUuS,EAAS,EAAI,GAC3C4+B,EAAKrI,GAAkBl2B,GACvB0S,EAAQ,GACR8rB,EAAah+B,EAAO4K,WAAW9R,KAAKmJ,cACpCg8B,EAAYD,EAAW9+B,QAAU8+B,EAAW79B,MAAQ,EACpD+9B,EAAgBD,EAAY,EAC5BE,EAAmB,SAASv8B,GAC9B,OAAOD,GAAY5I,EAAO6I,EAAOq8B,EACrC,EACA,IAAIG,EAAa3xC,EAAGgpC,EAAW4I,EAC3BC,EAAKC,EAAKC,EAAKC,EAAKC,EAAIC,EAAIC,EAAIC,EACpC,GAAiB,QAAbjW,EACAwV,EAAcD,EAAiBrlC,KAAKkG,QACpCu/B,EAAMzlC,KAAKkG,OAAS++B,EACpBU,EAAML,EAAcF,EACpBS,EAAKR,EAAiBre,EAAUhhB,KAAOo/B,EACvCW,EAAK/e,EAAU9gB,YACZ,GAAiB,WAAb4pB,EACPwV,EAAcD,EAAiBrlC,KAAKgG,KACpC6/B,EAAK7e,EAAUhhB,IACf+/B,EAAKV,EAAiBre,EAAU9gB,QAAUk/B,EAC1CK,EAAMH,EAAcF,EACpBO,EAAM3lC,KAAKgG,IAAMi/B,OACd,GAAiB,SAAbnV,EACPwV,EAAcD,EAAiBrlC,KAAKiG,OACpCu/B,EAAMxlC,KAAKiG,MAAQg/B,EACnBS,EAAMJ,EAAcF,EACpBQ,EAAKP,EAAiBre,EAAU7gB,MAAQi/B,EACxCU,EAAK9e,EAAU/gB,WACZ,GAAiB,UAAb6pB,EACPwV,EAAcD,EAAiBrlC,KAAKmG,MACpCy/B,EAAK5e,EAAU7gB,KACf2/B,EAAKT,EAAiBre,EAAU/gB,OAASm/B,EACzCI,EAAMF,EAAcF,EACpBM,EAAM1lC,KAAKmG,KAAO8+B,OACf,GAAa,MAAT1lB,EAAc,CACrB,GAAiB,WAAbuQ,EACAwV,EAAcD,GAAkBre,EAAUhhB,IAAMghB,EAAU9gB,QAAU,EAAI,SACrE,GAAItT,EAASk9B,GAAW,CAC3B,MAAMkW,EAAiBzzC,OAAOsB,KAAKi8B,GAAU,GACvC39B,EAAQ29B,EAASkW,GACvBV,EAAcD,EAAiBrlC,KAAKC,MAAM0D,OAAOqiC,GAAgBpb,iBAAiBz4B,GACtF,CACA0zC,EAAK7e,EAAUhhB,IACf+/B,EAAK/e,EAAU9gB,OACfu/B,EAAMH,EAAcF,EACpBO,EAAMF,EAAMR,CAChB,MAAO,GAAa,MAAT1lB,EAAc,CACrB,GAAiB,WAAbuQ,EACAwV,EAAcD,GAAkBre,EAAU7gB,KAAO6gB,EAAU/gB,OAAS,QACjE,GAAIrT,EAASk9B,GAAW,CAC3B,MAAMkW,EAAiBzzC,OAAOsB,KAAKi8B,GAAU,GACvC39B,EAAQ29B,EAASkW,GACvBV,EAAcD,EAAiBrlC,KAAKC,MAAM0D,OAAOqiC,GAAgBpb,iBAAiBz4B,GACtF,CACAqzC,EAAMF,EAAcF,EACpBM,EAAMF,EAAMP,EACZW,EAAK5e,EAAU7gB,KACf2/B,EAAK9e,EAAU/gB,KACnB,CACA,MAAMggC,EAAQ/yC,EAAegC,EAAQ6K,MAAMq8B,cAAeD,GACpD+J,EAAOzuC,KAAKiC,IAAI,EAAGjC,KAAKukC,KAAKG,EAAc8J,IACjD,IAAItyC,EAAI,EAAGA,EAAIwoC,EAAaxoC,GAAKuyC,EAAK,CAClC,MAAMlkC,EAAUhC,KAAKmJ,WAAWxV,GAC1BwyC,EAAcz/B,EAAKoL,WAAW9P,GAC9BokC,EAAoBl/B,EAAO4K,WAAW9P,GACtC2E,EAAYw/B,EAAYx/B,UACxB0/B,EAAYF,EAAY9nC,MACxBioC,EAAaF,EAAkBj/B,MAAQ,GACvCo/B,EAAmBH,EAAkBh/B,WACrCL,EAAYo/B,EAAYp/B,UACxBE,EAAYk/B,EAAYl/B,UACxBu/B,EAAiBL,EAAYK,gBAAkB,GAC/CC,EAAuBN,EAAYM,qBACzC9J,EAAYH,GAAoBx8B,KAAMrM,EAAG0S,QACvB1E,IAAdg7B,IAGJ4I,EAAmB18B,GAAY5I,EAAO08B,EAAWh2B,GAC7ComB,EACAyY,EAAME,EAAME,EAAKE,EAAKP,EAEtBE,EAAME,EAAME,EAAKE,EAAKR,EAE1BnsB,EAAM3iB,KAAK,CACP+uC,MACAC,MACAC,MACAC,MACAC,KACAC,KACAC,KACAC,KACA1+B,MAAOV,EACPtI,MAAOgoC,EACPC,aACAC,mBACAx/B,YACAE,YACAu/B,iBACAC,yBAER,CAGA,OAFAzmC,KAAKi+B,aAAe9B,EACpBn8B,KAAKk+B,aAAeoH,EACblsB,CACX,CACH,kBAAAwlB,CAAmB5X,GACZ,MAAMzH,EAAOvf,KAAKuf,KACZrqB,EAAU8K,KAAK9K,SACf,SAAE46B,EAAW/vB,MAAO+kC,GAAiB5vC,EACrC63B,EAAe/sB,KAAK+sB,eACpBhtB,EAAQC,KAAKD,OACb,MAAEvE,EAAM,WAAE0M,EAAW,QAAEnC,EAAQ,OAAE2B,GAAYo9B,EAC7CG,EAAKrI,GAAkB1nC,EAAQwR,MAC/BggC,EAAiBzB,EAAKl/B,EACtB4gC,EAAkBj/B,GAAU3B,EAAU2gC,EACtCx8B,GAAYhR,EAAU8G,KAAKs9B,eAC3BlkB,EAAQ,GACd,IAAIzlB,EAAGO,EAAMslB,EAAMiN,EAAO3wB,EAAGE,EAAG+W,EAAWjE,EAAOzG,EAAMG,EAAYokC,EAAWC,EAC3E75B,EAAe,SACnB,GAAiB,QAAb8iB,EACA95B,EAAIgK,KAAKkG,OAASygC,EAClB55B,EAAY/M,KAAK8mC,+BACd,GAAiB,WAAbhX,EACP95B,EAAIgK,KAAKgG,IAAM2gC,EACf55B,EAAY/M,KAAK8mC,+BACd,GAAiB,SAAbhX,EAAqB,CAC5B,MAAM1hB,EAAMpO,KAAK+mC,wBAAwB9B,GACzCl4B,EAAYqB,EAAIrB,UAChBjX,EAAIsY,EAAItY,CACZ,MAAO,GAAiB,UAAbg6B,EAAsB,CAC7B,MAAM1hB,EAAMpO,KAAK+mC,wBAAwB9B,GACzCl4B,EAAYqB,EAAIrB,UAChBjX,EAAIsY,EAAItY,CACZ,MAAO,GAAa,MAATypB,EAAc,CACrB,GAAiB,WAAbuQ,EACA95B,GAAKgxB,EAAUhhB,IAAMghB,EAAU9gB,QAAU,EAAIwgC,OAC1C,GAAI9zC,EAASk9B,GAAW,CAC3B,MAAMkW,EAAiBzzC,OAAOsB,KAAKi8B,GAAU,GACvC39B,EAAQ29B,EAASkW,GACvBhwC,EAAIgK,KAAKC,MAAM0D,OAAOqiC,GAAgBpb,iBAAiBz4B,GAASu0C,CACpE,CACA35B,EAAY/M,KAAK8mC,yBACrB,MAAO,GAAa,MAATvnB,EAAc,CACrB,GAAiB,WAAbuQ,EACAh6B,GAAKkxB,EAAU7gB,KAAO6gB,EAAU/gB,OAAS,EAAIygC,OAC1C,GAAI9zC,EAASk9B,GAAW,CAC3B,MAAMkW,EAAiBzzC,OAAOsB,KAAKi8B,GAAU,GACvC39B,EAAQ29B,EAASkW,GACvBlwC,EAAIkK,KAAKC,MAAM0D,OAAOqiC,GAAgBpb,iBAAiBz4B,EAC3D,CACA4a,EAAY/M,KAAK+mC,wBAAwB9B,GAAIl4B,SACjD,CACa,MAATwS,IACc,UAAV/jB,EACAwR,EAAe,MACE,QAAVxR,IACPwR,EAAe,WAGvB,MAAMq1B,EAAariC,KAAKsiC,iBACxB,IAAI3uC,EAAI,EAAGO,EAAO6L,EAAMjM,OAAQH,EAAIO,IAAQP,EAAE,CAC1C6lB,EAAOzZ,EAAMpM,GACb8yB,EAAQjN,EAAKiN,MACb,MAAM0f,EAAcrB,EAAYhzB,WAAW9R,KAAKmJ,WAAWxV,IAC3DmV,EAAQ9I,KAAK6qB,gBAAgBl3B,GAAKmxC,EAAY/8B,YAC9C1F,EAAOrC,KAAKqkC,wBAAwB1wC,GACpC6O,EAAaH,EAAKG,WAClBokC,EAAYx0C,EAAQq0B,GAASA,EAAM3yB,OAAS,EAC5C,MAAMkzC,EAAYJ,EAAY,EACxBvoC,EAAQ8nC,EAAY9nC,MACpBwO,EAAcs5B,EAAYv+B,gBAC1BgF,EAAcu5B,EAAYx+B,gBAChC,IAuCIuF,EAvCA+5B,EAAgBl6B,EAwCpB,GAvCIggB,GACAj3B,EAAIgT,EACc,UAAdiE,IAEIk6B,EADAtzC,IAAMO,EAAO,EACI8L,KAAK9K,QAAQxB,QAAoB,OAAV,QAC3B,IAANC,EACUqM,KAAK9K,QAAQxB,QAAmB,QAAT,OAExB,UAKhBmzC,EAFS,QAAb/W,EACmB,SAAf5nB,GAAsC,IAAbgC,GACX08B,EAAYpkC,EAAaA,EAAa,EAC9B,WAAf0F,GACOm6B,EAAWK,QAAQn5B,OAAS,EAAIy9B,EAAYxkC,EAAaA,GAEzD6/B,EAAWK,QAAQn5B,OAAS/G,EAAa,EAGxC,SAAf0F,GAAsC,IAAbgC,EACZ1H,EAAa,EACJ,WAAf0F,EACMm6B,EAAWK,QAAQn5B,OAAS,EAAIy9B,EAAYxkC,EAE5C6/B,EAAWK,QAAQn5B,OAASq9B,EAAYpkC,EAGzDkF,IACAm/B,IAAe,GAEF,IAAb38B,GAAmBi8B,EAAYh+B,oBAC/BrS,GAAK0M,EAAa,EAAI/K,KAAKqE,IAAIoO,MAGnClU,EAAI8S,EACJ+9B,GAAc,EAAID,GAAapkC,EAAa,GAG5C2jC,EAAYh+B,kBAAmB,CAC/B,MAAM++B,EAAex4B,GAAUy3B,EAAY99B,iBACrCkB,EAAS84B,EAAWyB,QAAQnwC,GAC5B0T,EAAQg7B,EAAWwB,OAAOlwC,GAChC,IAAIqS,EAAM6gC,EAAaK,EAAalhC,IAChCG,EAAO,EAAI+gC,EAAa/gC,KAC5B,OAAO6G,GACH,IAAK,SACDhH,GAAOuD,EAAS,EAChB,MACJ,IAAK,SACDvD,GAAOuD,EAGf,OAAOwD,GACH,IAAK,SACD5G,GAAQkB,EAAQ,EAChB,MACJ,IAAK,QACDlB,GAAQkB,EACR,MACJ,IAAK,QACG1T,IAAMO,EAAO,EACbiS,GAAQkB,EACD1T,EAAI,IACXwS,GAAQkB,EAAQ,GAI5B6F,EAAW,CACP/G,OACAH,MACAqB,MAAOA,EAAQ6/B,EAAa7/B,MAC5BkC,OAAQA,EAAS29B,EAAa39B,OAC9BlL,MAAO8nC,EAAY/9B,cAE3B,CACAgR,EAAM3iB,KAAK,CACPgwB,QACApkB,OACAwkC,aACA3xC,QAAS,CACLgV,WACA7L,QACAwO,cACAD,cACAG,UAAWk6B,EACXj6B,eACAF,YAAa,CACThX,EACAE,GAEJkX,aAGZ,CACA,OAAOkM,CACX,CACA,uBAAA0tB,GACI,MAAM,SAAEhX,EAAS,MAAE/vB,GAAWC,KAAK9K,QAEnC,IADkBgE,EAAU8G,KAAKs9B,eAE7B,MAAoB,QAAbxN,EAAqB,OAAS,QAEzC,IAAIt0B,EAAQ,SAQZ,MAPoB,UAAhBuE,EAAMvE,MACNA,EAAQ,OACe,QAAhBuE,EAAMvE,MACbA,EAAQ,QACe,UAAhBuE,EAAMvE,QACbA,EAAQ,SAELA,CACX,CACA,uBAAAurC,CAAwB9B,GACpB,MAAM,SAAEnV,EAAW/vB,OAAO,WAAEmI,EAAW,OAAER,EAAO,QAAE3B,IAAgB/F,KAAK9K,QAEjEwxC,EAAiBzB,EAAKl/B,EACtBy8B,EAFaxiC,KAAKsiC,iBAEEE,OAAOn7B,MACjC,IAAI0F,EACAjX,EAoDJ,MAnDiB,SAAbg6B,EACIpoB,GACA5R,EAAIkK,KAAKiG,MAAQF,EACE,SAAfmC,EACA6E,EAAY,OACU,WAAf7E,GACP6E,EAAY,SACZjX,GAAK0sC,EAAS,IAEdz1B,EAAY,QACZjX,GAAK0sC,KAGT1sC,EAAIkK,KAAKiG,MAAQygC,EACE,SAAfx+B,EACA6E,EAAY,QACU,WAAf7E,GACP6E,EAAY,SACZjX,GAAK0sC,EAAS,IAEdz1B,EAAY,OACZjX,EAAIkK,KAAKmG,OAGG,UAAb2pB,EACHpoB,GACA5R,EAAIkK,KAAKmG,KAAOJ,EACG,SAAfmC,EACA6E,EAAY,QACU,WAAf7E,GACP6E,EAAY,SACZjX,GAAK0sC,EAAS,IAEdz1B,EAAY,OACZjX,GAAK0sC,KAGT1sC,EAAIkK,KAAKmG,KAAOugC,EACG,SAAfx+B,EACA6E,EAAY,OACU,WAAf7E,GACP6E,EAAY,SACZjX,GAAK0sC,EAAS,IAEdz1B,EAAY,QACZjX,EAAIkK,KAAKiG,QAIjB8G,EAAY,QAET,CACHA,YACAjX,IAER,CACH,iBAAAqxC,GACO,GAAInnC,KAAK9K,QAAQ6K,MAAM2H,OACnB,OAEJ,MAAMzH,EAAQD,KAAKC,MACb6vB,EAAW9vB,KAAK9K,QAAQ46B,SAC9B,MAAiB,SAAbA,GAAoC,UAAbA,EAChB,CACH9pB,IAAK,EACLG,KAAMnG,KAAKmG,KACXD,OAAQjG,EAAMsJ,OACdtD,MAAOjG,KAAKiG,OAGH,QAAb6pB,GAAmC,WAAbA,EACf,CACH9pB,IAAKhG,KAAKgG,IACVG,KAAM,EACND,OAAQlG,KAAKkG,OACbD,MAAOhG,EAAMoH,YALrB,CAQJ,CACH,cAAA+/B,GACO,MAAM,IAAExkC,EAAM1N,SAAS,gBAAE0M,GAAmB,KAAEuE,EAAK,IAAEH,EAAI,MAAEqB,EAAM,OAAEkC,GAAYvJ,KAC3E4B,IACAgB,EAAIwG,OACJxG,EAAIyJ,UAAYzK,EAChBgB,EAAI6J,SAAStG,EAAMH,EAAKqB,EAAOkC,GAC/B3G,EAAI4G,UAEZ,CACA,oBAAAqlB,CAAqB18B,GACjB,MAAMuU,EAAO1G,KAAK9K,QAAQwR,KAC1B,IAAK1G,KAAKoiC,eAAiB17B,EAAKN,QAC5B,OAAO,EAEX,MACM9R,EADQ0L,KAAKD,MACCsnC,WAAW1rC,GAAIA,EAAExJ,QAAUA,IAC/C,OAAImC,GAAS,EACIoS,EAAKoL,WAAW9R,KAAKmJ,WAAW7U,IACjCqS,UAET,CACX,CACH,QAAA2gC,CAAStgB,GACF,MAAMtgB,EAAO1G,KAAK9K,QAAQwR,KACpB9D,EAAM5C,KAAK4C,IACXwW,EAAQpZ,KAAKw9B,iBAAmBx9B,KAAKw9B,eAAiBx9B,KAAKglC,sBAAsBhe,IACvF,IAAIrzB,EAAGO,EACP,MAAMqzC,EAAW,CAACC,EAAIC,EAAIllC,KACjBA,EAAM8E,OAAU9E,EAAMlE,QAG3BuE,EAAIwG,OACJxG,EAAI+D,UAAYpE,EAAM8E,MACtBzE,EAAIwJ,YAAc7J,EAAMlE,MACxBuE,EAAI8kC,YAAYnlC,EAAM+jC,YAAc,IACpC1jC,EAAI+kC,eAAiBplC,EAAMgkC,iBAC3B3jC,EAAI4H,YACJ5H,EAAIgI,OAAO48B,EAAG1xC,EAAG0xC,EAAGxxC,GACpB4M,EAAIiI,OAAO48B,EAAG3xC,EAAG2xC,EAAGzxC,GACpB4M,EAAIsI,SACJtI,EAAI4G,UAAS,EAEjB,GAAI9C,EAAKN,QACL,IAAIzS,EAAI,EAAGO,EAAOklB,EAAMtlB,OAAQH,EAAIO,IAAQP,EAAE,CAC1C,MAAM2D,EAAO8hB,EAAMzlB,GACf+S,EAAKE,iBACL2gC,EAAS,CACLzxC,EAAGwB,EAAKsuC,GACR5vC,EAAGsB,EAAKuuC,IACT,CACC/vC,EAAGwB,EAAKwuC,GACR9vC,EAAGsB,EAAKyuC,IACTzuC,GAEHoP,EAAKG,WACL0gC,EAAS,CACLzxC,EAAGwB,EAAKkuC,IACRxvC,EAAGsB,EAAKmuC,KACT,CACC3vC,EAAGwB,EAAKouC,IACR1vC,EAAGsB,EAAKquC,KACT,CACCtnC,MAAO/G,EAAK2P,UACZI,MAAO/P,EAAKyP,UACZu/B,WAAYhvC,EAAKkvC,eACjBD,iBAAkBjvC,EAAKmvC,sBAGnC,CAER,CACH,UAAAmB,GACO,MAAM,MAAE3nC,EAAM,IAAE2C,EAAM1N,SAAS,OAAEgS,EAAO,KAAER,IAAa1G,KACjDklC,EAAah+B,EAAO4K,WAAW9R,KAAKmJ,cACpCg8B,EAAYj+B,EAAOd,QAAU8+B,EAAW79B,MAAQ,EACtD,IAAK89B,EACD,OAEJ,MAAM0C,EAAgBnhC,EAAKoL,WAAW9R,KAAKmJ,WAAW,IAAIxC,UACpD2+B,EAActlC,KAAKk+B,aACzB,IAAI0H,EAAIE,EAAID,EAAIE,EACZ/lC,KAAK+sB,gBACL6Y,EAAK/8B,GAAY5I,EAAOD,KAAKmG,KAAMg/B,GAAaA,EAAY,EAC5DW,EAAKj9B,GAAY5I,EAAOD,KAAKiG,MAAO4hC,GAAiBA,EAAgB,EACrEhC,EAAKE,EAAKT,IAEVO,EAAKh9B,GAAY5I,EAAOD,KAAKgG,IAAKm/B,GAAaA,EAAY,EAC3DY,EAAKl9B,GAAY5I,EAAOD,KAAKkG,OAAQ2hC,GAAiBA,EAAgB,EACtEjC,EAAKE,EAAKR,GAEd1iC,EAAIwG,OACJxG,EAAI+D,UAAYu+B,EAAW79B,MAC3BzE,EAAIwJ,YAAc84B,EAAW7mC,MAC7BuE,EAAI4H,YACJ5H,EAAIgI,OAAOg7B,EAAIC,GACfjjC,EAAIiI,OAAOi7B,EAAIC,GACfnjC,EAAIsI,SACJtI,EAAI4G,SACR,CACH,UAAAs+B,CAAW9gB,GAEJ,IADoBhnB,KAAK9K,QAAQ6K,MAChBqG,QACb,OAEJ,MAAMxD,EAAM5C,KAAK4C,IACXyI,EAAOrL,KAAKmnC,oBACd97B,GACAE,GAAS3I,EAAKyI,GAElB,MAAM+N,EAAQpZ,KAAK2+B,cAAc3X,GACjC,IAAK,MAAM1vB,KAAQ8hB,EAAM,CACrB,MAAM2uB,EAAoBzwC,EAAKpC,QACzB8uC,EAAW1sC,EAAK+K,KAGtBqK,GAAW9J,EAFGtL,EAAKmvB,MAEI,EADbnvB,EAAKuvC,WACc7C,EAAU+D,EAC3C,CACI18B,GACAG,GAAW5I,EAEnB,CACH,SAAAolC,GACO,MAAM,IAAEplC,EAAM1N,SAAS,SAAE46B,EAAS,MAAExoB,EAAM,QAAE5T,IAAgBsM,KAC5D,IAAKsH,EAAMlB,QACP,OAEJ,MAAM/D,EAAOsM,GAAOrH,EAAMjF,MACpB0D,EAAU2I,GAAUpH,EAAMvB,SAC1BvK,EAAQ8L,EAAM9L,MACpB,IAAI6K,EAAShE,EAAKG,WAAa,EACd,WAAbstB,GAAsC,WAAbA,GAAyBl9B,EAASk9B,IAC3DzpB,GAAUN,EAAQG,OACd9T,EAAQkV,EAAMC,QACdlB,GAAUhE,EAAKG,YAAc8E,EAAMC,KAAKzT,OAAS,KAGrDuS,GAAUN,EAAQC,IAEtB,MAAM,OAAEiiC,EAAO,OAAEC,EAAO,SAAE96B,EAAS,SAAElD,GAnlC7C,SAAmBxG,EAAO2C,EAAQypB,EAAUt0B,GACxC,MAAM,IAAEwK,EAAI,KAAEG,EAAK,OAAED,EAAO,MAAED,EAAM,MAAEhG,GAAWyD,GAC3C,UAAEsjB,EAAU,OAAErjB,GAAY1D,EAChC,IACImN,EAAU66B,EAAQC,EADlBh+B,EAAW,EAEf,MAAMX,EAASrD,EAASF,EAClBqB,EAAQpB,EAAQE,EACtB,GAAIzC,EAAMqpB,eAAgB,CAEtB,GADAkb,EAASxsC,EAAeD,EAAO2K,EAAMF,GACjCrT,EAASk9B,GAAW,CACpB,MAAMkW,EAAiBzzC,OAAOsB,KAAKi8B,GAAU,GACvC39B,EAAQ29B,EAASkW,GACvBkC,EAASvkC,EAAOqiC,GAAgBpb,iBAAiBz4B,GAASoX,EAASlD,CACvE,MACI6hC,EADoB,WAAbpY,GACG9I,EAAU9gB,OAAS8gB,EAAUhhB,KAAO,EAAIuD,EAASlD,EAElD41B,GAAev4B,EAAOosB,EAAUzpB,GAE7C+G,EAAWnH,EAAQE,CACvB,KAAO,CACH,GAAIvT,EAASk9B,GAAW,CACpB,MAAMkW,EAAiBzzC,OAAOsB,KAAKi8B,GAAU,GACvC39B,EAAQ29B,EAASkW,GACvBiC,EAAStkC,EAAOqiC,GAAgBpb,iBAAiBz4B,GAASkV,EAAQhB,CACtE,MACI4hC,EADoB,WAAbnY,GACG9I,EAAU7gB,KAAO6gB,EAAU/gB,OAAS,EAAIoB,EAAQhB,EAEjD41B,GAAev4B,EAAOosB,EAAUzpB,GAE7C6hC,EAASzsC,EAAeD,EAAO0K,EAAQF,GACvCkE,EAAwB,SAAb4lB,GAAuBh4B,EAAUA,CAChD,CACA,MAAO,CACHmwC,SACAC,SACA96B,WACAlD,WAER,CA6iC2Di+B,CAAUnoC,KAAMqG,EAAQypB,EAAUt0B,GACrFkR,GAAW9J,EAAK0E,EAAMC,KAAM,EAAG,EAAGlF,EAAM,CACpChE,MAAOiJ,EAAMjJ,MACb+O,WACAlD,WACA6C,UAAW+vB,GAAWthC,EAAOs0B,EAAUp8B,GACvCsZ,aAAc,SACdF,YAAa,CACTm7B,EACAC,IAGZ,CACA,IAAA7uB,CAAK2N,GACIhnB,KAAKoiC,eAGVpiC,KAAKonC,iBACLpnC,KAAKsnC,SAAStgB,GACdhnB,KAAK4nC,aACL5nC,KAAKgoC,YACLhoC,KAAK8nC,WAAW9gB,GACpB,CACH,OAAA+N,GACO,MAAMppB,EAAO3L,KAAK9K,QACZkzC,EAAKz8B,EAAK5L,OAAS4L,EAAK5L,MAAMi1B,GAAK,EACnCqT,EAAKn1C,EAAeyY,EAAKjF,MAAQiF,EAAKjF,KAAKsuB,GAAI,GAC/CsT,EAAKp1C,EAAeyY,EAAKzE,QAAUyE,EAAKzE,OAAO8tB,EAAG,GACxD,OAAKh1B,KAAKoiC,cAAgBpiC,KAAKqZ,OAAS2jB,GAAMxqC,UAAU6mB,KAUjD,CACH,CACI2b,EAAGqT,EACHhvB,KAAO2N,IACHhnB,KAAKonC,iBACLpnC,KAAKsnC,SAAStgB,GACdhnB,KAAKgoC,WAAW,GAGxB,CACIhT,EAAGsT,EACHjvB,KAAM,KACFrZ,KAAK4nC,YAAY,GAGzB,CACI5S,EAAGoT,EACH/uB,KAAO2N,IACHhnB,KAAK8nC,WAAW9gB,EAAU,IA3B3B,CACH,CACIgO,EAAGoT,EACH/uB,KAAO2N,IACHhnB,KAAKqZ,KAAK2N,EAAU,GA2BxC,CACH,uBAAAjI,CAAwBzsB,GACjB,MAAMisC,EAAQv+B,KAAKC,MAAM+vB,+BACnBuY,EAASvoC,KAAKuf,KAAO,SACrBzK,EAAS,GACf,IAAInhB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAOqqC,EAAMzqC,OAAQH,EAAIO,IAAQP,EAAE,CAC1C,MAAM0qB,EAAOkgB,EAAM5qC,GACf0qB,EAAKkqB,KAAYvoC,KAAK/N,IAAQK,GAAQ+rB,EAAK/rB,OAASA,GACpDwiB,EAAOre,KAAK4nB,EAEpB,CACA,OAAOvJ,CACX,CACH,uBAAAuvB,CAAwB/vC,GAEjB,OAAOqa,GADM3O,KAAK9K,QAAQ6K,MAAM+R,WAAW9R,KAAKmJ,WAAW7U,IACxC+N,KACvB,CACH,UAAAmmC,GACO,MAAMC,EAAWzoC,KAAKqkC,wBAAwB,GAAG7hC,WACjD,OAAQxC,KAAK+sB,eAAiB/sB,KAAKqH,MAAQrH,KAAKuJ,QAAUk/B,CAC9D,EAGJ,MAAMC,GACF,WAAAnnC,CAAYjP,EAAM+O,EAAO0C,GACrB/D,KAAK1N,KAAOA,EACZ0N,KAAKqB,MAAQA,EACbrB,KAAK+D,SAAWA,EAChB/D,KAAKoZ,MAAQ7mB,OAAOoC,OAAO,KAC/B,CACA,SAAAg0C,CAAUr2C,GACN,OAAOC,OAAOC,UAAUo2C,cAAcl2C,KAAKsN,KAAK1N,KAAKE,UAAWF,EAAKE,UACzE,CACH,QAAAq2C,CAASvxC,GACF,MAAMwxC,EAAQv2C,OAAO0e,eAAe3Z,GACpC,IAAIyxC,GAiEZ,SAA2BD,GACvB,MAAO,OAAQA,GAAS,aAAcA,CAC1C,EAlEYE,CAAkBF,KAClBC,EAAc/oC,KAAK6oC,SAASC,IAEhC,MAAM1vB,EAAQpZ,KAAKoZ,MACbnnB,EAAKqF,EAAKrF,GACVoP,EAAQrB,KAAKqB,MAAQ,IAAMpP,EACjC,IAAKA,EACD,MAAM,IAAIigB,MAAM,2BAA6B5a,GAEjD,OAAIrF,KAAMmnB,IAGVA,EAAMnnB,GAAMqF,EAyBpB,SAA0BA,EAAM+J,EAAO0nC,GACnC,MAAME,EAAe5zC,EAAM9C,OAAOoC,OAAO,MAAO,CAC5Co0C,EAAcnkC,GAASvF,IAAI0pC,GAAe,CAAC,EAC3CnkC,GAASvF,IAAIgC,GACb/J,EAAKsN,WAETA,GAASpF,IAAI6B,EAAO4nC,GAChB3xC,EAAK4xC,eAOb,SAAuB7nC,EAAO8nC,GAC1B52C,OAAOsB,KAAKs1C,GAAQnuC,SAAS8b,IACzB,MAAMsyB,EAAgBtyB,EAASzgB,MAAM,KAC/BgzC,EAAaD,EAAc3vB,MAC3B6vB,EAAc,CAChBjoC,GACFgpB,OAAO+e,GAAej3B,KAAK,KACvB/b,EAAQ+yC,EAAOryB,GAAUzgB,MAAM,KAC/B8N,EAAa/N,EAAMqjB,MACnBvV,EAAc9N,EAAM+b,KAAK,KAC/BvN,GAASZ,MAAMslC,EAAaD,EAAYnlC,EAAaC,EAAW,GAExE,CAlBQolC,CAAcloC,EAAO/J,EAAK4xC,eAE1B5xC,EAAK2J,aACL2D,GAASd,SAASzC,EAAO/J,EAAK2J,YAEtC,CArCQuoC,CAAiBlyC,EAAM+J,EAAO0nC,GAC1B/oC,KAAK+D,UACLa,GAASb,SAASzM,EAAKrF,GAAIqF,EAAK0J,YALzBK,CAQf,CACH,GAAAhC,CAAIpN,GACG,OAAO+N,KAAKoZ,MAAMnnB,EACtB,CACH,UAAAw3C,CAAWnyC,GACJ,MAAM8hB,EAAQpZ,KAAKoZ,MACbnnB,EAAKqF,EAAKrF,GACVoP,EAAQrB,KAAKqB,MACfpP,KAAMmnB,UACCA,EAAMnnB,GAEboP,GAASpP,KAAM2S,GAASvD,YACjBuD,GAASvD,GAAOpP,GACnB+N,KAAK+D,iBACE/C,GAAU/O,GAG7B,EAiCJ,MAAMy3C,GACF,WAAAnoC,GACIvB,KAAK2pC,YAAc,IAAIjB,GAAcnoB,GAAmB,YAAY,GACpEvgB,KAAKmC,SAAW,IAAIumC,GAAclN,GAAS,YAC3Cx7B,KAAKwD,QAAU,IAAIklC,GAAcn2C,OAAQ,WACzCyN,KAAK2D,OAAS,IAAI+kC,GAAc1L,GAAO,UACvCh9B,KAAK4pC,iBAAmB,CACpB5pC,KAAK2pC,YACL3pC,KAAK2D,OACL3D,KAAKmC,SAEb,CACH,GAAAiQ,IAAO/e,GACA2M,KAAK6pC,MAAM,WAAYx2C,EAC3B,CACA,MAAAinB,IAAUjnB,GACN2M,KAAK6pC,MAAM,aAAcx2C,EAC7B,CACH,cAAAy2C,IAAkBz2C,GACX2M,KAAK6pC,MAAM,WAAYx2C,EAAM2M,KAAK2pC,YACtC,CACH,WAAAhoB,IAAetuB,GACR2M,KAAK6pC,MAAM,WAAYx2C,EAAM2M,KAAKmC,SACtC,CACH,UAAA4nC,IAAc12C,GACP2M,KAAK6pC,MAAM,WAAYx2C,EAAM2M,KAAKwD,QACtC,CACH,SAAAwmC,IAAa32C,GACN2M,KAAK6pC,MAAM,WAAYx2C,EAAM2M,KAAK2D,OACtC,CACH,aAAAsmC,CAAch4C,GACP,OAAO+N,KAAKkqC,KAAKj4C,EAAI+N,KAAK2pC,YAAa,aAC3C,CACH,UAAAQ,CAAWl4C,GACJ,OAAO+N,KAAKkqC,KAAKj4C,EAAI+N,KAAKmC,SAAU,UACxC,CACH,SAAAioC,CAAUn4C,GACH,OAAO+N,KAAKkqC,KAAKj4C,EAAI+N,KAAKwD,QAAS,SACvC,CACH,QAAA6mC,CAASp4C,GACF,OAAO+N,KAAKkqC,KAAKj4C,EAAI+N,KAAK2D,OAAQ,QACtC,CACH,iBAAA2mC,IAAqBj3C,GACd2M,KAAK6pC,MAAM,aAAcx2C,EAAM2M,KAAK2pC,YACxC,CACH,cAAAY,IAAkBl3C,GACX2M,KAAK6pC,MAAM,aAAcx2C,EAAM2M,KAAKmC,SACxC,CACH,aAAAqoC,IAAiBn3C,GACV2M,KAAK6pC,MAAM,aAAcx2C,EAAM2M,KAAKwD,QACxC,CACH,YAAAinC,IAAgBp3C,GACT2M,KAAK6pC,MAAM,aAAcx2C,EAAM2M,KAAK2D,OACxC,CACH,KAAAkmC,CAAMxtB,EAAQhpB,EAAMq3C,GACb,IACOr3C,GACL2H,SAAS2vC,IACP,MAAMC,EAAMF,GAAiB1qC,KAAK6qC,oBAAoBF,GAClDD,GAAiBE,EAAIjC,UAAUgC,IAAQC,IAAQ5qC,KAAKwD,SAAWmnC,EAAI14C,GACnE+N,KAAK8qC,MAAMzuB,EAAQuuB,EAAKD,GAExBn3C,EAAKm3C,GAAMrzC,IACP,MAAMyzC,EAAUL,GAAiB1qC,KAAK6qC,oBAAoBvzC,GAC1D0I,KAAK8qC,MAAMzuB,EAAQ0uB,EAASzzC,EAAK,GAEzC,GAER,CACH,KAAAwzC,CAAMzuB,EAAQ2uB,EAAUC,GACjB,MAAMC,EAAct0C,EAAYylB,GAChClpB,EAAS83C,EAAU,SAAWC,GAAc,GAAID,GAChDD,EAAS3uB,GAAQ4uB,GACjB93C,EAAS83C,EAAU,QAAUC,GAAc,GAAID,EACnD,CACH,mBAAAJ,CAAoBv4C,GACb,IAAI,IAAIqB,EAAI,EAAGA,EAAIqM,KAAK4pC,iBAAiB91C,OAAQH,IAAI,CACjD,MAAMi3C,EAAM5qC,KAAK4pC,iBAAiBj2C,GAClC,GAAIi3C,EAAIjC,UAAUr2C,GACd,OAAOs4C,CAEf,CACA,OAAO5qC,KAAKwD,OAChB,CACH,IAAA0mC,CAAKj4C,EAAIy4C,EAAep4C,GACjB,MAAMgF,EAAOozC,EAAcrrC,IAAIpN,GAC/B,QAAa0P,IAATrK,EACA,MAAM,IAAI4a,MAAM,IAAMjgB,EAAK,yBAA2BK,EAAO,KAEjE,OAAOgF,CACX,EAEJ,IAAI0zC,GAA2B,IAAItB,GAEnC,MAAMyB,GACF,WAAA5pC,GACIvB,KAAKorC,MAAQ,EACjB,CACH,MAAAC,CAAOprC,EAAOqrC,EAAMj4C,EAAMof,GACN,eAAT64B,IACAtrC,KAAKorC,MAAQprC,KAAKurC,mBAAmBtrC,GAAO,GAC5CD,KAAKuY,QAAQvY,KAAKorC,MAAOnrC,EAAO,YAEpC,MAAMgB,EAAcwR,EAASzS,KAAKwB,aAAavB,GAAOwS,OAAOA,GAAUzS,KAAKwB,aAAavB,GACnF6U,EAAS9U,KAAKuY,QAAQtX,EAAahB,EAAOqrC,EAAMj4C,GAKtD,MAJa,iBAATi4C,IACAtrC,KAAKuY,QAAQtX,EAAahB,EAAO,QACjCD,KAAKuY,QAAQvY,KAAKorC,MAAOnrC,EAAO,cAE7B6U,CACX,CACH,OAAAyD,CAAQtX,EAAahB,EAAOqrC,EAAMj4C,GAC3BA,EAAOA,GAAQ,CAAC,EAChB,IAAK,MAAMm4C,KAAcvqC,EAAY,CACjC,MAAMwqC,EAASD,EAAWC,OAO1B,IAAyC,IAArCt4C,EANWs4C,EAAOH,GACP,CACXrrC,EACA5M,EACAm4C,EAAWt2C,SAEcu2C,IAAqBp4C,EAAKq4C,WACnD,OAAO,CAEf,CACA,OAAO,CACX,CACA,UAAAC,GACSz5C,EAAc8N,KAAKkqB,UACpBlqB,KAAK4rC,UAAY5rC,KAAKkqB,OACtBlqB,KAAKkqB,YAASvoB,EAEtB,CACH,YAAAH,CAAavB,GACN,GAAID,KAAKkqB,OACL,OAAOlqB,KAAKkqB,OAEhB,MAAMjpB,EAAcjB,KAAKkqB,OAASlqB,KAAKurC,mBAAmBtrC,GAE1D,OADAD,KAAK6rC,oBAAoB5rC,GAClBgB,CACX,CACA,kBAAAsqC,CAAmBtrC,EAAOqd,GACtB,MAAMf,EAAStc,GAASA,EAAMsc,OACxBrnB,EAAUhC,EAAeqpB,EAAOrnB,SAAWqnB,EAAOrnB,QAAQsO,QAAS,CAAC,GACpEA,EAWb,SAAoB+Y,GACjB,MAAMuvB,EAAW,CAAC,EACZtoC,EAAU,GACV3P,EAAOtB,OAAOsB,KAAKm3C,GAASxnC,QAAQ4V,OAC1C,IAAI,IAAIzlB,EAAI,EAAGA,EAAIE,EAAKC,OAAQH,IAC5B6P,EAAQ/M,KAAKu0C,GAASZ,UAAUv2C,EAAKF,KAEzC,MAAM+Q,EAAQ6X,EAAO/Y,SAAW,GAChC,IAAI,IAAI7P,EAAI,EAAGA,EAAI+Q,EAAM5Q,OAAQH,IAAI,CACjC,MAAM83C,EAAS/mC,EAAM/Q,IACY,IAA7B6P,EAAQxO,QAAQy2C,KAChBjoC,EAAQ/M,KAAKg1C,GACbK,EAASL,EAAOx5C,KAAM,EAE9B,CACA,MAAO,CACHuR,UACAsoC,WAER,CA9BwBC,CAAWxvB,GAC3B,OAAmB,IAAZrnB,GAAsBooB,EAuCrC,SAA2Brd,GAAO,QAAEuD,EAAQ,SAAEsoC,GAAa52C,EAASooB,GAChE,MAAMxI,EAAS,GACT9S,EAAU/B,EAAMkJ,aACtB,IAAK,MAAMsiC,KAAUjoC,EAAQ,CACzB,MAAMvR,EAAKw5C,EAAOx5C,GACZ0Z,EAAOqgC,GAAQ92C,EAAQjD,GAAKqrB,GACrB,OAAT3R,GAGJmJ,EAAOre,KAAK,CACRg1C,SACAv2C,QAAS+2C,GAAWhsC,EAAMsc,OAAQ,CAC9BkvB,SACA/mC,MAAOonC,EAAS75C,IACjB0Z,EAAM3J,IAEjB,CACA,OAAO8S,CACX,CAzDgDo3B,CAAkBjsC,EAAOuD,EAAStO,EAASooB,GAAhD,EACvC,CACH,mBAAAuuB,CAAoB5rC,GACb,MAAMksC,EAAsBnsC,KAAK4rC,WAAa,GACxC3qC,EAAcjB,KAAKkqB,OACnB6W,EAAO,CAAC5pC,EAAGC,IAAID,EAAEsb,QAAQ3c,IAAKsB,EAAEg1C,MAAMp2C,GAAIF,EAAE21C,OAAOx5C,KAAO+D,EAAEy1C,OAAOx5C,OACzE+N,KAAKuY,QAAQwoB,EAAKoL,EAAqBlrC,GAAchB,EAAO,QAC5DD,KAAKuY,QAAQwoB,EAAK9/B,EAAakrC,GAAsBlsC,EAAO,QAChE,EAsBJ,SAAS+rC,GAAQ92C,EAASooB,GACtB,OAAKA,IAAmB,IAAZpoB,GAGI,IAAZA,EACO,CAAC,EAELA,EALI,IAMf,CAoBA,SAAS+2C,GAAW1vB,GAAQ,OAAEkvB,EAAO,MAAE/mC,GAAUiH,EAAM3J,GACnD,MAAMnO,EAAO0oB,EAAO8vB,gBAAgBZ,GAC9Bj8B,EAAS+M,EAAO8H,gBAAgB1Y,EAAM9X,GAI5C,OAHI6Q,GAAS+mC,EAAO7mC,UAChB4K,EAAO/Y,KAAKg1C,EAAO7mC,UAEhB2X,EAAO+H,eAAe9U,EAAQxN,EAAS,CAC1C,IACD,CACC8Q,YAAY,EACZC,WAAW,EACXH,SAAS,GAEjB,CAEA,SAAS05B,GAAah6C,EAAM4C,GACxB,MAAMq3C,EAAkB3nC,GAAS9C,SAASxP,IAAS,CAAC,EAEpD,QADwB4C,EAAQ4M,UAAY,CAAC,GAAGxP,IAAS,CAAC,GACpCyQ,WAAa7N,EAAQ6N,WAAawpC,EAAgBxpC,WAAa,GACzF,CAaA,SAASypC,GAAcv6C,GACnB,GAAW,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,EAC5B,OAAOA,CAEf,CASA,SAASw6C,GAAcx6C,KAAOy6C,GAC1B,GAAIF,GAAcv6C,GACd,OAAOA,EAEX,IAAK,MAAM0Z,KAAQ+gC,EAAa,CAC5B,MAAMntB,EAAO5T,EAAK4T,OAZL,SADKuQ,EAayBnkB,EAAKmkB,WAZb,WAAbA,EACf,IAEM,SAAbA,GAAoC,UAAbA,EAChB,SADX,IASiE79B,EAAG6B,OAAS,GAAK04C,GAAcv6C,EAAG,GAAG06C,eAClG,GAAIptB,EACA,OAAOA,CAEf,CAjBJ,IAA0BuQ,EAkBtB,MAAM,IAAI5d,MAAM,6BAA6BjgB,uDACjD,CACA,SAAS26C,GAAmB36C,EAAIstB,EAAMuC,GAClC,GAAIA,EAAQvC,EAAO,YAActtB,EAC7B,MAAO,CACHstB,OAGZ,CAgEA,SAASstB,GAAYtwB,GACjB,MAAMrnB,EAAUqnB,EAAOrnB,UAAYqnB,EAAOrnB,QAAU,CAAC,GACrDA,EAAQsO,QAAUtQ,EAAegC,EAAQsO,QAAS,CAAC,GACnDtO,EAAQyO,OAzDZ,SAA0B4Y,EAAQrnB,GAC9B,MAAM43C,EAAgB9rC,GAAUub,EAAOjqB,OAAS,CAC5CqR,OAAQ,CAAC,GAEPopC,EAAe73C,EAAQyO,QAAU,CAAC,EAClCqpC,EAAiBV,GAAa/vB,EAAOjqB,KAAM4C,GAC3CyO,EAASpR,OAAOoC,OAAO,MA8C7B,OA7CApC,OAAOsB,KAAKk5C,GAAc/xC,SAAS/I,IAC/B,MAAMg7C,EAAYF,EAAa96C,GAC/B,IAAKW,EAASq6C,GACV,OAAOn+B,QAAQo+B,MAAM,0CAA0Cj7C,KAEnE,GAAIg7C,EAAUx7B,OACV,OAAO3C,QAAQC,KAAK,kDAAkD9c,KAE1E,MAAMstB,EAAOktB,GAAcx6C,EAAIg7C,EAxBvC,SAAkCh7C,EAAIsqB,GAClC,GAAIA,EAAOhU,MAAQgU,EAAOhU,KAAKzG,SAAU,CACrC,MAAMqrC,EAAU5wB,EAAOhU,KAAKzG,SAAS2Q,QAAQvU,GAAIA,EAAEikB,UAAYlwB,GAAMiM,EAAEmkB,UAAYpwB,IACnF,GAAIk7C,EAAQr5C,OACR,OAAO84C,GAAmB36C,EAAI,IAAKk7C,EAAQ,KAAOP,GAAmB36C,EAAI,IAAKk7C,EAAQ,GAE9F,CACA,MAAO,CAAC,CACZ,CAgBkDC,CAAyBn7C,EAAIsqB,GAAS3X,GAASjB,OAAOspC,EAAU36C,OACpG+6C,EA5Dd,SAAmC9tB,EAAMxc,GACrC,OAAOwc,IAASxc,EAAY,UAAY,SAC5C,CA0D0BuqC,CAA0B/tB,EAAMytB,GAC5CO,EAAsBT,EAAcnpC,QAAU,CAAC,EACrDA,EAAO1R,GAAMwD,EAAQlD,OAAOoC,OAAO,MAAO,CACtC,CACI4qB,QAEJ0tB,EACAM,EAAoBhuB,GACpBguB,EAAoBF,IACtB,IAEN9wB,EAAOhU,KAAKzG,SAAS9G,SAAS8mB,IAC1B,MAAMxvB,EAAOwvB,EAAQxvB,MAAQiqB,EAAOjqB,KAC9ByQ,EAAY+e,EAAQ/e,WAAaupC,GAAah6C,EAAM4C,GAEpDq4C,GADkBvsC,GAAU1O,IAAS,CAAC,GACAqR,QAAU,CAAC,EACvDpR,OAAOsB,KAAK05C,GAAqBvyC,SAASwyC,IACtC,MAAMjuB,EAtFlB,SAAmCttB,EAAI8Q,GACnC,IAAIwc,EAAOttB,EAMX,MALW,YAAPA,EACAstB,EAAOxc,EACO,YAAP9Q,IACPstB,EAAqB,MAAdxc,EAAoB,IAAM,KAE9Bwc,CACX,CA8EyBkuB,CAA0BD,EAAWzqC,GAC5C9Q,EAAK6vB,EAAQvC,EAAO,WAAaA,EACvC5b,EAAO1R,GAAM0R,EAAO1R,IAAOM,OAAOoC,OAAO,MACzCc,EAAQkO,EAAO1R,GAAK,CAChB,CACIstB,QAEJwtB,EAAa96C,GACbs7C,EAAoBC,IACtB,GACJ,IAENj7C,OAAOsB,KAAK8P,GAAQ3I,SAASjG,IACzB,MAAM2O,EAAQC,EAAO5O,GACrBU,EAAQiO,EAAO,CACXkB,GAASjB,OAAOD,EAAMpR,MACtBsS,GAASlB,OACX,IAECC,CACX,CAIqB+pC,CAAiBnxB,EAAQrnB,EAC9C,CACA,SAASy4C,GAASplC,GAId,OAHAA,EAAOA,GAAQ,CAAC,GACXzG,SAAWyG,EAAKzG,UAAY,GACjCyG,EAAKyc,OAASzc,EAAKyc,QAAU,GACtBzc,CACX,CAOA,MAAMqlC,GAAW,IAAI/uC,IACfgvC,GAAa,IAAIh8B,IACvB,SAASi8B,GAAW7uC,EAAU8uC,GAC1B,IAAIl6C,EAAO+5C,GAASvuC,IAAIJ,GAMxB,OALKpL,IACDA,EAAOk6C,IACPH,GAASpuC,IAAIP,EAAUpL,GACvBg6C,GAAWz7B,IAAIve,IAEZA,CACX,CACA,MAAMm6C,GAAa,CAACxuC,EAAKtJ,EAAKnB,KAC1B,MAAM4W,EAAO1V,EAAiBC,EAAKnB,QACtB4M,IAATgK,GACAnM,EAAI4S,IAAIzG,EACZ,EAEJ,MAAMsiC,GACF,WAAA1sC,CAAYgb,GACRvc,KAAKkuC,QAzBb,SAAoB3xB,GAIhB,OAHAA,EAASA,GAAU,CAAC,GACbhU,KAAOolC,GAASpxB,EAAOhU,MAC9BskC,GAAYtwB,GACLA,CACX,CAoBuB4xB,CAAW5xB,GAC1Bvc,KAAKouC,YAAc,IAAIvvC,IACvBmB,KAAKquC,eAAiB,IAAIxvC,GAC9B,CACA,YAAIoD,GACA,OAAOjC,KAAKkuC,QAAQjsC,QACxB,CACA,QAAI3P,GACA,OAAO0N,KAAKkuC,QAAQ57C,IACxB,CACA,QAAIA,CAAKA,GACL0N,KAAKkuC,QAAQ57C,KAAOA,CACxB,CACA,QAAIiW,GACA,OAAOvI,KAAKkuC,QAAQ3lC,IACxB,CACA,QAAIA,CAAKA,GACLvI,KAAKkuC,QAAQ3lC,KAAOolC,GAASplC,EACjC,CACA,WAAIrT,GACA,OAAO8K,KAAKkuC,QAAQh5C,OACxB,CACA,WAAIA,CAAQA,GACR8K,KAAKkuC,QAAQh5C,QAAUA,CAC3B,CACA,WAAIsO,GACA,OAAOxD,KAAKkuC,QAAQ1qC,OACxB,CACA,MAAAqY,GACI,MAAMU,EAASvc,KAAKkuC,QACpBluC,KAAKsuC,aACLzB,GAAYtwB,EAChB,CACA,UAAA+xB,GACItuC,KAAKouC,YAAYG,QACjBvuC,KAAKquC,eAAeE,OACxB,CACH,gBAAAnqB,CAAiBoqB,GACV,OAAOV,GAAWU,GAAa,IAAI,CAC3B,CACI,YAAYA,IACZ,MAGhB,CACH,yBAAAxmB,CAA0BwmB,EAAazmB,GAChC,OAAO+lB,GAAW,GAAGU,gBAA0BzmB,KAAc,IAAI,CACzD,CACI,YAAYymB,iBAA2BzmB,IACvC,eAAeA,KAEnB,CACI,YAAYymB,IACZ,MAGhB,CACH,uBAAA9mB,CAAwB8mB,EAAahnB,GAC9B,OAAOsmB,GAAW,GAAGU,KAAehnB,KAAe,IAAI,CAC/C,CACI,YAAYgnB,cAAwBhnB,IACpC,YAAYgnB,IACZ,YAAYhnB,IACZ,MAGhB,CACH,eAAA6kB,CAAgBZ,GACT,MAAMx5C,EAAKw5C,EAAOx5C,GAElB,OAAO67C,GAAW,GADL9tC,KAAK1N,eACkBL,KAAM,IAAI,CACtC,CACI,WAAWA,OACRw5C,EAAOgD,wBAA0B,MAGpD,CACH,aAAAC,CAAcC,EAAWC,GAClB,MAAMR,EAAcpuC,KAAKouC,YACzB,IAAIt+B,EAAQs+B,EAAY/uC,IAAIsvC,GAK5B,OAJK7+B,IAAS8+B,IACV9+B,EAAQ,IAAIjR,IACZuvC,EAAY5uC,IAAImvC,EAAW7+B,IAExBA,CACX,CACH,eAAAuU,CAAgBsqB,EAAWE,EAAUD,GAC9B,MAAM,QAAE15C,EAAQ,KAAE5C,GAAU0N,KACtB8P,EAAQ9P,KAAK0uC,cAAcC,EAAWC,GACtCvuB,EAASvQ,EAAMzQ,IAAIwvC,GACzB,GAAIxuB,EACA,OAAOA,EAEX,MAAM7Q,EAAS,IAAIqC,IACnBg9B,EAAS7zC,SAASnH,IACV86C,IACAn/B,EAAO4C,IAAIu8B,GACX96C,EAAKmH,SAASjG,GAAMi5C,GAAWx+B,EAAQm/B,EAAW55C,MAEtDlB,EAAKmH,SAASjG,GAAMi5C,GAAWx+B,EAAQta,EAASH,KAChDlB,EAAKmH,SAASjG,GAAMi5C,GAAWx+B,EAAQxO,GAAU1O,IAAS,CAAC,EAAGyC,KAC9DlB,EAAKmH,SAASjG,GAAMi5C,GAAWx+B,EAAQ5K,GAAU7P,KACjDlB,EAAKmH,SAASjG,GAAMi5C,GAAWx+B,EAAQvO,GAAalM,IAAK,IAE7D,MAAM2F,EAAQrI,MAAM+S,KAAKoK,GAOzB,OANqB,IAAjB9U,EAAM5G,QACN4G,EAAMjE,KAAKlE,OAAOoC,OAAO,OAEzBk5C,GAAWt2C,IAAIs3C,IACf/+B,EAAMtQ,IAAIqvC,EAAUn0C,GAEjBA,CACX,CACH,iBAAAo0C,GACO,MAAM,QAAE55C,EAAQ,KAAE5C,GAAU0N,KAC5B,MAAO,CACH9K,EACA8L,GAAU1O,IAAS,CAAC,EACpBsS,GAAS9C,SAASxP,IAAS,CAAC,EAC5B,CACIA,QAEJsS,GACA3D,GAER,CACH,mBAAA2mB,CAAoBpY,EAAQmY,EAAO3lB,EAASyN,EAAW,CAChD,KAEA,MAAMqF,EAAS,CACXmI,SAAS,IAEP,SAAE9mB,EAAS,YAAE44C,GAAiBC,GAAYhvC,KAAKquC,eAAgB7+B,EAAQC,GAC7E,IAAIva,EAAUiB,GAsCtB,SAAqBsa,EAAOkX,GACxB,MAAM,aAAE3V,EAAa,YAAEO,GAAiB/Q,GAAaiP,GACrD,IAAK,MAAMlC,KAAQoZ,EAAM,CACrB,MAAM7U,EAAad,EAAazD,GAC1BwE,EAAYR,EAAYhE,GACxBpc,GAAS4gB,GAAaD,IAAerC,EAAMlC,GACjD,GAAIuE,IAAe7b,EAAW9E,IAAU88C,GAAY98C,KAAW4gB,GAAa3gB,EAAQD,GAChF,OAAO,CAEf,CACA,OAAO,CACX,EAhDY+8C,CAAY/4C,EAAUwxB,KACtB7S,EAAOmI,SAAU,EAGjB/nB,EAAUoc,GAAenb,EAFzB6L,EAAU/K,EAAW+K,GAAWA,IAAYA,EACxBhC,KAAKskB,eAAe9U,EAAQxN,EAAS+sC,KAG7D,IAAK,MAAMxgC,KAAQoZ,EACf7S,EAAOvG,GAAQrZ,EAAQqZ,GAE3B,OAAOuG,CACX,CACH,cAAAwP,CAAe9U,EAAQxN,EAASyN,EAAW,CACpC,IACD+B,GACC,MAAM,SAAErb,GAAc64C,GAAYhvC,KAAKquC,eAAgB7+B,EAAQC,GAC/D,OAAO7c,EAASoP,GAAWsP,GAAenb,EAAU6L,OAASL,EAAW6P,GAAsBrb,CAClG,EAEJ,SAAS64C,GAAYG,EAAe3/B,EAAQC,GACxC,IAAIK,EAAQq/B,EAAc9vC,IAAImQ,GACzBM,IACDA,EAAQ,IAAIjR,IACZswC,EAAc3vC,IAAIgQ,EAAQM,IAE9B,MAAM7Q,EAAWwQ,EAAS0C,OAC1B,IAAIkO,EAASvQ,EAAMzQ,IAAIJ,GASvB,OARKohB,IAEDA,EAAS,CACLlqB,SAFaoZ,GAAgBC,EAAQC,GAGrCs/B,YAAat/B,EAASgD,QAAQnZ,IAAKA,EAAEqzC,cAAc7rC,SAAS,YAEhEgP,EAAMtQ,IAAIP,EAAUohB,IAEjBA,CACX,CACA,MAAM4uB,GAAe98C,GAAQS,EAAST,IAAUI,OAAOsqB,oBAAoB1qB,GAAOi6C,MAAMr3C,GAAMkC,EAAW9E,EAAM4C,MAgBzGq6C,GAAkB,CACpB,MACA,SACA,OACA,QACA,aAEJ,SAASC,GAAqBvf,EAAUvQ,GACpC,MAAoB,QAAbuQ,GAAmC,WAAbA,IAAgE,IAAvCsf,GAAgBp6C,QAAQ86B,IAA6B,MAATvQ,CACtG,CACA,SAAS+vB,GAAcC,EAAIC,GACvB,OAAO,SAASr4C,EAAGC,GACf,OAAOD,EAAEo4C,KAAQn4C,EAAEm4C,GAAMp4C,EAAEq4C,GAAMp4C,EAAEo4C,GAAMr4C,EAAEo4C,GAAMn4C,EAAEm4C,EACvD,CACJ,CACA,SAASE,GAAqBztC,GAC1B,MAAM/B,EAAQ+B,EAAQ/B,MAChB0c,EAAmB1c,EAAM/K,QAAQwM,UACvCzB,EAAM6hC,cAAc,eACpB3uC,EAASwpB,GAAoBA,EAAiB+yB,WAAY,CACtD1tC,GACD/B,EACP,CACA,SAAS0vC,GAAoB3tC,GACzB,MAAM/B,EAAQ+B,EAAQ/B,MAChB0c,EAAmB1c,EAAM/K,QAAQwM,UACvCvO,EAASwpB,GAAoBA,EAAiBizB,WAAY,CACtD5tC,GACD/B,EACP,CACC,SAAS4vC,GAAUv4C,GAShB,OARIqc,MAAqC,iBAATrc,EAC5BA,EAAOsc,SAASk8B,eAAex4C,GACxBA,GAAQA,EAAKxD,SACpBwD,EAAOA,EAAK,IAEZA,GAAQA,EAAK4R,SACb5R,EAAOA,EAAK4R,QAET5R,CACX,CACA,MAAMy4C,GAAY,CAAC,EACbC,GAAYj7C,IACd,MAAMmU,EAAS2mC,GAAU96C,GACzB,OAAOxC,OAAOqN,OAAOmwC,IAAWt9B,QAAQw9B,GAAIA,EAAE/mC,SAAWA,IAAQuQ,KAAK,EAE1E,SAASy2B,GAAgBh6C,EAAK0D,EAAOyvB,GACjC,MAAMx1B,EAAOtB,OAAOsB,KAAKqC,GACzB,IAAK,MAAMnB,KAAOlB,EAAK,CACnB,MAAMs8C,GAAUp7C,EAChB,GAAIo7C,GAAUv2C,EAAO,CACjB,MAAMzH,EAAQ+D,EAAInB,UACXmB,EAAInB,IACPs0B,EAAO,GAAK8mB,EAASv2C,KACrB1D,EAAIi6C,EAAS9mB,GAAQl3B,EAE7B,CACJ,CACJ,CAUA,SAASi+C,GAAe1sC,EAAOsjB,EAAWqpB,GACtC,OAAO3sC,EAAMxO,QAAQsR,KAAO9C,EAAM2sC,GAASrpB,EAAUqpB,EACzD,CAaA,MAAMC,GACF9vB,gBAAkB5b,GAClB4b,iBAAmBuvB,GACnBvvB,iBAAmBxf,GACnBwf,gBAAkBwqB,GAClBxqB,eA1FU,QA2FVA,gBAAkBwvB,GAClB,eAAOnH,IAAYzvB,GACf4xB,GAAS54B,OAAOgH,GAChBm3B,IACJ,CACA,iBAAO9G,IAAcrwB,GACjB4xB,GAAS1wB,UAAUlB,GACnBm3B,IACJ,CACA,WAAAhvC,CAAYjK,EAAMk5C,GACd,MAAMj0B,EAASvc,KAAKuc,OAAS,IAAI0xB,GAAOuC,GAClCC,EAAgBZ,GAAUv4C,GAC1Bo5C,EAAgBV,GAASS,GAC/B,GAAIC,EACA,MAAM,IAAIx+B,MAAM,4CAA+Cw+B,EAAcz+C,GAA7D,kDAA6Hy+C,EAAcxnC,OAAOjX,GAAK,oBAE3K,MAAMiD,EAAUqnB,EAAO+H,eAAe/H,EAAOuyB,oBAAqB9uC,KAAKmJ,cACvEnJ,KAAKiC,SAAW,IAAKsa,EAAOta,UAlnEpC,SAAyBiH,GACrB,OAAKyK,MAAgD,oBAApBg9B,iBAAmCznC,aAAkBynC,gBAC3EzZ,GAEJ8C,EACX,CA6mEgD4W,CAAgBH,IACxDzwC,KAAKiC,SAASg1B,aAAa1a,GAC3B,MAAMva,EAAUhC,KAAKiC,SAAS20B,eAAe6Z,EAAev7C,EAAQ2hC,aAC9D3tB,EAASlH,GAAWA,EAAQkH,OAC5BK,EAASL,GAAUA,EAAOK,OAC1BlC,EAAQ6B,GAAUA,EAAO7B,MAC/BrH,KAAK/N,GAAKD,IACVgO,KAAK4C,IAAMZ,EACXhC,KAAKkJ,OAASA,EACdlJ,KAAKqH,MAAQA,EACbrH,KAAKuJ,OAASA,EACdvJ,KAAK6wC,SAAW37C,EAChB8K,KAAK8wC,aAAe9wC,KAAK62B,YACzB72B,KAAK+0B,QAAU,GACf/0B,KAAK+wC,UAAY,GACjB/wC,KAAKof,aAAUzd,EACf3B,KAAKm0B,MAAQ,GACbn0B,KAAK+I,6BAA0BpH,EAC/B3B,KAAKgnB,eAAYrlB,EACjB3B,KAAKsZ,QAAU,GACftZ,KAAKgxC,gBAAarvC,EAClB3B,KAAKixC,WAAa,CAAC,EAClBjxC,KAAKkxC,0BAAuBvvC,EAC7B3B,KAAKmxC,gBAAkB,GACvBnxC,KAAK2D,OAAS,CAAC,EACf3D,KAAKoxC,SAAW,IAAIjG,GACpBnrC,KAAK06B,SAAW,CAAC,EACjB16B,KAAKqxC,eAAiB,CAAC,EACvBrxC,KAAKsxC,UAAW,EAChBtxC,KAAKooB,yBAAsBzmB,EAC3B3B,KAAKohB,cAAWzf,EAChB3B,KAAKuxC,UD18JT,SAAkBn+C,EAAI6R,GACtB,IAAIusC,EACJ,OAAO,YAAYn+C,GAOf,OANI4R,GACAwsC,aAAaD,GACbA,EAAUE,WAAWt+C,EAAI6R,EAAO5R,IAEhCD,EAAGG,MAAMyM,KAAM3M,GAEZ4R,CACX,CACJ,CC+7JyB0sC,EAAU1uC,GAAOjD,KAAK6b,OAAO5Y,IAAO/N,EAAQ08C,aAAe,GAC5E5xC,KAAKypB,aAAe,GACpBsmB,GAAU/vC,KAAK/N,IAAM+N,KAChBgC,GAAYkH,GAIjBqR,GAAST,OAAO9Z,KAAM,WAAYyvC,IAClCl1B,GAAST,OAAO9Z,KAAM,WAAY2vC,IAClC3vC,KAAK6xC,cACD7xC,KAAKsxC,UACLtxC,KAAK6b,UAPL/M,QAAQo+B,MAAM,oEAStB,CACA,eAAIrW,GACA,MAAQ3hC,SAAS,YAAE2hC,EAAY,oBAAEzzB,GAAuB,MAAEiE,EAAM,OAAEkC,EAAO,aAAEunC,GAAkB9wC,KAC7F,OAAK9N,EAAc2kC,GAGfzzB,GAAuB0tC,EAChBA,EAEJvnC,EAASlC,EAAQkC,EAAS,KALtBstB,CAMf,CACA,QAAItuB,GACA,OAAOvI,KAAKuc,OAAOhU,IACvB,CACA,QAAIA,CAAKA,GACLvI,KAAKuc,OAAOhU,KAAOA,CACvB,CACA,WAAIrT,GACA,OAAO8K,KAAK6wC,QAChB,CACA,WAAI37C,CAAQA,GACR8K,KAAKuc,OAAOrnB,QAAUA,CAC1B,CACA,YAAI81C,GACA,OAAOA,EACX,CACH,WAAA6G,GASO,OARA7xC,KAAK8hC,cAAc,cACf9hC,KAAK9K,QAAQuO,WACbzD,KAAKyF,SAELwQ,GAAYjW,KAAMA,KAAK9K,QAAQ6M,kBAEnC/B,KAAK8xC,aACL9xC,KAAK8hC,cAAc,aACZ9hC,IACX,CACA,KAAAuuC,GAEI,OADAtlC,GAAYjJ,KAAKkJ,OAAQlJ,KAAK4C,KACvB5C,IACX,CACA,IAAAoa,GAEI,OADAG,GAASH,KAAKpa,MACPA,IACX,CACH,MAAAyF,CAAO4B,EAAOkC,GACFgR,GAASpB,QAAQnZ,MAGlBA,KAAK+xC,kBAAoB,CACrB1qC,QACAkC,UAJJvJ,KAAKgyC,QAAQ3qC,EAAOkC,EAO5B,CACA,OAAAyoC,CAAQ3qC,EAAOkC,GACX,MAAMrU,EAAU8K,KAAK9K,QACfgU,EAASlJ,KAAKkJ,OACd2tB,EAAc3hC,EAAQkO,qBAAuBpD,KAAK62B,YAClDob,EAAUjyC,KAAKiC,SAAS80B,eAAe7tB,EAAQ7B,EAAOkC,EAAQstB,GAC9Dqb,EAAWh9C,EAAQ6M,kBAAoB/B,KAAKiC,SAASC,sBACrDe,EAAOjD,KAAKqH,MAAQ,SAAW,SACrCrH,KAAKqH,MAAQ4qC,EAAQ5qC,MACrBrH,KAAKuJ,OAAS0oC,EAAQ1oC,OACtBvJ,KAAK8wC,aAAe9wC,KAAK62B,YACpB5gB,GAAYjW,KAAMkyC,GAAU,KAGjClyC,KAAK8hC,cAAc,SAAU,CACzBzqC,KAAM46C,IAEV9+C,EAAS+B,EAAQi9C,SAAU,CACvBnyC,KACAiyC,GACDjyC,MACCA,KAAKsxC,UACDtxC,KAAKuxC,UAAUtuC,IACfjD,KAAKoyC,SAGjB,CACA,mBAAAC,GAGI7+C,EAFgBwM,KAAK9K,QACSyO,QAAU,CAAC,GACrB,CAAC2uC,EAAa/J,KAC9B+J,EAAYrgD,GAAKs2C,CAAM,GAE/B,CACH,mBAAAgK,GACO,MAAMr9C,EAAU8K,KAAK9K,QACfs9C,EAAYt9C,EAAQyO,OACpBA,EAAS3D,KAAK2D,OACd8uC,EAAUlgD,OAAOsB,KAAK8P,GAAQqW,QAAO,CAAC9jB,EAAKjE,KAC7CiE,EAAIjE,IAAM,EACHiE,IACR,CAAC,GACJ,IAAIkjB,EAAQ,GACRo5B,IACAp5B,EAAQA,EAAMiR,OAAO93B,OAAOsB,KAAK2+C,GAAW/9C,KAAKxC,IAC7C,MAAMy6C,EAAe8F,EAAUvgD,GACzBstB,EAAOktB,GAAcx6C,EAAIy6C,GACzBgG,EAAoB,MAATnzB,EACXwN,EAAwB,MAATxN,EACrB,MAAO,CACHrqB,QAASw3C,EACTiG,UAAWD,EAAW,YAAc3lB,EAAe,SAAW,OAC9D6lB,MAAOF,EAAW,eAAiB3lB,EAAe,WAAa,SAClE,MAGTv5B,EAAK4lB,GAAQ9hB,IACT,MAAMo1C,EAAep1C,EAAKpC,QACpBjD,EAAKy6C,EAAaz6C,GAClBstB,EAAOktB,GAAcx6C,EAAIy6C,GACzBmG,EAAY3/C,EAAew5C,EAAap6C,KAAMgF,EAAKs7C,YAC3BjxC,IAA1B+qC,EAAa5c,UAA0Buf,GAAqB3C,EAAa5c,SAAUvQ,KAAU8vB,GAAqB/3C,EAAKq7C,aACvHjG,EAAa5c,SAAWx4B,EAAKq7C,WAEjCF,EAAQxgD,IAAM,EACd,IAAIyR,EAAQ,KACRzR,KAAM0R,GAAUA,EAAO1R,GAAIK,OAASugD,EACpCnvC,EAAQC,EAAO1R,IAGfyR,EAAQ,IADWsnC,GAASX,SAASwI,GAC7B,CAAe,CACnB5gD,KACAK,KAAMugD,EACNjwC,IAAK5C,KAAK4C,IACV3C,MAAOD,OAEX2D,EAAOD,EAAMzR,IAAMyR,GAEvBA,EAAM06B,KAAKsO,EAAcx3C,EAAQ,IAErC1B,EAAKi/C,GAAS,CAACK,EAAY7gD,KAClB6gD,UACMnvC,EAAO1R,EAClB,IAEJuB,EAAKmQ,GAASD,IACVmxB,GAAQnY,UAAU1c,KAAM0D,EAAOA,EAAMxO,SACrC2/B,GAAQC,OAAO90B,KAAM0D,EAAM,GAEnC,CACH,eAAAqvC,GACO,MAAMl1B,EAAW7d,KAAK+wC,UAChB7nB,EAAUlpB,KAAKuI,KAAKzG,SAAShO,OAC7Bm1B,EAAUpL,EAAS/pB,OAEzB,GADA+pB,EAAS0M,MAAK,CAACpzB,EAAGC,IAAID,EAAE7C,MAAQ8C,EAAE9C,QAC9B20B,EAAUC,EAAS,CACnB,IAAI,IAAIv1B,EAAIu1B,EAASv1B,EAAIs1B,IAAWt1B,EAChCqM,KAAKgzC,oBAAoBr/C,GAE7BkqB,EAAS9iB,OAAOmuB,EAASD,EAAUC,EACvC,CACAlpB,KAAKmxC,gBAAkBtzB,EAASlrB,MAAM,GAAG43B,KAAK+kB,GAAc,QAAS,SACzE,CACH,2BAAA2D,GACO,MAAQlC,UAAWlzB,EAAWtV,MAAM,SAAEzG,IAAiB9B,KACnD6d,EAAS/pB,OAASgO,EAAShO,eACpBkM,KAAKof,QAEhBvB,EAAS7iB,SAAQ,CAACqjB,EAAM/pB,KACqC,IAArDwN,EAAS2Q,QAAQ3c,GAAIA,IAAMuoB,EAAK60B,WAAUp/C,QAC1CkM,KAAKgzC,oBAAoB1+C,EAC7B,GAER,CACA,wBAAA6+C,GACI,MAAMC,EAAiB,GACjBtxC,EAAW9B,KAAKuI,KAAKzG,SAC3B,IAAInO,EAAGO,EAEP,IADA8L,KAAKizC,8BACDt/C,EAAI,EAAGO,EAAO4N,EAAShO,OAAQH,EAAIO,EAAMP,IAAI,CAC7C,MAAMmuB,EAAUhgB,EAASnO,GACzB,IAAI0qB,EAAOre,KAAKgjB,eAAervB,GAC/B,MAAMrB,EAAOwvB,EAAQxvB,MAAQ0N,KAAKuc,OAAOjqB,KAWzC,GAVI+rB,EAAK/rB,MAAQ+rB,EAAK/rB,OAASA,IAC3B0N,KAAKgzC,oBAAoBr/C,GACzB0qB,EAAOre,KAAKgjB,eAAervB,IAE/B0qB,EAAK/rB,KAAOA,EACZ+rB,EAAKtb,UAAY+e,EAAQ/e,WAAaupC,GAAah6C,EAAM0N,KAAK9K,SAC9DmpB,EAAKg1B,MAAQvxB,EAAQuxB,OAAS,EAC9Bh1B,EAAK/pB,MAAQX,EACb0qB,EAAKoI,MAAQ,GAAK3E,EAAQ2E,MAC1BpI,EAAKzY,QAAU5F,KAAKszC,iBAAiB3/C,GACjC0qB,EAAKY,WACLZ,EAAKY,WAAW4C,YAAYluB,GAC5B0qB,EAAKY,WAAWwC,iBACb,CACH,MAAM8xB,EAAkBvI,GAASf,cAAc33C,IACzC,mBAAEgvB,EAAmB,gBAAEC,GAAqB3c,GAAS9C,SAASxP,GACpEC,OAAOmO,OAAO6yC,EAAiB,CAC3BhyB,gBAAiBypB,GAASb,WAAW5oB,GACrCD,mBAAoBA,GAAsB0pB,GAASb,WAAW7oB,KAElEjD,EAAKY,WAAa,IAAIs0B,EAAgBvzC,KAAMrM,GAC5Cy/C,EAAe38C,KAAK4nB,EAAKY,WAC7B,CACJ,CAEA,OADAjf,KAAK+yC,kBACEK,CACX,CACH,cAAAI,GACOhgD,EAAKwM,KAAKuI,KAAKzG,UAAU,CAACggB,EAASztB,KAC/B2L,KAAKgjB,eAAe3uB,GAAc4qB,WAAWkE,OAAO,GACrDnjB,KACP,CACH,KAAAmjB,GACOnjB,KAAKwzC,iBACLxzC,KAAK8hC,cAAc,QACvB,CACA,MAAAjmB,CAAO5Y,GACH,MAAMsZ,EAASvc,KAAKuc,OACpBA,EAAOV,SACP,MAAM3mB,EAAU8K,KAAK6wC,SAAWt0B,EAAO+H,eAAe/H,EAAOuyB,oBAAqB9uC,KAAKmJ,cACjFsqC,EAAgBzzC,KAAKooB,qBAAuBlzB,EAAQwM,UAK1D,GAJA1B,KAAK0zC,gBACL1zC,KAAK2zC,sBACL3zC,KAAK4zC,uBACL5zC,KAAKoxC,SAASzF,cAIP,IAHH3rC,KAAK8hC,cAAc,eAAgB,CACnC7+B,OACAyoC,YAAY,IAEZ,OAEJ,MAAM0H,EAAiBpzC,KAAKmzC,2BAC5BnzC,KAAK8hC,cAAc,wBACnB,IAAI3M,EAAa,EACjB,IAAI,IAAIxhC,EAAI,EAAGO,EAAO8L,KAAKuI,KAAKzG,SAAShO,OAAQH,EAAIO,EAAMP,IAAI,CAC3D,MAAM,WAAEsrB,GAAgBjf,KAAKgjB,eAAervB,GACtCwvB,GAASswB,IAAyD,IAAxCL,EAAep+C,QAAQiqB,GACvDA,EAAW6E,sBAAsBX,GACjCgS,EAAa19B,KAAKiC,KAAKulB,EAAWsH,iBAAkB4O,EACxD,CACAA,EAAan1B,KAAK6zC,YAAc3+C,EAAQo+B,OAAOxtB,YAAcqvB,EAAa,EAC1En1B,KAAK8zC,cAAc3e,GACdse,GACDjgD,EAAK4/C,GAAiBn0B,IAClBA,EAAWkE,OAAO,IAG1BnjB,KAAK+zC,gBAAgB9wC,GACrBjD,KAAK8hC,cAAc,cAAe,CAC9B7+B,SAEJjD,KAAK+0B,QAAQxK,KAAK+kB,GAAc,IAAK,SACrC,MAAM,QAAEh2B,EAAQ,WAAE03B,GAAgBhxC,KAC9BgxC,EACAhxC,KAAKg0C,cAAchD,GAAY,GACxB13B,EAAQxlB,QACfkM,KAAKi0C,mBAAmB36B,EAASA,GAAS,GAE9CtZ,KAAKoyC,QACT,CACH,aAAAsB,GACOlgD,EAAKwM,KAAK2D,QAASD,IACfmxB,GAAQI,UAAUj1B,KAAM0D,EAAM,IAElC1D,KAAKqyC,sBACLryC,KAAKuyC,qBACT,CACH,mBAAAoB,GACO,MAAMz+C,EAAU8K,KAAK9K,QACfg/C,EAAiB,IAAIriC,IAAItf,OAAOsB,KAAKmM,KAAKixC,aAC1CkD,EAAY,IAAItiC,IAAI3c,EAAQkN,QAC7BlL,EAAUg9C,EAAgBC,MAAgBn0C,KAAKkxC,uBAAyBh8C,EAAQuO,aACjFzD,KAAKo0C,eACLp0C,KAAK8xC,aAEb,CACH,oBAAA8B,GACO,MAAM,eAAEvC,GAAoBrxC,KACtBq0C,EAAUr0C,KAAKs0C,0BAA4B,GACjD,IAAK,MAAM,OAAEj4B,EAAO,MAAEziB,EAAM,MAAE4qB,KAAY6vB,EAEtCnE,GAAgBmB,EAAgBz3C,EADR,oBAAXyiB,GAAgCmI,EAAQA,EAG7D,CACH,sBAAA8vB,GACO,MAAM7qB,EAAezpB,KAAKypB,aAC1B,IAAKA,IAAiBA,EAAa31B,OAC/B,OAEJkM,KAAKypB,aAAe,GACpB,MAAM8qB,EAAev0C,KAAKuI,KAAKzG,SAAShO,OAClC0gD,EAAW/P,GAAM,IAAI5yB,IAAI4X,EAAahX,QAAQw9B,GAAIA,EAAE,KAAOxL,IAAKhwC,KAAI,CAACw7C,EAAGt8C,IAAIA,EAAI,IAAMs8C,EAAEl1C,OAAO,GAAGoX,KAAK,QACvGsiC,EAAYD,EAAQ,GAC1B,IAAI,IAAI7gD,EAAI,EAAGA,EAAI4gD,EAAc5gD,IAC7B,IAAKuD,EAAUu9C,EAAWD,EAAQ7gD,IAC9B,OAGR,OAAOtB,MAAM+S,KAAKqvC,GAAWhgD,KAAKw7C,GAAIA,EAAE55C,MAAM,OAAM5B,KAAK0C,IAAI,CACrDklB,OAAQllB,EAAE,GACVyC,OAAQzC,EAAE,GACVqtB,OAAQrtB,EAAE,MAEtB,CACH,aAAA28C,CAAc3e,GACP,IAEO,IAFHn1B,KAAK8hC,cAAc,eAAgB,CACnC4J,YAAY,IAEZ,OAEJ7W,GAAQhZ,OAAO7b,KAAMA,KAAKqH,MAAOrH,KAAKuJ,OAAQ4rB,GAC9C,MAAM9pB,EAAOrL,KAAKgnB,UACZ0tB,EAASrpC,EAAKhE,OAAS,GAAKgE,EAAK9B,QAAU,EACjDvJ,KAAK+0B,QAAU,GACfvhC,EAAKwM,KAAKm0B,OAAQ3e,IACVk/B,GAA2B,cAAjBl/B,EAAIsa,WAGdta,EAAIkH,WACJlH,EAAIkH,YAER1c,KAAK+0B,QAAQt+B,QAAQ+e,EAAIuf,WAAU,GACpC/0B,MACHA,KAAK+0B,QAAQ/5B,SAAQ,CAAC1D,EAAMhD,KACxBgD,EAAKq9C,KAAOrgD,CAAK,IAErB0L,KAAK8hC,cAAc,cACvB,CACH,eAAAiS,CAAgB9wC,GACT,IAGO,IAHHjD,KAAK8hC,cAAc,uBAAwB,CAC3C7+B,OACAyoC,YAAY,IAFhB,CAMA,IAAI,IAAI/3C,EAAI,EAAGO,EAAO8L,KAAKuI,KAAKzG,SAAShO,OAAQH,EAAIO,IAAQP,EACzDqM,KAAKgjB,eAAervB,GAAGsrB,WAAWvC,YAEtC,IAAI,IAAI/oB,EAAI,EAAGO,EAAO8L,KAAKuI,KAAKzG,SAAShO,OAAQH,EAAIO,IAAQP,EACzDqM,KAAK40C,eAAejhD,EAAGsD,EAAWgM,GAAQA,EAAK,CAC3C5O,aAAcV,IACbsP,GAETjD,KAAK8hC,cAAc,sBAAuB,CACtC7+B,QAVJ,CAYJ,CACH,cAAA2xC,CAAetgD,EAAO2O,GACf,MAAMob,EAAOre,KAAKgjB,eAAe1uB,GAC3BjB,EAAO,CACTgrB,OACA/pB,QACA2O,OACAyoC,YAAY,IAEwC,IAApD1rC,KAAK8hC,cAAc,sBAAuBzuC,KAG9CgrB,EAAKY,WAAWlG,QAAQ9V,GACxB5P,EAAKq4C,YAAa,EAClB1rC,KAAK8hC,cAAc,qBAAsBzuC,GAC7C,CACA,MAAA++C,IAGW,IAFHpyC,KAAK8hC,cAAc,eAAgB,CACnC4J,YAAY,MAIZnxB,GAAShjB,IAAIyI,MACTA,KAAKsxC,WAAa/2B,GAASpB,QAAQnZ,OACnCua,GAAS3gB,MAAMoG,OAGnBA,KAAKqZ,OACLo2B,GAAqB,CACjBxvC,MAAOD,QAGnB,CACA,IAAAqZ,GACI,IAAI1lB,EACJ,GAAIqM,KAAK+xC,kBAAmB,CACxB,MAAM,MAAE1qC,EAAM,OAAEkC,GAAYvJ,KAAK+xC,kBACjC/xC,KAAKgyC,QAAQ3qC,EAAOkC,GACpBvJ,KAAK+xC,kBAAoB,IAC7B,CAEA,GADA/xC,KAAKuuC,QACDvuC,KAAKqH,OAAS,GAAKrH,KAAKuJ,QAAU,EAClC,OAEJ,IAEO,IAFHvJ,KAAK8hC,cAAc,aAAc,CACjC4J,YAAY,IAEZ,OAEJ,MAAMmJ,EAAS70C,KAAK+0B,QACpB,IAAIphC,EAAI,EAAGA,EAAIkhD,EAAO/gD,QAAU+gD,EAAOlhD,GAAGqhC,GAAK,IAAKrhC,EAChDkhD,EAAOlhD,GAAG0lB,KAAKrZ,KAAKgnB,WAGxB,IADAhnB,KAAK80C,gBACCnhD,EAAIkhD,EAAO/gD,SAAUH,EACvBkhD,EAAOlhD,GAAG0lB,KAAKrZ,KAAKgnB,WAExBhnB,KAAK8hC,cAAc,YACvB,CACH,sBAAAhkB,CAAuBF,GAChB,MAAMC,EAAW7d,KAAKmxC,gBAChBr8B,EAAS,GACf,IAAInhB,EAAGO,EACP,IAAIP,EAAI,EAAGO,EAAO2pB,EAAS/pB,OAAQH,EAAIO,IAAQP,EAAE,CAC7C,MAAM0qB,EAAOR,EAASlqB,GACjBiqB,IAAiBS,EAAKzY,SACvBkP,EAAOre,KAAK4nB,EAEpB,CACA,OAAOvJ,CACX,CACH,4BAAAkb,GACO,OAAOhwB,KAAK8d,wBAAuB,EACvC,CACH,aAAAg3B,GACO,IAEO,IAFH90C,KAAK8hC,cAAc,qBAAsB,CACzC4J,YAAY,IAEZ,OAEJ,MAAM7tB,EAAW7d,KAAKgwB,+BACtB,IAAI,IAAIr8B,EAAIkqB,EAAS/pB,OAAS,EAAGH,GAAK,IAAKA,EACvCqM,KAAK+0C,aAAal3B,EAASlqB,IAE/BqM,KAAK8hC,cAAc,oBACvB,CACH,YAAAiT,CAAa12B,GACN,MAAMzb,EAAM5C,KAAK4C,IACX4D,EAAO6X,EAAKsI,MACZquB,GAAWxuC,EAAKqgB,SAChBxb,EAhgBd,SAAwBgT,EAAM2I,GAC1B,MAAM,OAAEpE,EAAO,OAAEE,GAAYzE,EAC7B,OAAIuE,GAAUE,EACH,CACH3c,KAAMiqC,GAAextB,EAAQoE,EAAW,QACxC/gB,MAAOmqC,GAAextB,EAAQoE,EAAW,SACzChhB,IAAKoqC,GAAettB,EAAQkE,EAAW,OACvC9gB,OAAQkqC,GAAettB,EAAQkE,EAAW,WAG3CA,CACX,CAqfqBiuB,CAAe52B,EAAMre,KAAKgnB,WACjC3zB,EAAO,CACTgrB,OACA/pB,MAAO+pB,EAAK/pB,MACZo3C,YAAY,IAEsC,IAAlD1rC,KAAK8hC,cAAc,oBAAqBzuC,KAGxC2hD,GACAzpC,GAAS3I,EAAK,CACVuD,MAAoB,IAAdK,EAAKL,KAAiB,EAAIkF,EAAKlF,KAAOK,EAAKL,KACjDF,OAAsB,IAAfO,EAAKP,MAAkBjG,KAAKqH,MAAQgE,EAAKpF,MAAQO,EAAKP,MAC7DD,KAAkB,IAAbQ,EAAKR,IAAgB,EAAIqF,EAAKrF,IAAMQ,EAAKR,IAC9CE,QAAwB,IAAhBM,EAAKN,OAAmBlG,KAAKuJ,OAAS8B,EAAKnF,OAASM,EAAKN,SAGzEmY,EAAKY,WAAW5F,OACZ27B,GACAxpC,GAAW5I,GAEfvP,EAAKq4C,YAAa,EAClB1rC,KAAK8hC,cAAc,mBAAoBzuC,GAC3C,CACH,aAAAg9B,CAAcjlB,GACP,OAAOD,GAAeC,EAAOpL,KAAKgnB,UAAWhnB,KAAK6zC,YACtD,CACA,yBAAAqB,CAA0B77C,EAAG4J,EAAM/N,EAASk7B,GACxC,MAAM/T,EAASoW,GAAYC,MAAMzvB,GACjC,MAAsB,mBAAXoZ,EACAA,EAAOrc,KAAM3G,EAAGnE,EAASk7B,GAE7B,EACX,CACA,cAAApN,CAAe3uB,GACX,MAAMytB,EAAU9hB,KAAKuI,KAAKzG,SAASzN,GAC7BwpB,EAAW7d,KAAK+wC,UACtB,IAAI1yB,EAAOR,EAASpL,QAAQ3c,GAAIA,GAAKA,EAAEo9C,WAAapxB,IAASrI,MAkB7D,OAjBK4E,IACDA,EAAO,CACH/rB,KAAM,KACNiW,KAAM,GACNuZ,QAAS,KACT7C,WAAY,KACZ4G,OAAQ,KACR1D,QAAS,KACTE,QAAS,KACTgxB,MAAOvxB,GAAWA,EAAQuxB,OAAS,EACnC/+C,MAAOD,EACP6+C,SAAUpxB,EACV5B,QAAS,GACTwE,SAAS,GAEb7G,EAASpnB,KAAK4nB,IAEXA,CACX,CACA,UAAAlV,GACI,OAAOnJ,KAAKohB,WAAaphB,KAAKohB,SAAW/R,GAAc,KAAM,CACzDpP,MAAOD,KACP1N,KAAM,UAEd,CACA,sBAAA6iD,GACI,OAAOn1C,KAAKgwB,+BAA+Bl8B,MAC/C,CACA,gBAAAw/C,CAAiBj/C,GACb,MAAMytB,EAAU9hB,KAAKuI,KAAKzG,SAASzN,GACnC,IAAKytB,EACD,OAAO,EAEX,MAAMzD,EAAOre,KAAKgjB,eAAe3uB,GACjC,MAA8B,kBAAhBgqB,EAAKwH,QAAwBxH,EAAKwH,QAAU/D,EAAQ+D,MACtE,CACA,oBAAAuvB,CAAqB/gD,EAAcuR,GAClB5F,KAAKgjB,eAAe3uB,GAC5BwxB,QAAUjgB,CACnB,CACA,oBAAAyvC,CAAqB/gD,GACjB0L,KAAKqxC,eAAe/8C,IAAU0L,KAAKqxC,eAAe/8C,EACtD,CACA,iBAAAg6B,CAAkBh6B,GACd,OAAQ0L,KAAKqxC,eAAe/8C,EAChC,CACH,iBAAAghD,CAAkBjhD,EAAc8yB,EAAWvhB,GACpC,MAAM3C,EAAO2C,EAAU,OAAS,OAC1ByY,EAAOre,KAAKgjB,eAAe3uB,GAC3BmkB,EAAQ6F,EAAKY,WAAW6I,wBAAmBnmB,EAAWsB,GACxDjM,EAAQmwB,IACR9I,EAAK9V,KAAK4e,GAAWtB,QAAUjgB,EAC/B5F,KAAK6b,WAEL7b,KAAKo1C,qBAAqB/gD,EAAcuR,GACxC4S,EAAMqD,OAAOwC,EAAM,CACfzY,YAEJ5F,KAAK6b,QAAQjZ,GAAMA,EAAIvO,eAAiBA,EAAe4O,OAAOtB,IAEtE,CACA,IAAAkE,CAAKxR,EAAc8yB,GACfnnB,KAAKs1C,kBAAkBjhD,EAAc8yB,GAAW,EACpD,CACA,IAAAzhB,CAAKrR,EAAc8yB,GACfnnB,KAAKs1C,kBAAkBjhD,EAAc8yB,GAAW,EACpD,CACH,mBAAA6rB,CAAoB3+C,GACb,MAAMgqB,EAAOre,KAAK+wC,UAAU18C,GACxBgqB,GAAQA,EAAKY,YACbZ,EAAKY,WAAWmE,kBAEbpjB,KAAK+wC,UAAU18C,EAC1B,CACA,KAAAkhD,GACI,IAAI5hD,EAAGO,EAGP,IAFA8L,KAAKoa,OACLG,GAASD,OAAOta,MACZrM,EAAI,EAAGO,EAAO8L,KAAKuI,KAAKzG,SAAShO,OAAQH,EAAIO,IAAQP,EACrDqM,KAAKgzC,oBAAoBr/C,EAEjC,CACA,OAAA6hD,GACIx1C,KAAK8hC,cAAc,iBACnB,MAAM,OAAE54B,EAAO,IAAEtG,GAAS5C,KAC1BA,KAAKu1C,QACLv1C,KAAKuc,OAAO+xB,aACRplC,IACAlJ,KAAKo0C,eACLnrC,GAAYC,EAAQtG,GACpB5C,KAAKiC,SAAS60B,eAAel0B,GAC7B5C,KAAKkJ,OAAS,KACdlJ,KAAK4C,IAAM,aAERmtC,GAAU/vC,KAAK/N,IACtB+N,KAAK8hC,cAAc,eACvB,CACA,aAAA2T,IAAiBpiD,GACb,OAAO2M,KAAKkJ,OAAOwsC,aAAariD,EACpC,CACH,UAAAy+C,GACO9xC,KAAK21C,iBACD31C,KAAK9K,QAAQuO,WACbzD,KAAK41C,uBAEL51C,KAAKsxC,UAAW,CAExB,CACH,cAAAqE,GACO,MAAM76C,EAAYkF,KAAKixC,WACjBhvC,EAAWjC,KAAKiC,SAChB4zC,EAAO,CAACvjD,EAAMqI,KAChBsH,EAAS0U,iBAAiB3W,KAAM1N,EAAMqI,GACtCG,EAAUxI,GAAQqI,CAAQ,EAExBA,EAAW,CAACtB,EAAGvD,EAAGE,KACpBqD,EAAEqc,QAAU5f,EACZuD,EAAEsc,QAAU3f,EACZgK,KAAKg0C,cAAc36C,EAAE,EAEzB7F,EAAKwM,KAAK9K,QAAQkN,QAAS9P,GAAOujD,EAAKvjD,EAAMqI,IACjD,CACH,oBAAAi7C,GACY51C,KAAKkxC,uBACNlxC,KAAKkxC,qBAAuB,CAAC,GAEjC,MAAMp2C,EAAYkF,KAAKkxC,qBACjBjvC,EAAWjC,KAAKiC,SAChB4zC,EAAO,CAACvjD,EAAMqI,KAChBsH,EAAS0U,iBAAiB3W,KAAM1N,EAAMqI,GACtCG,EAAUxI,GAAQqI,CAAQ,EAExBm7C,EAAU,CAACxjD,EAAMqI,KACfG,EAAUxI,KACV2P,EAAS2U,oBAAoB5W,KAAM1N,EAAMqI,UAClCG,EAAUxI,GACrB,EAEEqI,EAAW,CAAC0M,EAAOkC,KACjBvJ,KAAKkJ,QACLlJ,KAAKyF,OAAO4B,EAAOkC,EACvB,EAEJ,IAAIwsC,EACJ,MAAMzE,EAAW,KACbwE,EAAQ,SAAUxE,GAClBtxC,KAAKsxC,UAAW,EAChBtxC,KAAKyF,SACLowC,EAAK,SAAUl7C,GACfk7C,EAAK,SAAUE,EAAS,EAE5BA,EAAW,KACP/1C,KAAKsxC,UAAW,EAChBwE,EAAQ,SAAUn7C,GAClBqF,KAAKu1C,QACLv1C,KAAKgyC,QAAQ,EAAG,GAChB6D,EAAK,SAAUvE,EAAS,EAExBrvC,EAAS+0B,WAAWh3B,KAAKkJ,QACzBooC,IAEAyE,GAER,CACH,YAAA3B,GACO5gD,EAAKwM,KAAKixC,YAAY,CAACt2C,EAAUrI,KAC7B0N,KAAKiC,SAAS2U,oBAAoB5W,KAAM1N,EAAMqI,EAAS,IAE3DqF,KAAKixC,WAAa,CAAC,EACnBz9C,EAAKwM,KAAKkxC,sBAAsB,CAACv2C,EAAUrI,KACvC0N,KAAKiC,SAAS2U,oBAAoB5W,KAAM1N,EAAMqI,EAAS,IAE3DqF,KAAKkxC,0BAAuBvvC,CAChC,CACA,gBAAAq0C,CAAiB58B,EAAOnW,EAAMw9B,GAC1B,MAAM/vB,EAAS+vB,EAAU,MAAQ,SACjC,IAAIpiB,EAAM/mB,EAAM3D,EAAGO,EAKnB,IAJa,YAAT+O,IACAob,EAAOre,KAAKgjB,eAAe5J,EAAM,GAAG/kB,cACpCgqB,EAAKY,WAAW,IAAMvO,EAAS,wBAE/B/c,EAAI,EAAGO,EAAOklB,EAAMtlB,OAAQH,EAAIO,IAAQP,EAAE,CAC1C2D,EAAO8hB,EAAMzlB,GACb,MAAMsrB,EAAa3nB,GAAQ0I,KAAKgjB,eAAe1rB,EAAKjD,cAAc4qB,WAC9DA,GACAA,EAAWvO,EAAS,cAAcpZ,EAAKid,QAASjd,EAAKjD,aAAciD,EAAKhD,MAEhF,CACJ,CACH,iBAAA2hD,GACO,OAAOj2C,KAAKsZ,SAAW,EAC3B,CACH,iBAAA48B,CAAkBC,GACX,MAAMC,EAAap2C,KAAKsZ,SAAW,GAC7B9T,EAAS2wC,EAAe1hD,KAAI,EAAGJ,eAAeC,YAChD,MAAM+pB,EAAOre,KAAKgjB,eAAe3uB,GACjC,IAAKgqB,EACD,MAAM,IAAInM,MAAM,6BAA+B7d,GAEnD,MAAO,CACHA,eACAkgB,QAAS8J,EAAK9V,KAAKjU,GACnBA,QACH,KAEYP,EAAeyR,EAAQ4wC,KAEpCp2C,KAAKsZ,QAAU9T,EACfxF,KAAKgxC,WAAa,KAClBhxC,KAAKi0C,mBAAmBzuC,EAAQ4wC,GAExC,CACH,aAAAtU,CAAcwJ,EAAMj4C,EAAMof,GACnB,OAAOzS,KAAKoxC,SAAS/F,OAAOrrC,KAAMsrC,EAAMj4C,EAAMof,EAClD,CACH,eAAAmP,CAAgBy0B,GACT,OAA6E,IAAtEr2C,KAAKoxC,SAASlnB,OAAOzX,QAAQnZ,GAAIA,EAAEmyC,OAAOx5C,KAAOokD,IAAUviD,MACtE,CACH,kBAAAmgD,CAAmBzuC,EAAQ4wC,EAAYE,GAChC,MAAMC,EAAev2C,KAAK9K,QAAQwN,MAC5Bq+B,EAAO,CAAC5pC,EAAGC,IAAID,EAAEsb,QAAQ3c,IAAKsB,EAAEg1C,MAAMp2C,GAAIF,EAAEzB,eAAiB2B,EAAE3B,cAAgByB,EAAExB,QAAU0B,EAAE1B,UAC7FkiD,EAAczV,EAAKqV,EAAY5wC,GAC/BixC,EAAYH,EAAS9wC,EAASu7B,EAAKv7B,EAAQ4wC,GAC7CI,EAAY1iD,QACZkM,KAAKg2C,iBAAiBQ,EAAaD,EAAatzC,MAAM,GAEtDwzC,EAAU3iD,QAAUyiD,EAAatzC,MACjCjD,KAAKg2C,iBAAiBS,EAAWF,EAAatzC,MAAM,EAE5D,CACH,aAAA+wC,CAAc36C,EAAGi9C,GACV,MAAMjjD,EAAO,CACT8hB,MAAO9b,EACPi9C,SACA5K,YAAY,EACZgL,YAAa12C,KAAKqwB,cAAch3B,IAE9Bs9C,EAAelL,IAAUA,EAAOv2C,QAAQkN,QAAUpC,KAAK9K,QAAQkN,QAAQtB,SAASzH,EAAEwgC,OAAOvnC,MAC/F,IAA6D,IAAzD0N,KAAK8hC,cAAc,cAAezuC,EAAMsjD,GACxC,OAEJ,MAAMriB,EAAUt0B,KAAK42C,aAAav9C,EAAGi9C,EAAQjjD,EAAKqjD,aAMlD,OALArjD,EAAKq4C,YAAa,EAClB1rC,KAAK8hC,cAAc,aAAczuC,EAAMsjD,IACnCriB,GAAWjhC,EAAKihC,UAChBt0B,KAAKoyC,SAEFpyC,IACX,CACH,YAAA42C,CAAav9C,EAAGi9C,EAAQI,GACjB,MAAQp9B,QAAS88B,EAAa,GAAG,QAAElhD,GAAa8K,KAC1CowB,EAAmBkmB,EACnB9wC,EAASxF,KAAK62C,mBAAmBx9C,EAAG+8C,EAAYM,EAAatmB,GAC7D0mB,EDl+LV,SAAuBz9C,GACvB,MAAkB,YAAXA,EAAE/G,MAAiC,UAAX+G,EAAE/G,MAA+B,gBAAX+G,EAAE/G,IAC3D,CCg+LwBykD,CAAc19C,GACxB29C,EAhzBb,SAA4B39C,EAAG29C,EAAWN,EAAaI,GACpD,OAAKJ,GAA0B,aAAXr9C,EAAE/G,KAGlBwkD,EACOE,EAEJ39C,EALI,IAMf,CAwyB0B49C,CAAmB59C,EAAG2G,KAAKgxC,WAAY0F,EAAaI,GAClEJ,IACA12C,KAAKgxC,WAAa,KAClB79C,EAAS+B,EAAQmO,QAAS,CACtBhK,EACAmM,EACAxF,MACDA,MACC82C,GACA3jD,EAAS+B,EAAQoO,QAAS,CACtBjK,EACAmM,EACAxF,MACDA,OAGX,MAAMs0B,GAAWvgC,EAAeyR,EAAQ4wC,GAMxC,OALI9hB,GAAWgiB,KACXt2C,KAAKsZ,QAAU9T,EACfxF,KAAKi0C,mBAAmBzuC,EAAQ4wC,EAAYE,IAEhDt2C,KAAKgxC,WAAagG,EACX1iB,CACX,CACH,kBAAAuiB,CAAmBx9C,EAAG+8C,EAAYM,EAAatmB,GACxC,GAAe,aAAX/2B,EAAE/G,KACF,MAAO,GAEX,IAAKokD,EACD,OAAON,EAEX,MAAMG,EAAev2C,KAAK9K,QAAQwN,MAClC,OAAO1C,KAAKk1C,0BAA0B77C,EAAGk9C,EAAatzC,KAAMszC,EAAcnmB,EAC9E,EAEJ,SAASmgB,KACL,OAAO/8C,EAAK88C,GAAMP,WAAY9vC,GAAQA,EAAMmxC,SAASzF,cACzD,CAsqBA,SAASuL,GAAaC,EAAK/mB,GACvB,MAAM,EAAEt6B,EAAE,EAAEE,EAAE,KAAE4tB,EAAK,MAAEvc,EAAM,OAAEkC,GAAa4tC,EAAI7lB,SAAS,CACrD,IACA,IACA,OACA,QACA,UACDlB,GACH,IAAIjqB,EAAMF,EAAOD,EAAKE,EAAQkxC,EAc9B,OAbID,EAAIvrB,YACJwrB,EAAO7tC,EAAS,EAChBpD,EAAO1O,KAAKgC,IAAI3D,EAAG8tB,GACnB3d,EAAQxO,KAAKiC,IAAI5D,EAAG8tB,GACpB5d,EAAMhQ,EAAIohD,EACVlxC,EAASlQ,EAAIohD,IAEbA,EAAO/vC,EAAQ,EACflB,EAAOrQ,EAAIshD,EACXnxC,EAAQnQ,EAAIshD,EACZpxC,EAAMvO,KAAKgC,IAAIzD,EAAG4tB,GAClB1d,EAASzO,KAAKiC,IAAI1D,EAAG4tB,IAElB,CACHzd,OACAH,MACAC,QACAC,SAER,CACA,SAASmxC,GAAYnnB,EAAM/9B,EAAOsH,EAAKC,GACnC,OAAOw2B,EAAO,EAAI12B,EAAYrH,EAAOsH,EAAKC,EAC9C,CAwDA,SAAS42B,GAAQ6mB,EAAKrhD,EAAGE,EAAGo6B,GACxB,MAAMknB,EAAc,OAANxhD,EACRyhD,EAAc,OAANvhD,EAERuQ,EAAS4wC,KADEG,GAASC,IACSL,GAAaC,EAAK/mB,GACrD,OAAO7pB,IAAW+wC,GAAS39C,EAAW7D,EAAGyQ,EAAOJ,KAAMI,EAAON,UAAYsxC,GAAS59C,EAAW3D,EAAGuQ,EAAOP,IAAKO,EAAOL,QACvH,CAIC,SAASsxC,GAAkB50C,EAAKmI,GAC7BnI,EAAImI,KAAKA,EAAKjV,EAAGiV,EAAK/U,EAAG+U,EAAKpB,EAAGoB,EAAKwC,EAC1C,CACA,SAASkqC,GAAY1sC,EAAM2sC,EAAQC,EAAU,CAAC,GAC1C,MAAM7hD,EAAIiV,EAAKjV,IAAM6hD,EAAQ7hD,GAAK4hD,EAAS,EACrC1hD,EAAI+U,EAAK/U,IAAM2hD,EAAQ3hD,GAAK0hD,EAAS,EACrC/tC,GAAKoB,EAAKjV,EAAIiV,EAAKpB,IAAMguC,EAAQ7hD,EAAI6hD,EAAQhuC,EAAI+tC,EAAS,GAAK5hD,EAC/DyX,GAAKxC,EAAK/U,EAAI+U,EAAKwC,IAAMoqC,EAAQ3hD,EAAI2hD,EAAQpqC,EAAImqC,EAAS,GAAK1hD,EACrE,MAAO,CACHF,EAAGiV,EAAKjV,EAAIA,EACZE,EAAG+U,EAAK/U,EAAIA,EACZ2T,EAAGoB,EAAKpB,EAAIA,EACZ4D,EAAGxC,EAAKwC,EAAIA,EACZpD,OAAQY,EAAKZ,OAErB,CACA,MAAMytC,WAAmBpc,GACrBhb,UAAY,MACfA,gBAAkB,CACXmL,cAAe,QACf1gB,YAAa,EACb4sC,aAAc,EACdzrB,cAAe,OACfniB,gBAAYtI,GAEnB6e,qBAAuB,CAChB5e,gBAAiB,kBACjBC,YAAa,eAEjB,WAAAN,CAAY2Z,GACR0R,QACA5sB,KAAK9K,aAAUyM,EACf3B,KAAK4rB,gBAAajqB,EAClB3B,KAAK4jB,UAAOjiB,EACZ3B,KAAKqH,WAAQ1F,EACb3B,KAAKuJ,YAAS5H,EACd3B,KAAKosB,mBAAgBzqB,EACjBuZ,GACA3oB,OAAOmO,OAAOV,KAAMkb,EAE5B,CACA,IAAA7B,CAAKzW,GACD,MAAM,cAAEwpB,EAAgBl3B,SAAS,YAAE2M,EAAY,gBAAED,IAAwB5B,MACnE,MAAE83C,EAAM,MAAEC,GAjFxB,SAAuBZ,GACnB,MAAM5wC,EAAS2wC,GAAaC,GACtB9vC,EAAQd,EAAON,MAAQM,EAAOJ,KAC9BoD,EAAShD,EAAOL,OAASK,EAAOP,IAChCkB,EA/BV,SAA0BiwC,EAAKa,EAAMC,GACjC,MAAM9lD,EAAQglD,EAAIjiD,QAAQ+V,YACpBilB,EAAOinB,EAAIxrB,cACX51B,EAAIyY,GAAOrc,GACjB,MAAO,CACHwJ,EAAG07C,GAAYnnB,EAAKlqB,IAAKjQ,EAAEiQ,IAAK,EAAGiyC,GACnCh2B,EAAGo1B,GAAYnnB,EAAKjqB,MAAOlQ,EAAEkQ,MAAO,EAAG+xC,GACvC5gD,EAAGigD,GAAYnnB,EAAKhqB,OAAQnQ,EAAEmQ,OAAQ,EAAG+xC,GACzCrxB,EAAGywB,GAAYnnB,EAAK/pB,KAAMpQ,EAAEoQ,KAAM,EAAG6xC,GAE7C,CAqBmBE,CAAiBf,EAAK9vC,EAAQ,EAAGkC,EAAS,GACnDY,EArBV,SAA2BgtC,EAAKa,EAAMC,GAClC,MAAM,mBAAEnsB,GAAwBqrB,EAAI7lB,SAAS,CACzC,uBAEEn/B,EAAQglD,EAAIjiD,QAAQ2iD,aACpB9hD,EAAI0Y,GAActc,GAClBgmD,EAAO1gD,KAAKgC,IAAIu+C,EAAMC,GACtB/nB,EAAOinB,EAAIxrB,cACXysB,EAAetsB,GAAsBl5B,EAAST,GACpD,MAAO,CACHqb,QAAS6pC,IAAae,GAAgBloB,EAAKlqB,KAAOkqB,EAAK/pB,KAAMpQ,EAAEyX,QAAS,EAAG2qC,GAC3ExqC,SAAU0pC,IAAae,GAAgBloB,EAAKlqB,KAAOkqB,EAAKjqB,MAAOlQ,EAAE4X,SAAU,EAAGwqC,GAC9E1qC,WAAY4pC,IAAae,GAAgBloB,EAAKhqB,QAAUgqB,EAAK/pB,KAAMpQ,EAAE0X,WAAY,EAAG0qC,GACpFzqC,YAAa2pC,IAAae,GAAgBloB,EAAKhqB,QAAUgqB,EAAKjqB,MAAOlQ,EAAE2X,YAAa,EAAGyqC,GAE/F,CAMmBE,CAAkBlB,EAAK9vC,EAAQ,EAAGkC,EAAS,GAC1D,MAAO,CACHwuC,MAAO,CACHjiD,EAAGyQ,EAAOJ,KACVnQ,EAAGuQ,EAAOP,IACV2D,EAAGtC,EACHkG,EAAGhE,EACHY,UAEJ2tC,MAAO,CACHhiD,EAAGyQ,EAAOJ,KAAOe,EAAO0f,EACxB5wB,EAAGuQ,EAAOP,IAAMkB,EAAOvL,EACvBgO,EAAGtC,EAAQH,EAAO0f,EAAI1f,EAAO+a,EAC7B1U,EAAGhE,EAASrC,EAAOvL,EAAIuL,EAAO9P,EAC9B+S,OAAQ,CACJqD,QAAS/V,KAAKiC,IAAI,EAAGyQ,EAAOqD,QAAU/V,KAAKiC,IAAIwN,EAAOvL,EAAGuL,EAAO0f,IAChEjZ,SAAUlW,KAAKiC,IAAI,EAAGyQ,EAAOwD,SAAWlW,KAAKiC,IAAIwN,EAAOvL,EAAGuL,EAAO+a,IAClExU,WAAYhW,KAAKiC,IAAI,EAAGyQ,EAAOsD,WAAahW,KAAKiC,IAAIwN,EAAO9P,EAAG8P,EAAO0f,IACtElZ,YAAajW,KAAKiC,IAAI,EAAGyQ,EAAOuD,YAAcjW,KAAKiC,IAAIwN,EAAO9P,EAAG8P,EAAO+a,MAIxF,CAsDmCq2B,CAAct4C,MACnCu4C,GA/CKpuC,EA+CmB4tC,EAAM5tC,QA9C1BqD,SAAWrD,EAAOwD,UAAYxD,EAAOsD,YAActD,EAAOuD,YA8CtBJ,GAAqBkqC,GA/C3E,IAAmBrtC,EAgDXvH,EAAIwG,OACA2uC,EAAMpuC,IAAMmuC,EAAMnuC,GAAKouC,EAAMxqC,IAAMuqC,EAAMvqC,IACzC3K,EAAI4H,YACJ+tC,EAAY31C,EAAK60C,GAAYM,EAAO3rB,EAAe0rB,IACnDl1C,EAAI4D,OACJ+xC,EAAY31C,EAAK60C,GAAYK,GAAQ1rB,EAAe2rB,IACpDn1C,EAAIyJ,UAAYxK,EAChBe,EAAIoI,KAAK,YAEbpI,EAAI4H,YACJ+tC,EAAY31C,EAAK60C,GAAYK,EAAO1rB,IACpCxpB,EAAIyJ,UAAYzK,EAChBgB,EAAIoI,OACJpI,EAAI4G,SACR,CACA,OAAA8mB,CAAQkoB,EAAQC,EAAQroB,GACpB,OAAOE,GAAQtwB,KAAMw4C,EAAQC,EAAQroB,EACzC,CACA,QAAAsoB,CAASF,EAAQpoB,GACb,OAAOE,GAAQtwB,KAAMw4C,EAAQ,KAAMpoB,EACvC,CACA,QAAAuoB,CAASF,EAAQroB,GACb,OAAOE,GAAQtwB,KAAM,KAAMy4C,EAAQroB,EACvC,CACA,cAAAa,CAAeb,GACX,MAAM,EAAEt6B,EAAE,EAAEE,EAAE,KAAE4tB,EAAK,WAAEgI,GAAiB5rB,KAAKsxB,SAAS,CAClD,IACA,IACA,OACA,cACDlB,GACH,MAAO,CACHt6B,EAAG81B,GAAc91B,EAAI8tB,GAAQ,EAAI9tB,EACjCE,EAAG41B,EAAa51B,GAAKA,EAAI4tB,GAAQ,EAEzC,CACA,QAAAgM,CAASrQ,GACL,MAAgB,MAATA,EAAevf,KAAKqH,MAAQ,EAAIrH,KAAKuJ,OAAS,CACzD,EAu2BJ,MAAMqvC,GAAa,CAACC,EAAWpQ,KAC3B,IAAI,UAAEqQ,EAAWrQ,EAAS,SAAEsQ,EAAUtQ,GAAcoQ,EAKpD,OAJIA,EAAUG,gBACVF,EAAYrhD,KAAKgC,IAAIq/C,EAAWrQ,GAChCsQ,EAAWF,EAAUI,iBAAmBxhD,KAAKgC,IAAIs/C,EAAUtQ,IAExD,CACHsQ,WACAD,YACAI,WAAYzhD,KAAKiC,IAAI+uC,EAAUqQ,GAClC,EAGL,MAAMK,WAAe3d,GACpB,WAAAj6B,CAAYgb,GACLqQ,QACA5sB,KAAKo5C,QAAS,EACdp5C,KAAKq5C,eAAiB,GAC7Br5C,KAAKs5C,aAAe,KACbt5C,KAAKu5C,cAAe,EACpBv5C,KAAKC,MAAQsc,EAAOtc,MACpBD,KAAK9K,QAAUqnB,EAAOrnB,QACtB8K,KAAK4C,IAAM2Z,EAAO3Z,IAClB5C,KAAKw5C,iBAAc73C,EACnB3B,KAAKy5C,iBAAc93C,EACnB3B,KAAK05C,gBAAa/3C,EAClB3B,KAAKg7B,eAAYr5B,EACjB3B,KAAKoN,cAAWzL,EAChB3B,KAAKgG,SAAMrE,EACX3B,KAAKkG,YAASvE,EACd3B,KAAKmG,UAAOxE,EACZ3B,KAAKiG,WAAQtE,EACb3B,KAAKuJ,YAAS5H,EACd3B,KAAKqH,WAAQ1F,EACb3B,KAAKi9B,cAAWt7B,EAChB3B,KAAK8vB,cAAWnuB,EAChB3B,KAAKyC,YAASd,EACd3B,KAAKu0B,cAAW5yB,CACpB,CACA,MAAAka,CAAOzO,EAAU4tB,EAAWD,GACxB/6B,KAAKoN,SAAWA,EAChBpN,KAAKg7B,UAAYA,EACjBh7B,KAAKi9B,SAAWlC,EAChB/6B,KAAKi/B,gBACLj/B,KAAK25C,cACL35C,KAAKuhC,KACT,CACA,aAAAtC,GACQj/B,KAAK+sB,gBACL/sB,KAAKqH,MAAQrH,KAAKoN,SAClBpN,KAAKmG,KAAOnG,KAAKi9B,SAAS92B,KAC1BnG,KAAKiG,MAAQjG,KAAKqH,QAElBrH,KAAKuJ,OAASvJ,KAAKg7B,UACnBh7B,KAAKgG,IAAMhG,KAAKi9B,SAASj3B,IACzBhG,KAAKkG,OAASlG,KAAKuJ,OAE3B,CACA,WAAAowC,GACI,MAAMd,EAAY74C,KAAK9K,QAAQ8vB,QAAU,CAAC,EAC1C,IAAIw0B,EAAcrmD,EAAS0lD,EAAUe,eAAgB,CACjD55C,KAAKC,OACND,OAAS,GACR64C,EAAUpmC,SACV+mC,EAAcA,EAAY/mC,QAAQnb,GAAOuhD,EAAUpmC,OAAOnb,EAAM0I,KAAKC,MAAMsI,SAE3EswC,EAAUtuB,OACVivB,EAAcA,EAAYjvB,MAAK,CAACpzB,EAAGC,IAAIyhD,EAAUtuB,KAAKpzB,EAAGC,EAAG4I,KAAKC,MAAMsI,SAEvEvI,KAAK9K,QAAQxB,SACb8lD,EAAY9lD,UAEhBsM,KAAKw5C,YAAcA,CACvB,CACA,GAAAjY,GACI,MAAM,QAAErsC,EAAQ,IAAE0N,GAAS5C,KAC3B,IAAK9K,EAAQkR,QAET,YADApG,KAAKqH,MAAQrH,KAAKuJ,OAAS,GAG/B,MAAMsvC,EAAY3jD,EAAQ8vB,OACpB60B,EAAYlrC,GAAOkqC,EAAUx2C,MAC7BomC,EAAWoR,EAAUxiD,KACrB0rC,EAAc/iC,KAAK85C,uBACnB,SAAEf,EAAS,WAAEG,GAAgBN,GAAWC,EAAWpQ,GACzD,IAAIphC,EAAOkC,EACX3G,EAAIP,KAAOw3C,EAAUnxC,OACjB1I,KAAK+sB,gBACL1lB,EAAQrH,KAAKoN,SACb7D,EAASvJ,KAAK+5C,SAAShX,EAAa0F,EAAUsQ,EAAUG,GAAc,KAEtE3vC,EAASvJ,KAAKg7B,UACd3zB,EAAQrH,KAAKg6C,SAASjX,EAAa8W,EAAWd,EAAUG,GAAc,IAE1El5C,KAAKqH,MAAQ5P,KAAKgC,IAAI4N,EAAOnS,EAAQkY,UAAYpN,KAAKoN,UACtDpN,KAAKuJ,OAAS9R,KAAKgC,IAAI8P,EAAQrU,EAAQ8lC,WAAah7B,KAAKg7B,UAC7D,CACH,QAAA+e,CAAShX,EAAa0F,EAAUsQ,EAAUG,GACnC,MAAM,IAAEt2C,EAAI,SAAEwK,EAAWlY,SAAW8vB,QAAQ,QAAEjf,KAAmB/F,KAC3Di6C,EAAWj6C,KAAKq5C,eAAiB,GACjCK,EAAa15C,KAAK05C,WAAa,CACjC,GAEEl3C,EAAa02C,EAAanzC,EAChC,IAAIm0C,EAAcnX,EAClBngC,EAAImK,UAAY,OAChBnK,EAAIoK,aAAe,SACnB,IAAImtC,GAAO,EACPn0C,GAAOxD,EAkBX,OAjBAxC,KAAKw5C,YAAYx+C,SAAQ,CAACo/C,EAAYzmD,KAClC,MAAM6jB,EAAYuhC,EAAWtQ,EAAW,EAAI7lC,EAAIgG,YAAYwxC,EAAW7yC,MAAMF,OACnE,IAAN1T,GAAW+lD,EAAWA,EAAW5lD,OAAS,GAAK0jB,EAAY,EAAIzR,EAAUqH,KACzE8sC,GAAe13C,EACfk3C,EAAWA,EAAW5lD,QAAUH,EAAI,EAAI,EAAI,IAAM,EAClDqS,GAAOxD,EACP23C,KAEJF,EAAStmD,GAAK,CACVwS,KAAM,EACNH,MACAm0C,MACA9yC,MAAOmQ,EACPjO,OAAQ2vC,GAEZQ,EAAWA,EAAW5lD,OAAS,IAAM0jB,EAAYzR,CAAO,IAErDm0C,CACX,CACA,QAAAF,CAASjX,EAAa8W,EAAWd,EAAUsB,GACvC,MAAM,IAAEz3C,EAAI,UAAEo4B,EAAY9lC,SAAW8vB,QAAQ,QAAEjf,KAAmB/F,KAC5Di6C,EAAWj6C,KAAKq5C,eAAiB,GACjCI,EAAcz5C,KAAKy5C,YAAc,GACjCa,EAActf,EAAY+H,EAChC,IAAIwX,EAAax0C,EACby0C,EAAkB,EAClBC,EAAmB,EACnBt0C,EAAO,EACPu0C,EAAM,EA4BV,OA3BA16C,KAAKw5C,YAAYx+C,SAAQ,CAACo/C,EAAYzmD,KAClC,MAAM,UAAE6jB,EAAU,WAAE0hC,GAqRhC,SAA2BH,EAAUc,EAAWj3C,EAAKw3C,EAAYC,GAC7D,MAAM7iC,EAOV,SAA4B4iC,EAAYrB,EAAUc,EAAWj3C,GACzD,IAAI+3C,EAAiBP,EAAW7yC,KAIhC,OAHIozC,GAA4C,iBAAnBA,IACzBA,EAAiBA,EAAe3gC,QAAO,CAAC7iB,EAAGC,IAAID,EAAErD,OAASsD,EAAEtD,OAASqD,EAAIC,KAEtE2hD,EAAWc,EAAUxiD,KAAO,EAAIuL,EAAIgG,YAAY+xC,GAAgBtzC,KAC3E,CAbsBuzC,CAAmBR,EAAYrB,EAAUc,EAAWj3C,GAChEs2C,EAaV,SAA6BmB,EAAaD,EAAYS,GAClD,IAAI3B,EAAamB,EAIjB,MAH+B,iBAApBD,EAAW7yC,OAClB2xC,EAAa4B,GAA0BV,EAAYS,IAEhD3B,CACX,CAnBuB6B,CAAoBV,EAAaD,EAAYP,EAAUr3C,YAC1E,MAAO,CACHgV,YACA0hC,aAER,CA5RgD8B,CAAkBjC,EAAUc,EAAWj3C,EAAKw3C,EAAYC,GACxF1mD,EAAI,GAAK8mD,EAAmBvB,EAAa,EAAInzC,EAAUu0C,IACvDC,GAAcC,EAAkBz0C,EAChC0zC,EAAYhjD,KAAK,CACb4Q,MAAOmzC,EACPjxC,OAAQkxC,IAEZt0C,GAAQq0C,EAAkBz0C,EAC1B20C,IACAF,EAAkBC,EAAmB,GAEzCR,EAAStmD,GAAK,CACVwS,OACAH,IAAKy0C,EACLC,MACArzC,MAAOmQ,EACPjO,OAAQ2vC,GAEZsB,EAAkB/iD,KAAKiC,IAAI8gD,EAAiBhjC,GAC5CijC,GAAoBvB,EAAanzC,CAAO,IAE5Cw0C,GAAcC,EACdf,EAAYhjD,KAAK,CACb4Q,MAAOmzC,EACPjxC,OAAQkxC,IAELF,CACX,CACA,cAAAU,GACI,IAAKj7C,KAAK9K,QAAQkR,QACd,OAEJ,MAAM28B,EAAc/iC,KAAK85C,uBACjBT,eAAgBY,EAAW/kD,SAAS,MAAEsG,EAAQwpB,QAAQ,QAAEjf,GAAW,IAAEoR,IAAYnX,KACnFk7C,EAAYhkC,GAAcC,EAAKnX,KAAKmG,KAAMnG,KAAKqH,OACrD,GAAIrH,KAAK+sB,eAAgB,CACrB,IAAIotB,EAAM,EACNh0C,EAAO1K,EAAeD,EAAOwE,KAAKmG,KAAOJ,EAAS/F,KAAKiG,MAAQjG,KAAK05C,WAAWS,IACnF,IAAK,MAAMgB,KAAUlB,EACbE,IAAQgB,EAAOhB,MACfA,EAAMgB,EAAOhB,IACbh0C,EAAO1K,EAAeD,EAAOwE,KAAKmG,KAAOJ,EAAS/F,KAAKiG,MAAQjG,KAAK05C,WAAWS,KAEnFgB,EAAOn1C,KAAOhG,KAAKgG,IAAM+8B,EAAch9B,EACvCo1C,EAAOh1C,KAAO+0C,EAAU3jC,WAAW2jC,EAAUplD,EAAEqQ,GAAOg1C,EAAO9zC,OAC7DlB,GAAQg1C,EAAO9zC,MAAQtB,CAE/B,KAAO,CACH,IAAI20C,EAAM,EACN10C,EAAMvK,EAAeD,EAAOwE,KAAKgG,IAAM+8B,EAAch9B,EAAS/F,KAAKkG,OAASlG,KAAKy5C,YAAYiB,GAAKnxC,QACtG,IAAK,MAAM4xC,KAAUlB,EACbkB,EAAOT,MAAQA,IACfA,EAAMS,EAAOT,IACb10C,EAAMvK,EAAeD,EAAOwE,KAAKgG,IAAM+8B,EAAch9B,EAAS/F,KAAKkG,OAASlG,KAAKy5C,YAAYiB,GAAKnxC,SAEtG4xC,EAAOn1C,IAAMA,EACbm1C,EAAOh1C,MAAQnG,KAAKmG,KAAOJ,EAC3Bo1C,EAAOh1C,KAAO+0C,EAAU3jC,WAAW2jC,EAAUplD,EAAEqlD,EAAOh1C,MAAOg1C,EAAO9zC,OACpErB,GAAOm1C,EAAO5xC,OAASxD,CAE/B,CACJ,CACA,YAAAgnB,GACI,MAAiC,QAA1B/sB,KAAK9K,QAAQ46B,UAAgD,WAA1B9vB,KAAK9K,QAAQ46B,QAC3D,CACA,IAAAzW,GACI,GAAIrZ,KAAK9K,QAAQkR,QAAS,CACtB,MAAMxD,EAAM5C,KAAK4C,IACjB2I,GAAS3I,EAAK5C,MACdA,KAAKo7C,QACL5vC,GAAW5I,EACf,CACJ,CACH,KAAAw4C,GACO,MAAQlmD,QAASyW,EAAK,YAAE8tC,EAAY,WAAEC,EAAW,IAAE92C,GAAS5C,MACtD,MAAExE,EAAQwpB,OAAQ6zB,GAAeltC,EACjC0vC,EAAez2C,GAASvG,MACxB68C,EAAYhkC,GAAcvL,EAAKwL,IAAKnX,KAAKmG,KAAMnG,KAAKqH,OACpDwyC,EAAYlrC,GAAOkqC,EAAUx2C,OAC7B,QAAE0D,GAAa8yC,EACfpQ,EAAWoR,EAAUxiD,KACrBikD,EAAe7S,EAAW,EAChC,IAAI8S,EACJv7C,KAAKgoC,YACLplC,EAAImK,UAAYmuC,EAAUnuC,UAAU,QACpCnK,EAAIoK,aAAe,SACnBpK,EAAI+D,UAAY,GAChB/D,EAAIP,KAAOw3C,EAAUnxC,OACrB,MAAM,SAAEqwC,EAAS,UAAED,EAAU,WAAEI,GAAgBN,GAAWC,EAAWpQ,GAqD/D1b,EAAe/sB,KAAK+sB,eACpBgW,EAAc/iC,KAAK85C,sBAErByB,EADAxuB,EACS,CACLj3B,EAAG2F,EAAeD,EAAOwE,KAAKmG,KAAOJ,EAAS/F,KAAKiG,MAAQyzC,EAAW,IACtE1jD,EAAGgK,KAAKgG,IAAMD,EAAUg9B,EACxBr3B,KAAM,GAGD,CACL5V,EAAGkK,KAAKmG,KAAOJ,EACf/P,EAAGyF,EAAeD,EAAOwE,KAAKgG,IAAM+8B,EAAch9B,EAAS/F,KAAKkG,OAASuzC,EAAY,GAAGlwC,QACxFmC,KAAM,GAGdiM,GAAsB3X,KAAK4C,IAAK+I,EAAK6vC,eACrC,MAAMh5C,EAAa02C,EAAanzC,EAChC/F,KAAKw5C,YAAYx+C,SAAQ,CAACo/C,EAAYzmD,KAClCiP,EAAIwJ,YAAcguC,EAAWqB,UAC7B74C,EAAIyJ,UAAY+tC,EAAWqB,UAC3B,MAAM9yC,EAAY/F,EAAIgG,YAAYwxC,EAAW7yC,MAAMF,MAC7C0F,EAAYmuC,EAAUnuC,UAAUqtC,EAAWrtC,YAAcqtC,EAAWrtC,UAAY8rC,EAAU9rC,YAC1F1F,EAAQ0xC,EAAWuC,EAAe3yC,EACxC,IAAI7S,EAAIylD,EAAOzlD,EACXE,EAAIulD,EAAOvlD,EAiBf,GAhBAklD,EAAU7jC,SAASrX,KAAKqH,OACpB0lB,EACIp5B,EAAI,GAAKmC,EAAIuR,EAAQtB,EAAU/F,KAAKiG,QACpCjQ,EAAIulD,EAAOvlD,GAAKwM,EAChB+4C,EAAO7vC,OACP5V,EAAIylD,EAAOzlD,EAAI2F,EAAeD,EAAOwE,KAAKmG,KAAOJ,EAAS/F,KAAKiG,MAAQyzC,EAAW6B,EAAO7vC,QAEtF/X,EAAI,GAAKqC,EAAIwM,EAAaxC,KAAKkG,SACtCpQ,EAAIylD,EAAOzlD,EAAIA,EAAI2jD,EAAY8B,EAAO7vC,MAAMrE,MAAQtB,EACpDw1C,EAAO7vC,OACP1V,EAAIulD,EAAOvlD,EAAIyF,EAAeD,EAAOwE,KAAKgG,IAAM+8B,EAAch9B,EAAS/F,KAAKkG,OAASuzC,EAAY8B,EAAO7vC,MAAMnC,SAvFhG,SAASzT,EAAGE,EAAGokD,GACjC,GAAIphD,MAAM+/C,IAAaA,GAAY,GAAK//C,MAAM8/C,IAAcA,EAAY,EACpE,OAEJl2C,EAAIwG,OACJ,MAAMzC,EAAYzT,EAAeknD,EAAWzzC,UAAW,GAQvD,GAPA/D,EAAIyJ,UAAYnZ,EAAeknD,EAAW/tC,UAAWgvC,GACrDz4C,EAAI84C,QAAUxoD,EAAeknD,EAAWsB,QAAS,QACjD94C,EAAI+kC,eAAiBz0C,EAAeknD,EAAWzS,eAAgB,GAC/D/kC,EAAI+4C,SAAWzoD,EAAeknD,EAAWuB,SAAU,SACnD/4C,EAAI+D,UAAYA,EAChB/D,EAAIwJ,YAAclZ,EAAeknD,EAAWhuC,YAAaivC,GACzDz4C,EAAI8kC,YAAYx0C,EAAeknD,EAAWwB,SAAU,KAChD/C,EAAUG,cAAe,CACzB,MAAM6C,EAAc,CAChB1xC,OAAQ2uC,EAAYrhD,KAAKqkD,MAAQ,EACjC7xC,WAAYmwC,EAAWnwC,WACvBC,SAAUkwC,EAAWlwC,SACrBe,YAAatE,GAEXo1C,EAAUb,EAAU5jC,MAAMxhB,EAAGijD,EAAW,GAE9CrvC,GAAgB9G,EAAKi5C,EAAaE,EADlB/lD,EAAIslD,EACgCzC,EAAUI,iBAAmBF,EACrF,KAAO,CACH,MAAMiD,EAAUhmD,EAAIyB,KAAKiC,KAAK+uC,EAAWqQ,GAAa,EAAG,GACnDmD,EAAWf,EAAU3jC,WAAWzhB,EAAGijD,GACnClB,EAAeppC,GAAc2rC,EAAWvC,cAC9Cj1C,EAAI4H,YACAjY,OAAOqN,OAAOi4C,GAAczL,MAAMv2C,GAAU,IAANA,IACtCyX,GAAmB1K,EAAK,CACpB9M,EAAGmmD,EACHjmD,EAAGgmD,EACHryC,EAAGovC,EACHxrC,EAAGurC,EACH3uC,OAAQ0tC,IAGZj1C,EAAImI,KAAKkxC,EAAUD,EAASjD,EAAUD,GAE1Cl2C,EAAIoI,OACc,IAAdrE,GACA/D,EAAIsI,QAEZ,CACAtI,EAAI4G,SACR,CA6CI0yC,CADchB,EAAUplD,EAAEA,GACLE,EAAGokD,GACxBtkD,ED1rPO,EAAC0F,EAAO2K,EAAMF,EAAOkR,IAE7B3b,KADO2b,EAAM,OAAS,SACJlR,EAAkB,WAAVzK,GAAsB2K,EAAOF,GAAS,EAAIE,ECwrP/Dg2C,CAAOpvC,EAAWjX,EAAIijD,EAAWuC,EAAcvuB,EAAej3B,EAAIuR,EAAQrH,KAAKiG,MAAO0F,EAAKwL,KA7ClF,SAASrhB,EAAGE,EAAGokD,GAC5B1tC,GAAW9J,EAAKw3C,EAAW7yC,KAAMzR,EAAGE,EAAIkjD,EAAa,EAAGW,EAAW,CAC/DjuC,cAAewuC,EAAWv0B,OAC1B9Y,UAAWmuC,EAAUnuC,UAAUqtC,EAAWrtC,YAElD,CAyCIM,CAAS6tC,EAAUplD,EAAEA,GAAIE,EAAGokD,GACxBrtB,EACAwuB,EAAOzlD,GAAKuR,EAAQtB,OACjB,GAA+B,iBAApBq0C,EAAW7yC,KAAmB,CAC5C,MAAMszC,EAAiBhB,EAAUr3C,WACjC+4C,EAAOvlD,GAAK8kD,GAA0BV,EAAYS,GAAkB90C,CACxE,MACIw1C,EAAOvlD,GAAKwM,CAChB,IAEJyV,GAAqBjY,KAAK4C,IAAK+I,EAAK6vC,cACxC,CACH,SAAAxT,GACO,MAAMr8B,EAAO3L,KAAK9K,QACZ2tC,EAAYl3B,EAAKrE,MACjB80C,EAAYztC,GAAOk0B,EAAUxgC,MAC7Bg6C,EAAe3tC,GAAUm0B,EAAU98B,SACzC,IAAK88B,EAAUz8B,QACX,OAEJ,MAAM80C,EAAYhkC,GAAcvL,EAAKwL,IAAKnX,KAAKmG,KAAMnG,KAAKqH,OACpDzE,EAAM5C,KAAK4C,IACXktB,EAAW+S,EAAU/S,SACrBwrB,EAAec,EAAU/kD,KAAO,EAChCilD,EAA6BD,EAAar2C,IAAMs1C,EACtD,IAAItlD,EACAmQ,EAAOnG,KAAKmG,KACZiH,EAAWpN,KAAKqH,MACpB,GAAIrH,KAAK+sB,eACL3f,EAAW3V,KAAKiC,OAAOsG,KAAK05C,YAC5B1jD,EAAIgK,KAAKgG,IAAMs2C,EACfn2C,EAAO1K,EAAekQ,EAAKnQ,MAAO2K,EAAMnG,KAAKiG,MAAQmH,OAClD,CACH,MAAM4tB,EAAYh7B,KAAKy5C,YAAYz/B,QAAO,CAACC,EAAK5iB,IAAOI,KAAKiC,IAAIugB,EAAK5iB,EAAKkS,SAAS,GACnFvT,EAAIsmD,EAA6B7gD,EAAekQ,EAAKnQ,MAAOwE,KAAKgG,IAAKhG,KAAKkG,OAAS80B,EAAYrvB,EAAKqZ,OAAOjf,QAAU/F,KAAK85C,sBAC/H,CACA,MAAMhkD,EAAI2F,EAAeq0B,EAAU3pB,EAAMA,EAAOiH,GAChDxK,EAAImK,UAAYmuC,EAAUnuC,UAAUxR,EAAmBu0B,IACvDltB,EAAIoK,aAAe,SACnBpK,EAAIwJ,YAAcy2B,EAAUxkC,MAC5BuE,EAAIyJ,UAAYw2B,EAAUxkC,MAC1BuE,EAAIP,KAAO+5C,EAAU1zC,OACrBgE,GAAW9J,EAAKigC,EAAUt7B,KAAMzR,EAAGE,EAAGomD,EAC1C,CACH,mBAAAtC,GACO,MAAMjX,EAAY7iC,KAAK9K,QAAQoS,MACzB80C,EAAYztC,GAAOk0B,EAAUxgC,MAC7Bg6C,EAAe3tC,GAAUm0B,EAAU98B,SACzC,OAAO88B,EAAUz8B,QAAUg2C,EAAU55C,WAAa65C,EAAa9yC,OAAS,CAC5E,CACH,gBAAAgzC,CAAiBzmD,EAAGE,GACb,IAAIrC,EAAG6oD,EAAQC,EACf,GAAI9iD,EAAW7D,EAAGkK,KAAKmG,KAAMnG,KAAKiG,QAAUtM,EAAW3D,EAAGgK,KAAKgG,IAAKhG,KAAKkG,QAErE,IADAu2C,EAAKz8C,KAAKq5C,eACN1lD,EAAI,EAAGA,EAAI8oD,EAAG3oD,SAAUH,EAExB,GADA6oD,EAASC,EAAG9oD,GACRgG,EAAW7D,EAAG0mD,EAAOr2C,KAAMq2C,EAAOr2C,KAAOq2C,EAAOn1C,QAAU1N,EAAW3D,EAAGwmD,EAAOx2C,IAAKw2C,EAAOx2C,IAAMw2C,EAAOjzC,QACxG,OAAOvJ,KAAKw5C,YAAY7lD,GAIpC,OAAO,IACX,CACH,WAAA+oD,CAAYrjD,GACL,MAAMsS,EAAO3L,KAAK9K,QAClB,IAyDR,SAAoB5C,EAAMqZ,GACtB,QAAc,cAATrZ,GAAiC,aAATA,IAAyBqZ,EAAKtI,UAAWsI,EAAKgxC,aAGvEhxC,EAAKrI,SAAqB,UAAThR,GAA6B,YAATA,EAI7C,CAjEasqD,CAAWvjD,EAAE/G,KAAMqZ,GACpB,OAEJ,MAAMkxC,EAAc78C,KAAKu8C,iBAAiBljD,EAAEvD,EAAGuD,EAAErD,GACjD,GAAe,cAAXqD,EAAE/G,MAAmC,aAAX+G,EAAE/G,KAAqB,CACjD,MAAMwqD,EAAW98C,KAAKs5C,aAChByD,GA3XK3lD,EA2X2BylD,EA3XjB,QAAb1lD,EA2XoB2lD,IA3XO,OAAN1lD,GAAcD,EAAE9C,eAAiB+C,EAAE/C,cAAgB8C,EAAE7C,QAAU8C,EAAE9C,OA4X1FwoD,IAAaC,GACb5pD,EAASwY,EAAKgxC,QAAS,CACnBtjD,EACAyjD,EACA98C,MACDA,MAEPA,KAAKs5C,aAAeuD,EAChBA,IAAgBE,GAChB5pD,EAASwY,EAAKtI,QAAS,CACnBhK,EACAwjD,EACA78C,MACDA,KAEX,MAAW68C,GACP1pD,EAASwY,EAAKrI,QAAS,CACnBjK,EACAwjD,EACA78C,MACDA,MAhZI,IAAC7I,EAAGC,CAkZnB,EAwBJ,SAAS0jD,GAA0BV,EAAYS,GAE3C,OAAOA,GADaT,EAAW7yC,KAAO6yC,EAAW7yC,KAAKzT,OAAS,EAEnE,CAUA,IAAIkpD,GAAgB,CAChB/qD,GAAI,SACPgrD,SAAU9D,GACP,KAAAv/C,CAAOqG,EAAOi9C,EAAOhoD,GACjB,MAAMioD,EAASl9C,EAAMk9C,OAAS,IAAIhE,GAAO,CACrCv2C,IAAK3C,EAAM2C,IACX1N,UACA+K,UAEJ40B,GAAQnY,UAAUzc,EAAOk9C,EAAQjoD,GACjC2/B,GAAQC,OAAO70B,EAAOk9C,EAC1B,EACA,IAAA/iC,CAAMna,GACF40B,GAAQI,UAAUh1B,EAAOA,EAAMk9C,eACxBl9C,EAAMk9C,MACjB,EACA,YAAAte,CAAc5+B,EAAOi9C,EAAOhoD,GACxB,MAAMioD,EAASl9C,EAAMk9C,OACrBtoB,GAAQnY,UAAUzc,EAAOk9C,EAAQjoD,GACjCioD,EAAOjoD,QAAUA,CACrB,EACA,WAAAusC,CAAaxhC,GACT,MAAMk9C,EAASl9C,EAAMk9C,OACrBA,EAAOxD,cACPwD,EAAOlC,gBACX,EACA,UAAAmC,CAAYn9C,EAAO5M,GACVA,EAAKijD,QACNr2C,EAAMk9C,OAAOT,YAAYrpD,EAAK8hB,MAEtC,EACAvQ,SAAU,CACNwB,SAAS,EACT0pB,SAAU,MACVt0B,MAAO,SACP+4B,UAAU,EACV7gC,SAAS,EACT+O,OAAQ,IACR,OAAAa,CAASjK,EAAG+gD,EAAY+C,GACpB,MAAM7oD,EAAQ8lD,EAAW/lD,aACnBgpD,EAAKF,EAAOl9C,MACdo9C,EAAG/J,iBAAiBh/C,IACpB+oD,EAAGx3C,KAAKvR,GACR8lD,EAAWv0B,QAAS,IAEpBw3B,EAAG33C,KAAKpR,GACR8lD,EAAWv0B,QAAS,EAE5B,EACAxiB,QAAS,KACTs5C,QAAS,KACT33B,OAAQ,CACJ3mB,MAAQuE,GAAMA,EAAI3C,MAAM/K,QAAQmJ,MAChC06C,SAAU,GACVhzC,QAAS,GACT,cAAA6zC,CAAgB35C,GACZ,MAAM6B,EAAW7B,EAAMsI,KAAKzG,UACpBkjB,QAAQ,cAAEg0B,EAAc,WAAE/uC,EAAW,UAAE8C,EAAU,MAAE1O,EAAM,gBAAEi/C,EAAgB,aAAEzF,IAAqB53C,EAAMk9C,OAAOjoD,QACvH,OAAO+K,EAAM6d,yBAAyBrpB,KAAK4pB,IACvC,MAAM9b,EAAQ8b,EAAKY,WAAWhI,SAAS+hC,EAAgB,OAAIr3C,GACrDsJ,EAAcyD,GAAUnM,EAAM0I,aACpC,MAAO,CACH1D,KAAMzF,EAASuc,EAAK/pB,OAAOmyB,MAC3Bpa,UAAW9J,EAAMX,gBACjB65C,UAAWp9C,EACXwnB,QAASxH,EAAKzY,QACd81C,QAASn5C,EAAMg7C,eACf3B,SAAUr5C,EAAM+jC,WAChBqB,eAAgBplC,EAAMgkC,iBACtBoV,SAAUp5C,EAAMi7C,gBAChB72C,WAAYsE,EAAY5D,MAAQ4D,EAAY1B,QAAU,EACtD6C,YAAa7J,EAAMV,YACnBoI,WAAYA,GAAc1H,EAAM0H,WAChCC,SAAU3H,EAAM2H,SAChB6C,UAAWA,GAAaxK,EAAMwK,UAC9B8qC,aAAcyF,IAAoBzF,GAAgBt1C,EAAMs1C,cACxDxjD,aAAcgqB,EAAK/pB,MACtB,GACF0L,KACP,GAEJsH,MAAO,CACHjJ,MAAQuE,GAAMA,EAAI3C,MAAM/K,QAAQmJ,MAChC+H,SAAS,EACT0pB,SAAU,SACVvoB,KAAM,KAGdtG,YAAa,CACT4D,YAAcZ,IAAQA,EAAKa,WAAW,MACtCkgB,OAAQ,CACJngB,YAAcZ,IAAQ,CACd,iBACA,SACA,QACFnD,SAASmD,MAK3B,MAAMw5C,WAAcjiB,GACnB,WAAAj6B,CAAYgb,GACLqQ,QACA5sB,KAAKC,MAAQsc,EAAOtc,MACpBD,KAAK9K,QAAUqnB,EAAOrnB,QACtB8K,KAAK4C,IAAM2Z,EAAO3Z,IAClB5C,KAAK09C,cAAW/7C,EAChB3B,KAAKgG,SAAMrE,EACX3B,KAAKkG,YAASvE,EACd3B,KAAKmG,UAAOxE,EACZ3B,KAAKiG,WAAQtE,EACb3B,KAAKqH,WAAQ1F,EACb3B,KAAKuJ,YAAS5H,EACd3B,KAAK8vB,cAAWnuB,EAChB3B,KAAKyC,YAASd,EACd3B,KAAKu0B,cAAW5yB,CACpB,CACA,MAAAka,CAAOzO,EAAU4tB,GACb,MAAMrvB,EAAO3L,KAAK9K,QAGlB,GAFA8K,KAAKmG,KAAO,EACZnG,KAAKgG,IAAM,GACN2F,EAAKvF,QAEN,YADApG,KAAKqH,MAAQrH,KAAKuJ,OAASvJ,KAAKiG,MAAQjG,KAAKkG,OAAS,GAG1DlG,KAAKqH,MAAQrH,KAAKiG,MAAQmH,EAC1BpN,KAAKuJ,OAASvJ,KAAKkG,OAAS80B,EAC5B,MAAM4L,EAAYx0C,EAAQuZ,EAAKpE,MAAQoE,EAAKpE,KAAKzT,OAAS,EAC1DkM,KAAK09C,SAAWhvC,GAAU/C,EAAK5F,SAC/B,MAAM43C,EAAW/W,EAAYj4B,GAAOhD,EAAKtJ,MAAMG,WAAaxC,KAAK09C,SAASn0C,OACtEvJ,KAAK+sB,eACL/sB,KAAKuJ,OAASo0C,EAEd39C,KAAKqH,MAAQs2C,CAErB,CACA,YAAA5wB,GACI,MAAMhY,EAAM/U,KAAK9K,QAAQ46B,SACzB,MAAe,QAAR/a,GAAyB,WAARA,CAC5B,CACA,SAAA6oC,CAAUv3C,GACN,MAAM,IAAEL,EAAI,KAAEG,EAAK,OAAED,EAAO,MAAED,EAAM,QAAE/Q,GAAa8K,KAC7CxE,EAAQtG,EAAQsG,MACtB,IACI4R,EAAU66B,EAAQC,EADlBh+B,EAAW,EAkBf,OAhBIlK,KAAK+sB,gBACLkb,EAASxsC,EAAeD,EAAO2K,EAAMF,GACrCiiC,EAASliC,EAAMK,EACf+G,EAAWnH,EAAQE,IAEM,SAArBjR,EAAQ46B,UACRmY,EAAS9hC,EAAOE,EAChB6hC,EAASzsC,EAAeD,EAAO0K,EAAQF,GACvCkE,GAAiB,GAAN1S,IAEXywC,EAAShiC,EAAQI,EACjB6hC,EAASzsC,EAAeD,EAAOwK,EAAKE,GACpCgE,EAAgB,GAAL1S,GAEf4V,EAAWlH,EAASF,GAEjB,CACHiiC,SACAC,SACA96B,WACAlD,WAER,CACA,IAAAmP,GACI,MAAMzW,EAAM5C,KAAK4C,IACX+I,EAAO3L,KAAK9K,QAClB,IAAKyW,EAAKvF,QACN,OAEJ,MAAMy3C,EAAWlvC,GAAOhD,EAAKtJ,MAEvBgE,EADaw3C,EAASr7C,WACA,EAAIxC,KAAK09C,SAAS13C,KACxC,OAAEiiC,EAAO,OAAEC,EAAO,SAAE96B,EAAS,SAAElD,GAAclK,KAAK49C,UAAUv3C,GAClEqG,GAAW9J,EAAK+I,EAAKpE,KAAM,EAAG,EAAGs2C,EAAU,CACvCx/C,MAAOsN,EAAKtN,MACZ+O,WACAlD,WACA6C,UAAWxR,EAAmBoQ,EAAKnQ,OACnCwR,aAAc,SACdF,YAAa,CACTm7B,EACAC,IAGZ,EAYJ,IAAI4V,GAAe,CACf7rD,GAAI,QACPgrD,SAAUQ,GACP,KAAA7jD,CAAOqG,EAAOi9C,EAAOhoD,IAbzB,SAAqB+K,EAAO4iC,GACxB,MAAMv7B,EAAQ,IAAIm2C,GAAM,CACpB76C,IAAK3C,EAAM2C,IACX1N,QAAS2tC,EACT5iC,UAEJ40B,GAAQnY,UAAUzc,EAAOqH,EAAOu7B,GAChChO,GAAQC,OAAO70B,EAAOqH,GACtBrH,EAAM89C,WAAaz2C,CACvB,CAKQ02C,CAAY/9C,EAAO/K,EACvB,EACA,IAAAklB,CAAMna,GACF,MAAM89C,EAAa99C,EAAM89C,WACzBlpB,GAAQI,UAAUh1B,EAAO89C,UAClB99C,EAAM89C,UACjB,EACA,YAAAlf,CAAc5+B,EAAOi9C,EAAOhoD,GACxB,MAAMoS,EAAQrH,EAAM89C,WACpBlpB,GAAQnY,UAAUzc,EAAOqH,EAAOpS,GAChCoS,EAAMpS,QAAUA,CACpB,EACA0P,SAAU,CACNpJ,MAAO,SACP4K,SAAS,EACT/D,KAAM,CACFI,OAAQ,QAEZ8xB,UAAU,EACVxuB,QAAS,GACT+pB,SAAU,MACVvoB,KAAM,GACN9E,OAAQ,KAEZymC,cAAe,CACX7qC,MAAO,SAEX4C,YAAa,CACT4D,aAAa,EACbE,YAAY,IAIR,IAAIk5C,QA2ChB,MAAMC,GAAc,CACnB,OAAAC,CAAS/kC,GACF,IAAKA,EAAMtlB,OACP,OAAO,EAEX,IAAIH,EAAGC,EACHwqD,EAAO,IAAIvsC,IACX7b,EAAI,EACJwuB,EAAQ,EACZ,IAAI7wB,EAAI,EAAGC,EAAMwlB,EAAMtlB,OAAQH,EAAIC,IAAOD,EAAE,CACxC,MAAMojB,EAAKqC,EAAMzlB,GAAG4gB,QACpB,GAAIwC,GAAMA,EAAG2kB,WAAY,CACrB,MAAM3mB,EAAMgC,EAAG0kB,kBACf2iB,EAAKhsC,IAAI2C,EAAIjf,GACbE,GAAK+e,EAAI/e,IACPwuB,CACN,CACJ,CAIA,MAAO,CACH1uB,EAJa,IACVsoD,GACLpkC,QAAO,CAAC7iB,EAAGC,IAAID,EAAIC,IAAKgnD,EAAK/mD,KAG3BrB,EAAGA,EAAIwuB,EAEf,EACH,OAAAmO,CAASvZ,EAAOilC,GACT,IAAKjlC,EAAMtlB,OACP,OAAO,EAEX,IAGIH,EAAGC,EAAK0qD,EAHRxoD,EAAIuoD,EAAcvoD,EAClBE,EAAIqoD,EAAcroD,EAClBg7B,EAAcl+B,OAAO8E,kBAEzB,IAAIjE,EAAI,EAAGC,EAAMwlB,EAAMtlB,OAAQH,EAAIC,IAAOD,EAAE,CACxC,MAAMojB,EAAKqC,EAAMzlB,GAAG4gB,QACpB,GAAIwC,GAAMA,EAAG2kB,WAAY,CACrB,MACMx9B,GDj2QSyyB,ECi2QiB0tB,EDj2QZztB,ECg2QL7Z,EAAGka,iBD/1QvBx5B,KAAK6F,KAAK7F,KAAKkB,IAAIi4B,EAAI96B,EAAI66B,EAAI76B,EAAG,GAAK2B,KAAKkB,IAAIi4B,EAAI56B,EAAI26B,EAAI36B,EAAG,KCi2QtDkI,EAAI8yB,IACJA,EAAc9yB,EACdogD,EAAiBvnC,EAEzB,CACJ,CDv2QR,IAA+B4Z,EAAKC,ECw2Q5B,GAAI0tB,EAAgB,CAChB,MAAMC,EAAKD,EAAe7iB,kBAC1B3lC,EAAIyoD,EAAGzoD,EACPE,EAAIuoD,EAAGvoD,CACX,CACA,MAAO,CACHF,IACAE,IAER,GAEJ,SAASwoD,GAAa56B,EAAM66B,GAQxB,OAPIA,IACIrsD,EAAQqsD,GACRpsD,MAAMG,UAAUiE,KAAKlD,MAAMqwB,EAAM66B,GAEjC76B,EAAKntB,KAAKgoD,IAGX76B,CACX,CACC,SAAS86B,GAAc7nD,GACpB,OAAoB,iBAARA,GAAoBA,aAAe8nD,SAAW9nD,EAAI7B,QAAQ,OAAS,EACpE6B,EAAIR,MAAM,MAEdQ,CACX,CACC,SAAS+nD,GAAkB3+C,EAAO3I,GAC/B,MAAM,QAAEid,EAAQ,aAAElgB,EAAa,MAAEC,GAAWgD,EACtC2nB,EAAahf,EAAM+iB,eAAe3uB,GAAc4qB,YAChD,MAAEwH,EAAM,MAAEt0B,GAAW8sB,EAAWuH,iBAAiBlyB,GACvD,MAAO,CACH2L,QACAwmB,QACAvH,OAAQD,EAAWoG,UAAU/wB,GAC7B8yB,IAAKnnB,EAAMsI,KAAKzG,SAASzN,GAAckU,KAAKjU,GAC5CuqD,eAAgB1sD,EAChB2vB,QAAS7C,EAAW8C,aACpBoF,UAAW7yB,EACXD,eACAkgB,UAER,CACC,SAASuqC,GAAeC,EAAS7pD,GAC9B,MAAM0N,EAAMm8C,EAAQ9+C,MAAM2C,KACpB,KAAEo8C,EAAK,OAAEC,EAAO,MAAE33C,GAAWy3C,GAC7B,SAAEhG,EAAS,UAAED,GAAe5jD,EAC5BgqD,EAAWvwC,GAAOzZ,EAAQgqD,UAC1B9C,EAAYztC,GAAOzZ,EAAQknD,WAC3B+C,EAAaxwC,GAAOzZ,EAAQiqD,YAC5BC,EAAiB93C,EAAMxT,OACvBurD,EAAkBJ,EAAOnrD,OACzBwrD,EAAoBN,EAAKlrD,OACzBiS,EAAU2I,GAAUxZ,EAAQ6Q,SAClC,IAAIwD,EAASxD,EAAQwD,OACjBlC,EAAQ,EACRk4C,EAAqBP,EAAKhlC,QAAO,CAACwK,EAAOg7B,IAAWh7B,EAAQg7B,EAASC,OAAO3rD,OAAS0rD,EAAS7yC,MAAM7Y,OAAS0rD,EAASE,MAAM5rD,QAAQ,GACxIyrD,GAAsBR,EAAQY,WAAW7rD,OAASirD,EAAQa,UAAU9rD,OAChEsrD,IACA71C,GAAU61C,EAAiBhD,EAAU55C,YAAc48C,EAAiB,GAAKlqD,EAAQ2qD,aAAe3qD,EAAQ4qD,mBAExGP,IAEAh2C,GAAU+1C,GADapqD,EAAQ6qD,cAAgBtoD,KAAKiC,IAAIo/C,EAAWoG,EAAS18C,YAAc08C,EAAS18C,aACnD+8C,EAAqBD,GAAqBJ,EAAS18C,YAAc+8C,EAAqB,GAAKrqD,EAAQ8qD,aAEnJX,IACA91C,GAAUrU,EAAQ+qD,gBAAkBZ,EAAkBF,EAAW38C,YAAc68C,EAAkB,GAAKnqD,EAAQgrD,eAElH,IAAIC,EAAe,EACnB,MAAMC,EAAe,SAAS10C,GAC1BrE,EAAQ5P,KAAKiC,IAAI2N,EAAOzE,EAAIgG,YAAY8C,GAAMrE,MAAQ84C,EAC1D,EAiBA,OAhBAv9C,EAAIwG,OACJxG,EAAIP,KAAO+5C,EAAU1zC,OACrBlV,EAAKurD,EAAQz3C,MAAO84C,GACpBx9C,EAAIP,KAAO68C,EAASx2C,OACpBlV,EAAKurD,EAAQY,WAAWt1B,OAAO00B,EAAQa,WAAYQ,GACnDD,EAAejrD,EAAQ6qD,cAAgBhH,EAAW,EAAI7jD,EAAQi+B,WAAa,EAC3E3/B,EAAKwrD,GAAOQ,IACRhsD,EAAKgsD,EAASC,OAAQW,GACtB5sD,EAAKgsD,EAAS7yC,MAAOyzC,GACrB5sD,EAAKgsD,EAASE,MAAOU,EAAa,IAEtCD,EAAe,EACfv9C,EAAIP,KAAO88C,EAAWz2C,OACtBlV,EAAKurD,EAAQE,OAAQmB,GACrBx9C,EAAI4G,UACJnC,GAAStB,EAAQsB,MACV,CACHA,QACAkC,SAER,CAoBA,SAAS82C,GAAgBpgD,EAAO/K,EAASmC,EAAMipD,GAC3C,MAAM,EAAExqD,EAAE,MAAEuR,GAAWhQ,GACfgQ,MAAOk5C,EAAav5B,WAAW,KAAE7gB,EAAK,MAAEF,IAAchG,EAC9D,IAAIugD,EAAS,SAWb,MAVe,WAAXF,EACAE,EAAS1qD,IAAMqQ,EAAOF,GAAS,EAAI,OAAS,QACrCnQ,GAAKuR,EAAQ,EACpBm5C,EAAS,OACF1qD,GAAKyqD,EAAal5C,EAAQ,IACjCm5C,EAAS,SAnBjB,SAA6BA,EAAQvgD,EAAO/K,EAASmC,GACjD,MAAM,EAAEvB,EAAE,MAAEuR,GAAWhQ,EACjBopD,EAAQvrD,EAAQwrD,UAAYxrD,EAAQyrD,aAC1C,MAAe,SAAXH,GAAqB1qD,EAAIuR,EAAQo5C,EAAQxgD,EAAMoH,OAGpC,UAAXm5C,GAAsB1qD,EAAIuR,EAAQo5C,EAAQ,QAA9C,CAGJ,CAYQG,CAAoBJ,EAAQvgD,EAAO/K,EAASmC,KAC5CmpD,EAAS,UAENA,CACX,CACC,SAASK,GAAmB5gD,EAAO/K,EAASmC,GACzC,MAAMipD,EAASjpD,EAAKipD,QAAUprD,EAAQorD,QApC1C,SAAyBrgD,EAAO5I,GAC5B,MAAM,EAAErB,EAAE,OAAEuT,GAAYlS,EACxB,OAAIrB,EAAIuT,EAAS,EACN,MACAvT,EAAIiK,EAAMsJ,OAASA,EAAS,EAC5B,SAEJ,QACX,CA4BoDu3C,CAAgB7gD,EAAO5I,GACvE,MAAO,CACHmpD,OAAQnpD,EAAKmpD,QAAUtrD,EAAQsrD,QAAUH,GAAgBpgD,EAAO/K,EAASmC,EAAMipD,GAC/EA,SAER,CAqBC,SAASS,GAAmB7rD,EAASmC,EAAM2pD,EAAW/gD,GACnD,MAAM,UAAEygD,EAAU,aAAEC,EAAa,aAAE72C,GAAkB5U,GAC/C,OAAEsrD,EAAO,OAAEF,GAAYU,EACvBC,EAAiBP,EAAYC,GAC7B,QAAEnzC,EAAQ,SAAEG,EAAS,WAAEF,EAAW,YAAEC,GAAiBe,GAAc3E,GACzE,IAAIhU,EAzBR,SAAgBuB,EAAMmpD,GAClB,IAAI,EAAE1qD,EAAE,MAAEuR,GAAWhQ,EAMrB,MALe,UAAXmpD,EACA1qD,GAAKuR,EACa,WAAXm5C,IACP1qD,GAAKuR,EAAQ,GAEVvR,CACX,CAiBYorD,CAAO7pD,EAAMmpD,GACrB,MAAMxqD,EAjBV,SAAgBqB,EAAMipD,EAAQW,GAC1B,IAAI,EAAEjrD,EAAE,OAAEuT,GAAYlS,EAQtB,MAPe,QAAXipD,EACAtqD,GAAKirD,EAELjrD,GADkB,WAAXsqD,EACF/2C,EAAS03C,EAET13C,EAAS,EAEXvT,CACX,CAOcmrD,CAAO9pD,EAAMipD,EAAQW,GAY/B,MAXe,WAAXX,EACe,SAAXE,EACA1qD,GAAKmrD,EACa,UAAXT,IACP1qD,GAAKmrD,GAES,SAAXT,EACP1qD,GAAK2B,KAAKiC,IAAI8T,EAASC,GAAcizC,EACnB,UAAXF,IACP1qD,GAAK2B,KAAKiC,IAAIiU,EAAUD,GAAegzC,GAEpC,CACH5qD,EAAG0D,EAAY1D,EAAG,EAAGmK,EAAMoH,MAAQhQ,EAAKgQ,OACxCrR,EAAGwD,EAAYxD,EAAG,EAAGiK,EAAMsJ,OAASlS,EAAKkS,QAEjD,CACA,SAAS63C,GAAYrC,EAASvjD,EAAOtG,GACjC,MAAM6Q,EAAU2I,GAAUxZ,EAAQ6Q,SAClC,MAAiB,WAAVvK,EAAqBujD,EAAQjpD,EAAIipD,EAAQ13C,MAAQ,EAAc,UAAV7L,EAAoBujD,EAAQjpD,EAAIipD,EAAQ13C,MAAQtB,EAAQE,MAAQ84C,EAAQjpD,EAAIiQ,EAAQI,IACpJ,CACC,SAASk7C,GAAwBluD,GAC9B,OAAOqrD,GAAa,GAAIE,GAAcvrD,GAC1C,CAQA,SAASmuD,GAAkB5oC,EAAW1W,GAClC,MAAM+B,EAAW/B,GAAWA,EAAQ8f,SAAW9f,EAAQ8f,QAAQi9B,SAAW/8C,EAAQ8f,QAAQi9B,QAAQrmC,UAClG,OAAO3U,EAAW2U,EAAU3U,SAASA,GAAY2U,CACrD,CACA,MAAM6oC,GAAmB,CACrBC,YAAazvD,EACb,KAAAuV,CAAOm6C,GACH,GAAIA,EAAa3tD,OAAS,EAAG,CACzB,MAAMwD,EAAOmqD,EAAa,GACpBz8B,EAAS1tB,EAAK2I,MAAMsI,KAAKyc,OACzB08B,EAAa18B,EAASA,EAAOlxB,OAAS,EAC5C,GAAIkM,MAAQA,KAAK9K,SAAiC,YAAtB8K,KAAK9K,QAAQ+N,KACrC,OAAO3L,EAAKwqB,QAAQ2E,OAAS,GAC1B,GAAInvB,EAAKmvB,MACZ,OAAOnvB,EAAKmvB,MACT,GAAIi7B,EAAa,GAAKpqD,EAAK6vB,UAAYu6B,EAC1C,OAAO18B,EAAO1tB,EAAK6vB,UAE3B,CACA,MAAO,EACX,EACAw6B,WAAY5vD,EACZ4tD,WAAY5tD,EACZ6vD,YAAa7vD,EACb,KAAA00B,CAAOo7B,GACH,GAAI7hD,MAAQA,KAAK9K,SAAiC,YAAtB8K,KAAK9K,QAAQ+N,KACrC,OAAO4+C,EAAYp7B,MAAQ,KAAOo7B,EAAYhD,gBAAkBgD,EAAYhD,eAEhF,IAAIp4B,EAAQo7B,EAAY//B,QAAQ2E,OAAS,GACrCA,IACAA,GAAS,MAEb,MAAMt0B,EAAQ0vD,EAAYhD,eAI1B,OAHK3sD,EAAcC,KACfs0B,GAASt0B,GAENs0B,CACX,EACA,UAAAq7B,CAAYD,GACR,MACM3sD,EADO2sD,EAAY5hD,MAAM+iB,eAAe6+B,EAAYxtD,cACrC4qB,WAAWhI,SAAS4qC,EAAY16B,WACrD,MAAO,CACHtlB,YAAa3M,EAAQ2M,YACrBD,gBAAiB1M,EAAQ0M,gBACzBqJ,YAAa/V,EAAQ+V,YACrBq7B,WAAYpxC,EAAQoxC,WACpBC,iBAAkBrxC,EAAQqxC,iBAC1BsR,aAAc,EAEtB,EACA,cAAAkK,GACI,OAAO/hD,KAAK9K,QAAQ8sD,SACxB,EACA,eAAAC,CAAiBJ,GACb,MACM3sD,EADO2sD,EAAY5hD,MAAM+iB,eAAe6+B,EAAYxtD,cACrC4qB,WAAWhI,SAAS4qC,EAAY16B,WACrD,MAAO,CACHld,WAAY/U,EAAQ+U,WACpBC,SAAUhV,EAAQgV,SAE1B,EACAg4C,WAAYnwD,EACZ6tD,UAAW7tD,EACXowD,aAAcpwD,EACdktD,OAAQltD,EACRqwD,YAAarwD,GAEhB,SAASswD,GAA2B3pC,EAAWzU,EAAMrB,EAAK+nC,GACvD,MAAM71B,EAAS4D,EAAUzU,GAAMvR,KAAKkQ,EAAK+nC,GACzC,YAAsB,IAAX71B,EACAysC,GAAiBt9C,GAAMvR,KAAKkQ,EAAK+nC,GAErC71B,CACX,CACA,MAAMwtC,WAAgB9mB,GACrBhb,mBAAqB09B,GAClB,WAAA38C,CAAYgb,GACRqQ,QACA5sB,KAAKuiD,QAAU,EACfviD,KAAKsZ,QAAU,GACftZ,KAAKwiD,oBAAiB7gD,EACtB3B,KAAKyiD,WAAQ9gD,EACb3B,KAAK0iD,uBAAoB/gD,EACzB3B,KAAK2iD,cAAgB,GACrB3iD,KAAKkd,iBAAcvb,EACnB3B,KAAKohB,cAAWzf,EAChB3B,KAAKC,MAAQsc,EAAOtc,MACpBD,KAAK9K,QAAUqnB,EAAOrnB,QACtB8K,KAAK4iD,gBAAajhD,EAClB3B,KAAKsH,WAAQ3F,EACb3B,KAAK2/C,gBAAah+C,EAClB3B,KAAKg/C,UAAOr9C,EACZ3B,KAAK4/C,eAAYj+C,EACjB3B,KAAKi/C,YAASt9C,EACd3B,KAAKwgD,YAAS7+C,EACd3B,KAAKsgD,YAAS3+C,EACd3B,KAAKlK,OAAI6L,EACT3B,KAAKhK,OAAI2L,EACT3B,KAAKuJ,YAAS5H,EACd3B,KAAKqH,WAAQ1F,EACb3B,KAAK6iD,YAASlhD,EACd3B,KAAK8iD,YAASnhD,EACd3B,KAAK+iD,iBAAcphD,EACnB3B,KAAKgjD,sBAAmBrhD,EACxB3B,KAAKijD,qBAAkBthD,CAC3B,CACA,UAAA6f,CAAWtsB,GACP8K,KAAK9K,QAAUA,EACf8K,KAAK0iD,uBAAoB/gD,EACzB3B,KAAKohB,cAAWzf,CACpB,CACH,kBAAAmmB,GACO,MAAMzH,EAASrgB,KAAK0iD,kBACpB,GAAIriC,EACA,OAAOA,EAEX,MAAMpgB,EAAQD,KAAKC,MACb/K,EAAU8K,KAAK9K,QAAQ4c,WAAW9R,KAAKmJ,cACvCwC,EAAOzW,EAAQurC,SAAWxgC,EAAM/K,QAAQwM,WAAaxM,EAAQyQ,WAC7DA,EAAa,IAAI2W,GAAWtc,KAAKC,MAAO0L,GAI9C,OAHIA,EAAKsE,aACLjQ,KAAK0iD,kBAAoBnwD,OAAOs1B,OAAOliB,IAEpCA,CACX,CACH,UAAAwD,GACO,OAAOnJ,KAAKohB,WAAaphB,KAAKohB,SApI3B/R,GAoI2DrP,KAAKC,MAAMkJ,aApIhD,CACzB41C,QAmIuF/+C,KAlIvFyhD,aAkI6FzhD,KAAK2iD,cAjIlGrwD,KAAM,YAkIV,CACA,QAAA4wD,CAASlhD,EAAS9M,GACd,MAAM,UAAEwjB,GAAexjB,EACjBssD,EAAca,GAA2B3pC,EAAW,cAAe1Y,KAAMgC,GACzEsF,EAAQ+6C,GAA2B3pC,EAAW,QAAS1Y,KAAMgC,GAC7D2/C,EAAaU,GAA2B3pC,EAAW,aAAc1Y,KAAMgC,GAC7E,IAAI2K,EAAQ,GAIZ,OAHAA,EAAQ6xC,GAAa7xC,EAAO+xC,GAAc8C,IAC1C70C,EAAQ6xC,GAAa7xC,EAAO+xC,GAAcp3C,IAC1CqF,EAAQ6xC,GAAa7xC,EAAO+xC,GAAciD,IACnCh1C,CACX,CACA,aAAAw2C,CAAc1B,EAAcvsD,GACxB,OAAOmsD,GAAwBgB,GAA2BntD,EAAQwjB,UAAW,aAAc1Y,KAAMyhD,GACrG,CACA,OAAA2B,CAAQ3B,EAAcvsD,GAClB,MAAM,UAAEwjB,GAAexjB,EACjBmuD,EAAY,GAalB,OAZA7vD,EAAKiuD,GAAez/C,IAChB,MAAMw9C,EAAW,CACbC,OAAQ,GACR9yC,MAAO,GACP+yC,MAAO,IAEL4D,EAAShC,GAAkB5oC,EAAW1W,GAC5Cw8C,GAAagB,EAASC,OAAQf,GAAc2D,GAA2BiB,EAAQ,cAAetjD,KAAMgC,KACpGw8C,GAAagB,EAAS7yC,MAAO01C,GAA2BiB,EAAQ,QAAStjD,KAAMgC,IAC/Ew8C,GAAagB,EAASE,MAAOhB,GAAc2D,GAA2BiB,EAAQ,aAActjD,KAAMgC,KAClGqhD,EAAU5sD,KAAK+oD,EAAS,IAErB6D,CACX,CACA,YAAAE,CAAa9B,EAAcvsD,GACvB,OAAOmsD,GAAwBgB,GAA2BntD,EAAQwjB,UAAW,YAAa1Y,KAAMyhD,GACpG,CACA,SAAA+B,CAAU/B,EAAcvsD,GACpB,MAAM,UAAEwjB,GAAexjB,EACjBitD,EAAeE,GAA2B3pC,EAAW,eAAgB1Y,KAAMyhD,GAC3ExC,EAASoD,GAA2B3pC,EAAW,SAAU1Y,KAAMyhD,GAC/DW,EAAcC,GAA2B3pC,EAAW,cAAe1Y,KAAMyhD,GAC/E,IAAI90C,EAAQ,GAIZ,OAHAA,EAAQ6xC,GAAa7xC,EAAO+xC,GAAcyD,IAC1Cx1C,EAAQ6xC,GAAa7xC,EAAO+xC,GAAcO,IAC1CtyC,EAAQ6xC,GAAa7xC,EAAO+xC,GAAc0D,IACnCz1C,CACX,CACH,YAAA82C,CAAavuD,GACN,MAAMsQ,EAASxF,KAAKsZ,QACd/Q,EAAOvI,KAAKC,MAAMsI,KAClBw6C,EAAc,GACdC,EAAmB,GACnBC,EAAkB,GACxB,IACItvD,EAAGC,EADH6tD,EAAe,GAEnB,IAAI9tD,EAAI,EAAGC,EAAM4R,EAAO1R,OAAQH,EAAIC,IAAOD,EACvC8tD,EAAahrD,KAAKmoD,GAAkB5+C,KAAKC,MAAOuF,EAAO7R,KAkB3D,OAhBIuB,EAAQud,SACRgvC,EAAeA,EAAahvC,QAAO,CAAC8B,EAASjgB,EAAOoG,IAAQxF,EAAQud,OAAO8B,EAASjgB,EAAOoG,EAAO6N,MAElGrT,EAAQwuD,WACRjC,EAAeA,EAAal3B,MAAK,CAACpzB,EAAGC,IAAIlC,EAAQwuD,SAASvsD,EAAGC,EAAGmR,MAEpE/U,EAAKiuD,GAAez/C,IAChB,MAAMshD,EAAShC,GAAkBpsD,EAAQwjB,UAAW1W,GACpD+gD,EAAYtsD,KAAK4rD,GAA2BiB,EAAQ,aAActjD,KAAMgC,IACxEghD,EAAiBvsD,KAAK4rD,GAA2BiB,EAAQ,kBAAmBtjD,KAAMgC,IAClFihD,EAAgBxsD,KAAK4rD,GAA2BiB,EAAQ,iBAAkBtjD,KAAMgC,GAAS,IAE7FhC,KAAK+iD,YAAcA,EACnB/iD,KAAKgjD,iBAAmBA,EACxBhjD,KAAKijD,gBAAkBA,EACvBjjD,KAAK4iD,WAAanB,EACXA,CACX,CACA,MAAA5lC,CAAOyY,EAASgiB,GACZ,MAAMphD,EAAU8K,KAAK9K,QAAQ4c,WAAW9R,KAAKmJ,cACvC3D,EAASxF,KAAKsZ,QACpB,IAAI/T,EACAk8C,EAAe,GACnB,GAAKj8C,EAAO1R,OAML,CACH,MAAMg8B,EAAWouB,GAAYhpD,EAAQ46B,UAAUp9B,KAAKsN,KAAMwF,EAAQxF,KAAKwiD,gBACvEf,EAAezhD,KAAKyjD,aAAavuD,GACjC8K,KAAKsH,MAAQtH,KAAKkjD,SAASzB,EAAcvsD,GACzC8K,KAAK2/C,WAAa3/C,KAAKmjD,cAAc1B,EAAcvsD,GACnD8K,KAAKg/C,KAAOh/C,KAAKojD,QAAQ3B,EAAcvsD,GACvC8K,KAAK4/C,UAAY5/C,KAAKujD,aAAa9B,EAAcvsD,GACjD8K,KAAKi/C,OAASj/C,KAAKwjD,UAAU/B,EAAcvsD,GAC3C,MAAMmC,EAAO2I,KAAKyiD,MAAQ3D,GAAe9+C,KAAM9K,GACzCyuD,EAAkBpxD,OAAOmO,OAAO,CAAC,EAAGovB,EAAUz4B,GAC9C2pD,EAAYH,GAAmB7gD,KAAKC,MAAO/K,EAASyuD,GACpDC,EAAkB7C,GAAmB7rD,EAASyuD,EAAiB3C,EAAWhhD,KAAKC,OACrFD,KAAKwgD,OAASQ,EAAUR,OACxBxgD,KAAKsgD,OAASU,EAAUV,OACxB/6C,EAAa,CACTg9C,QAAS,EACTzsD,EAAG8tD,EAAgB9tD,EACnBE,EAAG4tD,EAAgB5tD,EACnBqR,MAAOhQ,EAAKgQ,MACZkC,OAAQlS,EAAKkS,OACbs5C,OAAQ/yB,EAASh6B,EACjBgtD,OAAQhzB,EAAS95B,EAEzB,MA5ByB,IAAjBgK,KAAKuiD,UACLh9C,EAAa,CACTg9C,QAAS,IA2BrBviD,KAAK2iD,cAAgBlB,EACrBzhD,KAAKohB,cAAWzf,EACZ4D,GACAvF,KAAK8nB,qBAAqBjM,OAAO7b,KAAMuF,GAEvC+uB,GAAWp/B,EAAQ2uD,UACnB3uD,EAAQ2uD,SAASnxD,KAAKsN,KAAM,CACxBC,MAAOD,KAAKC,MACZ8+C,QAAS/+C,KACTs2C,UAGZ,CACA,SAAAwN,CAAUC,EAAcnhD,EAAKvL,EAAMnC,GAC/B,MAAM8uD,EAAgBhkD,KAAKikD,iBAAiBF,EAAc1sD,EAAMnC,GAChE0N,EAAIiI,OAAOm5C,EAAcpe,GAAIoe,EAAcne,IAC3CjjC,EAAIiI,OAAOm5C,EAAcle,GAAIke,EAAcje,IAC3CnjC,EAAIiI,OAAOm5C,EAAcE,GAAIF,EAAcG,GAC/C,CACA,gBAAAF,CAAiBF,EAAc1sD,EAAMnC,GACjC,MAAM,OAAEsrD,EAAO,OAAEF,GAAYtgD,MACvB,UAAE0gD,EAAU,aAAE52C,GAAkB5U,GAChC,QAAEsY,EAAQ,SAAEG,EAAS,WAAEF,EAAW,YAAEC,GAAiBe,GAAc3E,IACjEhU,EAAGsuD,EAAMpuD,EAAGquD,GAASN,GACvB,MAAE18C,EAAM,OAAEkC,GAAYlS,EAC5B,IAAIuuC,EAAIE,EAAIoe,EAAIre,EAAIE,EAAIoe,EAoCxB,MAnCe,WAAX7D,GACAva,EAAKse,EAAM96C,EAAS,EACL,SAAXi3C,GACA5a,EAAKwe,EACLte,EAAKF,EAAK8a,EACV7a,EAAKE,EAAK2a,EACVyD,EAAKpe,EAAK2a,IAEV9a,EAAKwe,EAAM/8C,EACXy+B,EAAKF,EAAK8a,EACV7a,EAAKE,EAAK2a,EACVyD,EAAKpe,EAAK2a,GAEdwD,EAAKte,IAGDE,EADW,SAAX0a,EACK4D,EAAM3sD,KAAKiC,IAAI8T,EAASC,GAAcizC,EACzB,UAAXF,EACF4D,EAAM/8C,EAAQ5P,KAAKiC,IAAIiU,EAAUD,GAAegzC,EAEhD1gD,KAAK6iD,OAEC,QAAXvC,GACAza,EAAKwe,EACLte,EAAKF,EAAK6a,EACV9a,EAAKE,EAAK4a,EACVwD,EAAKpe,EAAK4a,IAEV7a,EAAKwe,EAAM96C,EACXw8B,EAAKF,EAAK6a,EACV9a,EAAKE,EAAK4a,EACVwD,EAAKpe,EAAK4a,GAEdyD,EAAKte,GAEF,CACHD,KACAE,KACAoe,KACAre,KACAE,KACAoe,KAER,CACA,SAAAnc,CAAUsc,EAAI1hD,EAAK1N,GACf,MAAMoS,EAAQtH,KAAKsH,MACbxT,EAASwT,EAAMxT,OACrB,IAAIsoD,EAAWyD,EAAclsD,EAC7B,GAAIG,EAAQ,CACR,MAAMonD,EAAYhkC,GAAchiB,EAAQiiB,IAAKnX,KAAKlK,EAAGkK,KAAKqH,OAQ1D,IAPAi9C,EAAGxuD,EAAIsrD,GAAYphD,KAAM9K,EAAQ4nC,WAAY5nC,GAC7C0N,EAAImK,UAAYmuC,EAAUnuC,UAAU7X,EAAQ4nC,YAC5Cl6B,EAAIoK,aAAe,SACnBovC,EAAYztC,GAAOzZ,EAAQknD,WAC3ByD,EAAe3qD,EAAQ2qD,aACvBj9C,EAAIyJ,UAAYnX,EAAQqvD,WACxB3hD,EAAIP,KAAO+5C,EAAU1zC,OACjB/U,EAAI,EAAGA,EAAIG,IAAUH,EACrBiP,EAAIyK,SAAS/F,EAAM3T,GAAIunD,EAAUplD,EAAEwuD,EAAGxuD,GAAIwuD,EAAGtuD,EAAIomD,EAAU55C,WAAa,GACxE8hD,EAAGtuD,GAAKomD,EAAU55C,WAAaq9C,EAC3BlsD,EAAI,IAAMG,IACVwwD,EAAGtuD,GAAKd,EAAQ4qD,kBAAoBD,EAGhD,CACJ,CACH,aAAA2E,CAAc5hD,EAAK0hD,EAAI3wD,EAAGunD,EAAWhmD,GAC9B,MAAM4sD,EAAa9hD,KAAK+iD,YAAYpvD,GAC9BsuD,EAAkBjiD,KAAKgjD,iBAAiBrvD,IACxC,UAAEmlD,EAAU,SAAEC,GAAc7jD,EAC5BgqD,EAAWvwC,GAAOzZ,EAAQgqD,UAC1BuF,EAASrD,GAAYphD,KAAM,OAAQ9K,GACnCwvD,EAAYxJ,EAAUplD,EAAE2uD,GACxBE,EAAU7L,EAAYoG,EAAS18C,YAAc08C,EAAS18C,WAAas2C,GAAa,EAAI,EACpF8L,EAASN,EAAGtuD,EAAI2uD,EACtB,GAAIzvD,EAAQ8jD,cAAe,CACvB,MAAM6C,EAAc,CAChB1xC,OAAQ1S,KAAKgC,IAAIs/C,EAAUD,GAAa,EACxC7uC,WAAYg4C,EAAgBh4C,WAC5BC,SAAU+3C,EAAgB/3C,SAC1Be,YAAa,GAEX8wC,EAAUb,EAAU3jC,WAAWmtC,EAAW3L,GAAYA,EAAW,EACjE8L,EAAUD,EAAS9L,EAAY,EACrCl2C,EAAIwJ,YAAclX,EAAQ4vD,mBAC1BliD,EAAIyJ,UAAYnX,EAAQ4vD,mBACxBr7C,GAAU7G,EAAKi5C,EAAaE,EAAS8I,GACrCjiD,EAAIwJ,YAAc01C,EAAWjgD,YAC7Be,EAAIyJ,UAAYy1C,EAAWlgD,gBAC3B6H,GAAU7G,EAAKi5C,EAAaE,EAAS8I,EACzC,KAAO,CACHjiD,EAAI+D,UAAY/T,EAASkvD,EAAW72C,aAAexT,KAAKiC,OAAOnH,OAAOqN,OAAOkiD,EAAW72C,cAAgB62C,EAAW72C,aAAe,EAClIrI,EAAIwJ,YAAc01C,EAAWjgD,YAC7Be,EAAI8kC,YAAYoa,EAAWxb,YAAc,IACzC1jC,EAAI+kC,eAAiBma,EAAWvb,kBAAoB,EACpD,MAAMwe,EAAS7J,EAAU3jC,WAAWmtC,EAAW3L,GACzCiM,EAAS9J,EAAU3jC,WAAW2jC,EAAU5jC,MAAMotC,EAAW,GAAI3L,EAAW,GACxElB,EAAeppC,GAAcqzC,EAAWjK,cAC1CtlD,OAAOqN,OAAOi4C,GAAczL,MAAMv2C,GAAU,IAANA,KACtC+M,EAAI4H,YACJ5H,EAAIyJ,UAAYnX,EAAQ4vD,mBACxBx3C,GAAmB1K,EAAK,CACpB9M,EAAGivD,EACH/uD,EAAG4uD,EACHj7C,EAAGovC,EACHxrC,EAAGurC,EACH3uC,OAAQ0tC,IAEZj1C,EAAIoI,OACJpI,EAAIsI,SACJtI,EAAIyJ,UAAYy1C,EAAWlgD,gBAC3BgB,EAAI4H,YACJ8C,GAAmB1K,EAAK,CACpB9M,EAAGkvD,EACHhvD,EAAG4uD,EAAS,EACZj7C,EAAGovC,EAAW,EACdxrC,EAAGurC,EAAY,EACf3uC,OAAQ0tC,IAEZj1C,EAAIoI,SAEJpI,EAAIyJ,UAAYnX,EAAQ4vD,mBACxBliD,EAAI6J,SAASs4C,EAAQH,EAAQ7L,EAAUD,GACvCl2C,EAAIqiD,WAAWF,EAAQH,EAAQ7L,EAAUD,GACzCl2C,EAAIyJ,UAAYy1C,EAAWlgD,gBAC3BgB,EAAI6J,SAASu4C,EAAQJ,EAAS,EAAG7L,EAAW,EAAGD,EAAY,GAEnE,CACAl2C,EAAIyJ,UAAYrM,KAAKijD,gBAAgBtvD,EACzC,CACA,QAAAuxD,CAASZ,EAAI1hD,EAAK1N,GACd,MAAM,KAAE8pD,GAAUh/C,MACZ,YAAEggD,EAAY,UAAEmF,EAAU,cAAEpF,EAAc,UAAEjH,EAAU,SAAEC,EAAS,WAAE5lB,GAAgBj+B,EACnFgqD,EAAWvwC,GAAOzZ,EAAQgqD,UAChC,IAAIkG,EAAiBlG,EAAS18C,WAC1B6iD,EAAe,EACnB,MAAMnK,EAAYhkC,GAAchiB,EAAQiiB,IAAKnX,KAAKlK,EAAGkK,KAAKqH,OACpDi+C,EAAiB,SAAS55C,GAC5B9I,EAAIyK,SAAS3B,EAAMwvC,EAAUplD,EAAEwuD,EAAGxuD,EAAIuvD,GAAef,EAAGtuD,EAAIovD,EAAiB,GAC7Ed,EAAGtuD,GAAKovD,EAAiBpF,CAC7B,EACMuF,EAA0BrK,EAAUnuC,UAAUo4C,GACpD,IAAI3F,EAAUgG,EAAW74C,EAAOhZ,EAAGs8B,EAAG/7B,EAAM6vC,EAQ5C,IAPAnhC,EAAImK,UAAYo4C,EAChBviD,EAAIoK,aAAe,SACnBpK,EAAIP,KAAO68C,EAASx2C,OACpB47C,EAAGxuD,EAAIsrD,GAAYphD,KAAMulD,EAAyBrwD,GAClD0N,EAAIyJ,UAAYnX,EAAQ8sD,UACxBxuD,EAAKwM,KAAK2/C,WAAY2F,GACtBD,EAAetF,GAA6C,UAA5BwF,EAAoD,WAAdJ,EAAyBpM,EAAW,EAAI5lB,EAAa4lB,EAAW,EAAI5lB,EAAa,EACnJx/B,EAAI,EAAGO,EAAO8qD,EAAKlrD,OAAQH,EAAIO,IAAQP,EAAE,CAUzC,IATA6rD,EAAWR,EAAKrrD,GAChB6xD,EAAYxlD,KAAKijD,gBAAgBtvD,GACjCiP,EAAIyJ,UAAYm5C,EAChBhyD,EAAKgsD,EAASC,OAAQ6F,GACtB34C,EAAQ6yC,EAAS7yC,MACbozC,GAAiBpzC,EAAM7Y,SACvBkM,KAAKwkD,cAAc5hD,EAAK0hD,EAAI3wD,EAAGunD,EAAWhmD,GAC1CkwD,EAAiB3tD,KAAKiC,IAAIwlD,EAAS18C,WAAYs2C,IAE/C7oB,EAAI,EAAG8T,EAAOp3B,EAAM7Y,OAAQm8B,EAAI8T,IAAQ9T,EACxCq1B,EAAe34C,EAAMsjB,IACrBm1B,EAAiBlG,EAAS18C,WAE9BhP,EAAKgsD,EAASE,MAAO4F,EACzB,CACAD,EAAe,EACfD,EAAiBlG,EAAS18C,WAC1BhP,EAAKwM,KAAK4/C,UAAW0F,GACrBhB,EAAGtuD,GAAKgqD,CACZ,CACA,UAAAyF,CAAWnB,EAAI1hD,EAAK1N,GAChB,MAAM+pD,EAASj/C,KAAKi/C,OACdnrD,EAASmrD,EAAOnrD,OACtB,IAAIqrD,EAAYxrD,EAChB,GAAIG,EAAQ,CACR,MAAMonD,EAAYhkC,GAAchiB,EAAQiiB,IAAKnX,KAAKlK,EAAGkK,KAAKqH,OAQ1D,IAPAi9C,EAAGxuD,EAAIsrD,GAAYphD,KAAM9K,EAAQwwD,YAAaxwD,GAC9CovD,EAAGtuD,GAAKd,EAAQ+qD,gBAChBr9C,EAAImK,UAAYmuC,EAAUnuC,UAAU7X,EAAQwwD,aAC5C9iD,EAAIoK,aAAe,SACnBmyC,EAAaxwC,GAAOzZ,EAAQiqD,YAC5Bv8C,EAAIyJ,UAAYnX,EAAQywD,YACxB/iD,EAAIP,KAAO88C,EAAWz2C,OAClB/U,EAAI,EAAGA,EAAIG,IAAUH,EACrBiP,EAAIyK,SAAS4xC,EAAOtrD,GAAIunD,EAAUplD,EAAEwuD,EAAGxuD,GAAIwuD,EAAGtuD,EAAImpD,EAAW38C,WAAa,GAC1E8hD,EAAGtuD,GAAKmpD,EAAW38C,WAAatN,EAAQgrD,aAEhD,CACJ,CACA,cAAA9Y,CAAekd,EAAI1hD,EAAKgjD,EAAa1wD,GACjC,MAAM,OAAEsrD,EAAO,OAAEF,GAAYtgD,MACvB,EAAElK,EAAE,EAAEE,GAAOsuD,GACb,MAAEj9C,EAAM,OAAEkC,GAAYq8C,GACtB,QAAEp4C,EAAQ,SAAEG,EAAS,WAAEF,EAAW,YAAEC,GAAiBe,GAAcvZ,EAAQ4U,cACjFlH,EAAIyJ,UAAYnX,EAAQ0M,gBACxBgB,EAAIwJ,YAAclX,EAAQ2M,YAC1Be,EAAI+D,UAAYzR,EAAQ+V,YACxBrI,EAAI4H,YACJ5H,EAAIgI,OAAO9U,EAAI0X,EAASxX,GACT,QAAXsqD,GACAtgD,KAAK8jD,UAAUQ,EAAI1hD,EAAKgjD,EAAa1wD,GAEzC0N,EAAIiI,OAAO/U,EAAIuR,EAAQsG,EAAU3X,GACjC4M,EAAIijD,iBAAiB/vD,EAAIuR,EAAOrR,EAAGF,EAAIuR,EAAOrR,EAAI2X,GACnC,WAAX2yC,GAAkC,UAAXE,GACvBxgD,KAAK8jD,UAAUQ,EAAI1hD,EAAKgjD,EAAa1wD,GAEzC0N,EAAIiI,OAAO/U,EAAIuR,EAAOrR,EAAIuT,EAASmE,GACnC9K,EAAIijD,iBAAiB/vD,EAAIuR,EAAOrR,EAAIuT,EAAQzT,EAAIuR,EAAQqG,EAAa1X,EAAIuT,GAC1D,WAAX+2C,GACAtgD,KAAK8jD,UAAUQ,EAAI1hD,EAAKgjD,EAAa1wD,GAEzC0N,EAAIiI,OAAO/U,EAAI2X,EAAYzX,EAAIuT,GAC/B3G,EAAIijD,iBAAiB/vD,EAAGE,EAAIuT,EAAQzT,EAAGE,EAAIuT,EAASkE,GACrC,WAAX6yC,GAAkC,SAAXE,GACvBxgD,KAAK8jD,UAAUQ,EAAI1hD,EAAKgjD,EAAa1wD,GAEzC0N,EAAIiI,OAAO/U,EAAGE,EAAIwX,GAClB5K,EAAIijD,iBAAiB/vD,EAAGE,EAAGF,EAAI0X,EAASxX,GACxC4M,EAAI+H,YACJ/H,EAAIoI,OACA9V,EAAQ+V,YAAc,GACtBrI,EAAIsI,QAEZ,CACH,sBAAA46C,CAAuB5wD,GAChB,MAAM+K,EAAQD,KAAKC,MACbuY,EAAQxY,KAAKkd,YACb6oC,EAAQvtC,GAASA,EAAM1iB,EACvBkwD,EAAQxtC,GAASA,EAAMxiB,EAC7B,GAAI+vD,GAASC,EAAO,CAChB,MAAMl2B,EAAWouB,GAAYhpD,EAAQ46B,UAAUp9B,KAAKsN,KAAMA,KAAKsZ,QAAStZ,KAAKwiD,gBAC7E,IAAK1yB,EACD,OAEJ,MAAMz4B,EAAO2I,KAAKyiD,MAAQ3D,GAAe9+C,KAAM9K,GACzCyuD,EAAkBpxD,OAAOmO,OAAO,CAAC,EAAGovB,EAAU9vB,KAAKyiD,OACnDzB,EAAYH,GAAmB5gD,EAAO/K,EAASyuD,GAC/Cv4C,EAAQ21C,GAAmB7rD,EAASyuD,EAAiB3C,EAAW/gD,GAClE8lD,EAAMpqC,MAAQvQ,EAAMtV,GAAKkwD,EAAMrqC,MAAQvQ,EAAMpV,IAC7CgK,KAAKwgD,OAASQ,EAAUR,OACxBxgD,KAAKsgD,OAASU,EAAUV,OACxBtgD,KAAKqH,MAAQhQ,EAAKgQ,MAClBrH,KAAKuJ,OAASlS,EAAKkS,OACnBvJ,KAAK6iD,OAAS/yB,EAASh6B,EACvBkK,KAAK8iD,OAAShzB,EAAS95B,EACvBgK,KAAK8nB,qBAAqBjM,OAAO7b,KAAMoL,GAE/C,CACJ,CACH,WAAA66C,GACO,QAASjmD,KAAKuiD,OAClB,CACA,IAAAlpC,CAAKzW,GACD,MAAM1N,EAAU8K,KAAK9K,QAAQ4c,WAAW9R,KAAKmJ,cAC7C,IAAIo5C,EAAUviD,KAAKuiD,QACnB,IAAKA,EACD,OAEJviD,KAAK8lD,uBAAuB5wD,GAC5B,MAAM0wD,EAAc,CAChBv+C,MAAOrH,KAAKqH,MACZkC,OAAQvJ,KAAKuJ,QAEX+6C,EAAK,CACPxuD,EAAGkK,KAAKlK,EACRE,EAAGgK,KAAKhK,GAEZusD,EAAU9qD,KAAKY,IAAIkqD,GAAW,KAAO,EAAIA,EACzC,MAAMx8C,EAAU2I,GAAUxZ,EAAQ6Q,SAC5BmgD,EAAoBlmD,KAAKsH,MAAMxT,QAAUkM,KAAK2/C,WAAW7rD,QAAUkM,KAAKg/C,KAAKlrD,QAAUkM,KAAK4/C,UAAU9rD,QAAUkM,KAAKi/C,OAAOnrD,OAC9HoB,EAAQurC,SAAWylB,IACnBtjD,EAAIwG,OACJxG,EAAIujD,YAAc5D,EAClBviD,KAAKonC,eAAekd,EAAI1hD,EAAKgjD,EAAa1wD,GAC1CyiB,GAAsB/U,EAAK1N,EAAQsmD,eACnC8I,EAAGtuD,GAAK+P,EAAQC,IAChBhG,KAAKgoC,UAAUsc,EAAI1hD,EAAK1N,GACxB8K,KAAKklD,SAASZ,EAAI1hD,EAAK1N,GACvB8K,KAAKylD,WAAWnB,EAAI1hD,EAAK1N,GACzB+iB,GAAqBrV,EAAK1N,EAAQsmD,eAClC54C,EAAI4G,UAEZ,CACH,iBAAAysC,GACO,OAAOj2C,KAAKsZ,SAAW,EAC3B,CACH,iBAAA48B,CAAkBC,EAAgBkI,GAC3B,MAAMjI,EAAap2C,KAAKsZ,QAClB9T,EAAS2wC,EAAe1hD,KAAI,EAAGJ,eAAeC,YAChD,MAAM+pB,EAAOre,KAAKC,MAAM+iB,eAAe3uB,GACvC,IAAKgqB,EACD,MAAM,IAAInM,MAAM,kCAAoC7d,GAExD,MAAO,CACHA,eACAkgB,QAAS8J,EAAK9V,KAAKjU,GACnBA,QACH,IAECggC,GAAWvgC,EAAeqiD,EAAY5wC,GACtC4gD,EAAkBpmD,KAAKqmD,iBAAiB7gD,EAAQ64C,IAClD/pB,GAAW8xB,KACXpmD,KAAKsZ,QAAU9T,EACfxF,KAAKwiD,eAAiBnE,EACtBr+C,KAAKsmD,qBAAsB,EAC3BtmD,KAAK6b,QAAO,GAEpB,CACH,WAAA6gC,CAAYrjD,EAAGi9C,EAAQI,GAAc,GAC9B,GAAIJ,GAAUt2C,KAAKsmD,oBACf,OAAO,EAEXtmD,KAAKsmD,qBAAsB,EAC3B,MAAMpxD,EAAU8K,KAAK9K,QACfkhD,EAAap2C,KAAKsZ,SAAW,GAC7B9T,EAASxF,KAAK62C,mBAAmBx9C,EAAG+8C,EAAYE,EAAQI,GACxD0P,EAAkBpmD,KAAKqmD,iBAAiB7gD,EAAQnM,GAChDi7B,EAAUgiB,IAAWviD,EAAeyR,EAAQ4wC,IAAegQ,EAWjE,OAVI9xB,IACAt0B,KAAKsZ,QAAU9T,GACXtQ,EAAQurC,SAAWvrC,EAAQ2uD,YAC3B7jD,KAAKwiD,eAAiB,CAClB1sD,EAAGuD,EAAEvD,EACLE,EAAGqD,EAAErD,GAETgK,KAAK6b,QAAO,EAAMy6B,KAGnBhiB,CACX,CACH,kBAAAuiB,CAAmBx9C,EAAG+8C,EAAYE,EAAQI,GACnC,MAAMxhD,EAAU8K,KAAK9K,QACrB,GAAe,aAAXmE,EAAE/G,KACF,MAAO,GAEX,IAAKokD,EACD,OAAON,EAAW3jC,QAAQ9e,GAAIqM,KAAKC,MAAMsI,KAAKzG,SAASnO,EAAEU,oBAA6FsN,IAA5E3B,KAAKC,MAAM+iB,eAAervB,EAAEU,cAAc4qB,WAAWoG,UAAU1xB,EAAEW,SAE/I,MAAMkR,EAASxF,KAAKC,MAAMi1C,0BAA0B77C,EAAGnE,EAAQ+N,KAAM/N,EAASohD,GAI9E,OAHIphD,EAAQxB,SACR8R,EAAO9R,UAEJ8R,CACX,CACH,gBAAA6gD,CAAiB7gD,EAAQnM,GAClB,MAAM,OAAEwpD,EAAO,OAAEC,EAAO,QAAE5tD,GAAa8K,KACjC8vB,EAAWouB,GAAYhpD,EAAQ46B,UAAUp9B,KAAKsN,KAAMwF,EAAQnM,GAClE,OAAoB,IAAby2B,IAAuB+yB,IAAW/yB,EAASh6B,GAAKgtD,IAAWhzB,EAAS95B,EAC/E,EAEJ,IAAIuwD,GAAiB,CACjBt0D,GAAI,UACJgrD,SAAUqF,GACVpE,eACA,SAAAsI,CAAWvmD,EAAOi9C,EAAOhoD,GACjBA,IACA+K,EAAM8+C,QAAU,IAAIuD,GAAQ,CACxBriD,QACA/K,YAGZ,EACA,YAAA2pC,CAAc5+B,EAAOi9C,EAAOhoD,GACpB+K,EAAM8+C,SACN9+C,EAAM8+C,QAAQv9B,WAAWtsB,EAEjC,EACA,KAAAiuB,CAAOljB,EAAOi9C,EAAOhoD,GACb+K,EAAM8+C,SACN9+C,EAAM8+C,QAAQv9B,WAAWtsB,EAEjC,EACA,SAAAuxD,CAAWxmD,GACP,MAAM8+C,EAAU9+C,EAAM8+C,QACtB,GAAIA,GAAWA,EAAQkH,cAAe,CAClC,MAAM5yD,EAAO,CACT0rD,WAEJ,IAGO,IAHH9+C,EAAM6hC,cAAc,oBAAqB,IACtCzuC,EACHq4C,YAAY,IAEZ,OAEJqT,EAAQ1lC,KAAKpZ,EAAM2C,KACnB3C,EAAM6hC,cAAc,mBAAoBzuC,EAC5C,CACJ,EACA,UAAA+pD,CAAYn9C,EAAO5M,GACf,GAAI4M,EAAM8+C,QAAS,CACf,MAAM3uB,EAAmB/8B,EAAKijD,OAC1Br2C,EAAM8+C,QAAQrC,YAAYrpD,EAAK8hB,MAAOib,EAAkB/8B,EAAKqjD,eAC7DrjD,EAAKihC,SAAU,EAEvB,CACJ,EACA1vB,SAAU,CACN67B,SAAS,EACTojB,SAAU,KACV/zB,SAAU,UACVluB,gBAAiB,kBACjB2iD,WAAY,OACZnI,UAAW,CACP35C,OAAQ,QAEZo9C,aAAc,EACdC,kBAAmB,EACnBhjB,WAAY,OACZklB,UAAW,OACXhC,YAAa,EACbd,SAAU,CAAC,EACXiG,UAAW,OACXQ,YAAa,OACbzF,cAAe,EACfD,gBAAiB,EACjBd,WAAY,CACR18C,OAAQ,QAEZijD,YAAa,OACb3/C,QAAS,EACT46C,aAAc,EACdD,UAAW,EACX52C,aAAc,EACdgvC,UAAW,CAACl2C,EAAK+I,IAAOA,EAAKuzC,SAAS7nD,KACtC0hD,SAAU,CAACn2C,EAAK+I,IAAOA,EAAKuzC,SAAS7nD,KACrCytD,mBAAoB,OACpB/E,eAAe,EACf5sB,WAAY,EACZtxB,YAAa,gBACboJ,YAAa,EACbvJ,UAAW,CACPwD,SAAU,IACVC,OAAQ,gBAEZQ,WAAY,CACRjH,QAAS,CACLpM,KAAM,SACNiT,WAAY,CACR,IACA,IACA,QACA,SACA,SACA,WAGRg9C,QAAS,CACLp9C,OAAQ,SACRD,SAAU,MAGlBwT,UAAW6oC,IAEfrY,cAAe,CACXgW,SAAU,OACVC,WAAY,OACZ/C,UAAW,QAEfn7C,YAAa,CACT4D,YAAcZ,GAAgB,WAATA,GAA8B,aAATA,GAAgC,aAATA,EACjEc,YAAY,EACZ2T,UAAW,CACP7T,aAAa,EACbE,YAAY,GAEhBrD,UAAW,CACPsD,WAAW,GAEfW,WAAY,CACRX,UAAW,cAGnBypC,uBAAwB,CACpB,gBAoCR,SAASiY,GAAkBv0D,GACvB,MAAM6yB,EAAShlB,KAAKilB,YACpB,OAAI9yB,GAAS,GAAKA,EAAQ6yB,EAAOlxB,OACtBkxB,EAAO7yB,GAEXA,CACX,CACA,MAAMw0D,WAAsB3pB,GACxBxc,UAAY,WACfA,gBAAkB,CACXzgB,MAAO,CACH5M,SAAUuzD,KAGlB,WAAAnlD,CAAY2Z,GACR0R,MAAM1R,GACLlb,KAAK4mD,iBAAcjlD,EACpB3B,KAAK6mD,YAAc,EACnB7mD,KAAK8mD,aAAe,EACxB,CACA,IAAA1oB,CAAKsO,GACD,MAAMqa,EAAQ/mD,KAAK8mD,aACnB,GAAIC,EAAMjzD,OAAQ,CACd,MAAMkxB,EAAShlB,KAAKilB,YACpB,IAAK,MAAM,MAAE3wB,EAAM,MAAEmyB,KAAYsgC,EACzB/hC,EAAO1wB,KAAWmyB,GAClBzB,EAAOjqB,OAAOzG,EAAO,GAG7B0L,KAAK8mD,aAAe,EACxB,CACAl6B,MAAMwR,KAAKsO,EACf,CACA,KAAAnoB,CAAM6C,EAAK9yB,GACP,GAAIpC,EAAck1B,GACd,OAAO,KAEX,MAAMpC,EAAShlB,KAAKilB,YAEpB,MAxCW,EAAC3wB,EAAOoF,IAAgB,OAAVpF,EAAiB,KAAOkF,EAAY/B,KAAKgB,MAAMnE,GAAQ,EAAGoF,GAwC5EgjC,CADPpoC,EAAQvB,SAASuB,IAAU0wB,EAAO1wB,KAAW8yB,EAAM9yB,EA/C3D,SAAwB0wB,EAAQoC,EAAK9yB,EAAO0yD,GACxC,MAAMpmB,EAAQ5b,EAAOhwB,QAAQoyB,GAC7B,OAAe,IAAXwZ,EAdY,EAAC5b,EAAQoC,EAAK9yB,EAAO0yD,KAClB,iBAAR5/B,GACP9yB,EAAQ0wB,EAAOvuB,KAAK2wB,GAAO,EAC3B4/B,EAAYC,QAAQ,CAChB3yD,QACAmyB,MAAOW,KAEJpuB,MAAMouB,KACb9yB,EAAQ,MAELA,GAKI4yD,CAAYliC,EAAQoC,EAAK9yB,EAAO0yD,GAGpCpmB,IADM5b,EAAOmiC,YAAY//B,GACR9yB,EAAQssC,CACpC,CAwCmEwmB,CAAepiC,EAAQoC,EAAKl0B,EAAeoB,EAAO8yB,GAAMpnB,KAAK8mD,cAC/F9hC,EAAOlxB,OAAS,EAC7C,CACA,mBAAAsrC,GACI,MAAM,WAAElZ,EAAW,WAAEC,GAAgBnmB,KAAKomB,gBAC1C,IAAI,IAAE3sB,EAAI,IAAEC,GAASsG,KAAK0lB,WAAU,GACR,UAAxB1lB,KAAK9K,QAAQqR,SACR2f,IACDzsB,EAAM,GAEL0sB,IACDzsB,EAAMsG,KAAKilB,YAAYnxB,OAAS,IAGxCkM,KAAKvG,IAAMA,EACXuG,KAAKtG,IAAMA,CACf,CACA,UAAAimC,GACI,MAAMlmC,EAAMuG,KAAKvG,IACXC,EAAMsG,KAAKtG,IACX2M,EAASrG,KAAK9K,QAAQmR,OACtBtG,EAAQ,GACd,IAAIilB,EAAShlB,KAAKilB,YAClBD,EAAiB,IAARvrB,GAAaC,IAAQsrB,EAAOlxB,OAAS,EAAIkxB,EAASA,EAAOryB,MAAM8G,EAAKC,EAAM,GACnFsG,KAAK6mD,YAAcpvD,KAAKiC,IAAIsrB,EAAOlxB,QAAUuS,EAAS,EAAI,GAAI,GAC9DrG,KAAK4mD,YAAc5mD,KAAKvG,KAAO4M,EAAS,GAAM,GAC9C,IAAI,IAAIlU,EAAQsH,EAAKtH,GAASuH,EAAKvH,IAC/B4N,EAAMtJ,KAAK,CACPtE,UAGR,OAAO4N,CACX,CACA,gBAAA2mB,CAAiBv0B,GACb,OAAOu0D,GAAkBh0D,KAAKsN,KAAM7N,EACxC,CACH,SAAAuqB,GACOkQ,MAAMlQ,YACD1c,KAAK+sB,iBACN/sB,KAAK2vB,gBAAkB3vB,KAAK2vB,eAEpC,CACA,gBAAA/E,CAAiBz4B,GAIb,MAHqB,iBAAVA,IACPA,EAAQ6N,KAAKukB,MAAMpyB,IAEN,OAAVA,EAAiBszB,IAAMzlB,KAAKyuB,oBAAoBt8B,EAAQ6N,KAAK4mD,aAAe5mD,KAAK6mD,YAC5F,CACA,eAAAh8B,CAAgBv2B,GACZ,MAAMyL,EAAQC,KAAKD,MACnB,OAAIzL,EAAQ,GAAKA,EAAQyL,EAAMjM,OAAS,EAC7B,KAEJkM,KAAK4qB,iBAAiB7qB,EAAMzL,GAAOnC,MAC9C,CACA,gBAAAw8B,CAAiB7lB,GACb,OAAOrR,KAAKgB,MAAMuH,KAAK4mD,YAAc5mD,KAAK2kC,mBAAmB77B,GAAS9I,KAAK6mD,YAC/E,CACA,YAAA/5B,GACI,OAAO9sB,KAAKkG,MAChB,EAuGJ,SAASmhD,GAAkBl1D,EAAOm1D,GAAY,WAAE17B,EAAW,YAAEpkB,IACzD,MAAM4C,EAAMlR,EAAUsO,GAChB6kB,GAAST,EAAan0B,KAAKqE,IAAIsO,GAAO3S,KAAKsF,IAAIqN,KAAS,KACxDtW,EAAS,IAAOwzD,GAAc,GAAKn1D,GAAO2B,OAChD,OAAO2D,KAAKgC,IAAI6tD,EAAaj7B,EAAOv4B,EACxC,CACA,MAAMyzD,WAAwBvqB,GAC1B,WAAAz7B,CAAY2Z,GACR0R,MAAM1R,GACLlb,KAAKpG,WAAQ+H,EACb3B,KAAKnG,SAAM8H,EACX3B,KAAK4mD,iBAAcjlD,EACnB3B,KAAKwnD,eAAY7lD,EAClB3B,KAAK6mD,YAAc,CACvB,CACA,KAAAtiC,CAAM6C,EAAK9yB,GACP,OAAIpC,EAAck1B,KAGE,iBAARA,GAAoBA,aAAet0B,UAAYC,UAAUq0B,GAF1D,MAKHA,CACZ,CACA,sBAAAqgC,GACI,MAAM,YAAEnhD,GAAiBtG,KAAK9K,SACxB,WAAEgxB,EAAW,WAAEC,GAAgBnmB,KAAKomB,gBAC1C,IAAI,IAAE3sB,EAAI,IAAEC,GAASsG,KACrB,MAAM0nD,EAAU7xD,GAAI4D,EAAMysB,EAAazsB,EAAM5D,EACvC8xD,EAAU9xD,GAAI6D,EAAMysB,EAAazsB,EAAM7D,EAC7C,GAAIyQ,EAAa,CACb,MAAMshD,EAAU1vD,EAAKuB,GACfouD,EAAU3vD,EAAKwB,GACjBkuD,EAAU,GAAKC,EAAU,EACzBF,EAAO,GACAC,EAAU,GAAKC,EAAU,GAChCH,EAAO,EAEf,CACA,GAAIjuD,IAAQC,EAAK,CACb,IAAI2M,EAAiB,IAAR3M,EAAY,EAAIjC,KAAKY,IAAU,IAANqB,GACtCiuD,EAAOjuD,EAAM2M,GACRC,GACDohD,EAAOjuD,EAAM4M,EAErB,CACArG,KAAKvG,IAAMA,EACXuG,KAAKtG,IAAMA,CACf,CACA,YAAAouD,GACI,MAAMhpB,EAAW9+B,KAAK9K,QAAQ6K,MAC9B,IACIgoD,GADA,cAAE3rB,EAAc,SAAE4rB,GAAclpB,EAepC,OAbIkpB,GACAD,EAAWtwD,KAAKukC,KAAKh8B,KAAKtG,IAAMsuD,GAAYvwD,KAAKmB,MAAMoH,KAAKvG,IAAMuuD,GAAY,EAC1ED,EAAW,MACXj5C,QAAQC,KAAK,UAAU/O,KAAK/N,sBAAsB+1D,mCAA0CD,8BAC5FA,EAAW,OAGfA,EAAW/nD,KAAKioD,mBAChB7rB,EAAgBA,GAAiB,IAEjCA,IACA2rB,EAAWtwD,KAAKgC,IAAI2iC,EAAe2rB,IAEhCA,CACX,CACH,gBAAAE,GACO,OAAOn1D,OAAO8E,iBAClB,CACA,UAAA+nC,GACI,MAAMh0B,EAAO3L,KAAK9K,QACZ4pC,EAAWnzB,EAAK5L,MACtB,IAAIgoD,EAAW/nD,KAAK8nD,eACpBC,EAAWtwD,KAAKiC,IAAI,EAAGquD,GACvB,MAcMhoD,EA9Ld,SAAyBmoD,EAAmBC,GACxC,MAAMpoD,EAAQ,IAER,OAAEwG,EAAO,KAAE2/B,EAAK,IAAEzsC,EAAI,IAAEC,EAAI,UAAE0uD,EAAU,MAAE5jC,EAAM,SAAEujC,EAAS,UAAEM,EAAU,cAAEC,GAAmBJ,EAC5FK,EAAOriB,GAAQ,EACfsiB,EAAYT,EAAW,GACrBtuD,IAAKgvD,EAAO/uD,IAAKgvD,GAAUP,EAC7BjiC,GAAch0B,EAAcuH,GAC5B0sB,GAAcj0B,EAAcwH,GAC5BivD,GAAgBz2D,EAAcsyB,GAC9B8iC,GAAcoB,EAAOD,IAASJ,EAAY,GAChD,IACI1tC,EAAQiuC,EAASC,EAASC,EAD1BjtB,EAAUvjC,GAASowD,EAAOD,GAAQD,EAAYD,GAAQA,EAE1D,GAAI1sB,EAXgB,QAWU3V,IAAeC,EACzC,MAAO,CACH,CACIh0B,MAAOs2D,GAEX,CACIt2D,MAAOu2D,IAInBI,EAAYrxD,KAAKukC,KAAK0sB,EAAO7sB,GAAWpkC,KAAKmB,MAAM6vD,EAAO5sB,GACtDitB,EAAYN,IACZ3sB,EAAUvjC,EAAQwwD,EAAYjtB,EAAU2sB,EAAYD,GAAQA,GAE3Dr2D,EAAck2D,KACfztC,EAASljB,KAAKkB,IAAI,GAAIyvD,GACtBvsB,EAAUpkC,KAAKukC,KAAKH,EAAUlhB,GAAUA,GAE7B,UAAXpU,GACAqiD,EAAUnxD,KAAKmB,MAAM6vD,EAAO5sB,GAAWA,EACvCgtB,EAAUpxD,KAAKukC,KAAK0sB,EAAO7sB,GAAWA,IAEtC+sB,EAAUH,EACVI,EAAUH,GAEVxiC,GAAcC,GAAc+f,GD/+SpC,SAAqBpwC,EAAGsC,GACpB,MAAM2wD,EAAUtxD,KAAKgB,MAAM3C,GAC3B,OAAOizD,EAAU3wD,GAAWtC,GAAKizD,EAAU3wD,GAAWtC,CAC1D,CC4+S4CkzD,EAAatvD,EAAMD,GAAOysC,EAAMrK,EAAU,MAC9EitB,EAAYrxD,KAAKgB,MAAMhB,KAAKgC,KAAKC,EAAMD,GAAOoiC,EAASksB,IACvDlsB,GAAWniC,EAAMD,GAAOqvD,EACxBF,EAAUnvD,EACVovD,EAAUnvD,GACHivD,GACPC,EAAU1iC,EAAazsB,EAAMmvD,EAC7BC,EAAU1iC,EAAazsB,EAAMmvD,EAC7BC,EAAYtkC,EAAQ,EACpBqX,GAAWgtB,EAAUD,GAAWE,IAEhCA,GAAaD,EAAUD,GAAW/sB,EAE9BitB,EADA3wD,EAAa2wD,EAAWrxD,KAAKgB,MAAMqwD,GAAYjtB,EAAU,KAC7CpkC,KAAKgB,MAAMqwD,GAEXrxD,KAAKukC,KAAK8sB,IAG9B,MAAMG,EAAgBxxD,KAAKiC,IAAIN,EAAeyiC,GAAUziC,EAAewvD,IACvEjuC,EAASljB,KAAKkB,IAAI,GAAIzG,EAAck2D,GAAaa,EAAgBb,GACjEQ,EAAUnxD,KAAKgB,MAAMmwD,EAAUjuC,GAAUA,EACzCkuC,EAAUpxD,KAAKgB,MAAMowD,EAAUluC,GAAUA,EACzC,IAAIsV,EAAI,EAgBR,IAfI/J,IACIoiC,GAAiBM,IAAYnvD,GAC7BsG,EAAMtJ,KAAK,CACPtE,MAAOsH,IAEPmvD,EAAUnvD,GACVw2B,IAEA93B,EAAaV,KAAKgB,OAAOmwD,EAAU34B,EAAI4L,GAAWlhB,GAAUA,EAAQlhB,EAAK4tD,GAAkB5tD,EAAK6tD,EAAYY,KAC5Gj4B,KAEG24B,EAAUnvD,GACjBw2B,KAGFA,EAAI64B,IAAa74B,EAAE,CACrB,MAAMnwB,EAAYrI,KAAKgB,OAAOmwD,EAAU34B,EAAI4L,GAAWlhB,GAAUA,EACjE,GAAIwL,GAAcrmB,EAAYpG,EAC1B,MAEJqG,EAAMtJ,KAAK,CACPtE,MAAO2N,GAEf,CAcA,OAbIqmB,GAAcmiC,GAAiBO,IAAYnvD,EACvCqG,EAAMjM,QAAUqE,EAAa4H,EAAMA,EAAMjM,OAAS,GAAG3B,MAAOuH,EAAK2tD,GAAkB3tD,EAAK4tD,EAAYY,IACpGnoD,EAAMA,EAAMjM,OAAS,GAAG3B,MAAQuH,EAEhCqG,EAAMtJ,KAAK,CACPtE,MAAOuH,IAGPysB,GAAc0iC,IAAYnvD,GAClCqG,EAAMtJ,KAAK,CACPtE,MAAO02D,IAGR9oD,CACX,CA2FsBmpD,CAdkB,CAC5BnB,WACAxhD,OAAQoF,EAAKpF,OACb9M,IAAKkS,EAAKlS,IACVC,IAAKiS,EAAKjS,IACV0uD,UAAWtpB,EAASspB,UACpBliB,KAAMpH,EAASkpB,SACfxjC,MAAOsa,EAASta,MAChB6jC,UAAWroD,KAAKwoC,aAChB5c,WAAY5rB,KAAK+sB,eACjBvlB,YAAas3B,EAASt3B,aAAe,EACrC8gD,eAA0C,IAA3BxpB,EAASwpB,eAEVtoD,KAAKu9B,QAAUv9B,MAajC,MAXoB,UAAhB2L,EAAKpF,QDloTb,SAA4B7L,EAAOhG,EAAQoiB,GAC3C,IAAInjB,EAAGO,EAAM/B,EACb,IAAIwB,EAAI,EAAGO,EAAOwG,EAAM5G,OAAQH,EAAIO,EAAMP,IACtCxB,EAAQuI,EAAM/G,GAAGmjB,GACZ9d,MAAM7G,KACPuC,EAAO+E,IAAMhC,KAAKgC,IAAI/E,EAAO+E,IAAKtH,GAClCuC,EAAOgF,IAAMjC,KAAKiC,IAAIhF,EAAOgF,IAAKvH,GAG9C,CC0nTYg3D,CAAmBppD,EAAOC,KAAM,SAEhC2L,EAAKjY,SACLqM,EAAMrM,UACNsM,KAAKpG,MAAQoG,KAAKtG,IAClBsG,KAAKnG,IAAMmG,KAAKvG,MAEhBuG,KAAKpG,MAAQoG,KAAKvG,IAClBuG,KAAKnG,IAAMmG,KAAKtG,KAEbqG,CACX,CACH,SAAA2c,GACO,MAAM3c,EAAQC,KAAKD,MACnB,IAAInG,EAAQoG,KAAKvG,IACbI,EAAMmG,KAAKtG,IAEf,GADAkzB,MAAMlQ,YACF1c,KAAK9K,QAAQmR,QAAUtG,EAAMjM,OAAQ,CACrC,MAAMuS,GAAUxM,EAAMD,GAASnC,KAAKiC,IAAIqG,EAAMjM,OAAS,EAAG,GAAK,EAC/D8F,GAASyM,EACTxM,GAAOwM,CACX,CACArG,KAAK4mD,YAAchtD,EACnBoG,KAAKwnD,UAAY3tD,EACjBmG,KAAK6mD,YAAchtD,EAAMD,CAC7B,CACA,gBAAA8sB,CAAiBv0B,GACb,OAAO2M,GAAa3M,EAAO6N,KAAKC,MAAM/K,QAAQ8J,OAAQgB,KAAK9K,QAAQ6K,MAAML,OAC7E,EAGJ,MAAM0pD,WAAoB7B,GACtB/mC,UAAY,SACfA,gBAAkB,CACXzgB,MAAO,CACH5M,SAAU4N,GAAMpB,WAAWE,UAGnC,mBAAAu/B,GACI,MAAM,IAAE3lC,EAAI,IAAEC,GAASsG,KAAK0lB,WAAU,GACtC1lB,KAAKvG,IAAM5G,EAAe4G,GAAOA,EAAM,EACvCuG,KAAKtG,IAAM7G,EAAe6G,GAAOA,EAAM,EACvCsG,KAAKynD,wBACT,CACH,gBAAAQ,GACO,MAAMr8B,EAAa5rB,KAAK+sB,eAClBj5B,EAAS83B,EAAa5rB,KAAKqH,MAAQrH,KAAKuJ,OACxC/B,EAActO,EAAU8G,KAAK9K,QAAQ6K,MAAMyH,aAC3C6kB,GAAST,EAAan0B,KAAKqE,IAAI0L,GAAe/P,KAAKsF,IAAIyK,KAAiB,KACxEw8B,EAAWhkC,KAAKqkC,wBAAwB,GAC9C,OAAO5sC,KAAKukC,KAAKloC,EAAS2D,KAAKgC,IAAI,GAAIuqC,EAASxhC,WAAa6pB,GACjE,CACA,gBAAAzB,CAAiBz4B,GACb,OAAiB,OAAVA,EAAiBszB,IAAMzlB,KAAKyuB,oBAAoBt8B,EAAQ6N,KAAK4mD,aAAe5mD,KAAK6mD,YAC5F,CACA,gBAAAl4B,CAAiB7lB,GACb,OAAO9I,KAAK4mD,YAAc5mD,KAAK2kC,mBAAmB77B,GAAS9I,KAAK6mD,WACpE,EAoEkB9lD,GAAMpB,WAAWgB,YAsXjBI,GAAMpB,WAAWE","sources":["webpack://asset-exit-strategies/./node_modules/chart.js/dist/chunks/helpers.segment.js","webpack://asset-exit-strategies/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.4.3\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || typeof value === 'undefined';\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.3\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.3\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["noop","uid","id","isNullOrUndef","value","isArray","Array","type","Object","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","callback","fn","args","thisArg","apply","each","loopable","reverse","i","len","keys","length","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","clone","source","map","target","create","klen","k","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","v","x","o","y","resolveObjectKey","obj","resolver","parts","split","tmp","part","endsWith","push","_splitKey","_getKeyResolver","_capitalize","str","charAt","toUpperCase","defined","isFunction","setsEqual","a","b","size","item","has","PI","Math","TAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","range","roundedRange","round","niceRange","pow","floor","fraction","isNumber","n","isNaN","parseFloat","toRadians","degrees","_decimalPlaces","e","p","_normalizeAngle","_limitValue","min","max","_isBetween","start","end","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","unlistenArrayEvents","array","listener","stub","_chartjs","listeners","splice","forEach","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","_toLeftRightCenter","align","_alignStartEnd","atEdge","t","elasticIn","s","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","sqrt","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","m","d","easeInOutBounce","isPatternOrGradient","color","getHoverColor","saturate","darken","hexString","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","set","getNumberFormat","format","formatters","values","numeric","tickValue","ticks","this","chart","notation","delta","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","assign","logarithmic","remain","significand","includes","Ticks","overrides","descriptors","getScope$1","node","root","scope","Defaults","constructor","_descriptors","_appliers","animation","undefined","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","weight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","describe","override","route","name","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","enumerable","local","appliers","defaults","_scriptable","startsWith","_indexable","_fallback","delay","duration","easing","from","loop","to","properties","active","resize","show","animations","visible","hide","autoPadding","padding","top","right","bottom","left","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","w","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","rotate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","decorateText","line","opts","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","fillStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","translation","textAlign","textBaseline","setRenderOpts","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","h","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","numberOrZero","_readValueToProps","props","ret","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","parseInt","console","warn","toFontString","resolve","inputs","info","cacheable","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","Symbol","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","proxy","prefix","readKey","needsSubResolver","createSubResolver","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","Set","setContext","receiver","isScriptable","getValue","Error","join","add","delete","_resolveScriptable","isIndexable","arr","filter","_resolveArray","_resolveWithContext","allKeys","configurable","scriptable","indexable","_allKeys","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","EPSILON","getComputedStyle","element","ownerDocument","defaultView","positions","getPositionedStyle","styles","suffix","result","pos","useOffsetPos","shadowRoot","getRelativePosition","event","borderBox","boxSizing","paddings","borders","box","touches","offsetX","offsetY","getBoundingClientRect","clientX","clientY","getCanvasPosition","round1","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","property","el","getPropertyValue","getStyle","getRtlAdapter","rtl","rectX","setWidth","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","items","draw","_active","_total","tick","pop","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","transparent","interpolators","boolean","factor","c0","c1","valid","mix","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$shared","$animations","resolveTargetOptions","_createAnimations","anim","all","awaitAll","then","scaleClip","allowedOverflow","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","isPluginEnabled","updateIndex","dataset","getDataset","chooseId","r","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","iAxisKey","vAxisKey","adata","convertObjectDataToArray","isExtensible","defineProperty","base","object","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","l","disabled","toClip","defaultClip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","computeMinSampleSize","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","getAllScaleValues","curr","_length","updateMinAndPrev","getPixelForValue","getPixelForTick","parseValue","entry","startValue","endValue","barStart","barEnd","_custom","parseFloatBar","parseArrayOrPrimitive","isFloatBar","custom","setBorderSkipped","edge","borderSkipped","horizontal","borderProps","enableBorderRadius","parseEdge","orig","v2","startEnd","setInflateAmount","inflateAmount","ratio","BarController","categoryPercentage","barPercentage","grouped","_index_","_value_","super","bars","getBasePixel","isHorizontal","ruler","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","_getStacks","skipNull","val","_getStackCount","_getStackIndex","pixels","barThickness","_startPixel","_endPixel","stackCount","baseValue","minBarLength","actualBase","floating","getDataVisibility","barSign","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","next","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","rects","binarySearch","metaset","lookupMethod","_reversePixels","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","skip","getIntersectItems","useFinalPosition","isPointInArea","inRange","getNearestItems","distanceMetric","useX","useY","pt1","pt2","deltaX","deltaY","getDistanceMetricForAxis","minDistance","getCenterPoint","distance","getNearestCartesianItems","startAngle","endAngle","getProps","angle","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","atan2","getAngleFromPoint","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_angleBetween","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","params","layout","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","getMargins","marginForPositions","fitBoxes","boxes","refitBoxes","refit","changed","fullSize","setBoxDims","placeBoxes","userPadding","placed","stackWeight","layouts","addBox","_layers","z","removeBox","layoutItem","minPadding","availableWidth","availableHeight","layoutBoxes","wrapBoxes","wrap","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","vBoxMaxWidth","hBoxMaxHeight","buildStacks","setLayoutDims","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","aspectRatio","releaseContext","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","removeListener","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","native","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","bbWidth","bbHeight","margins","maxHeight","containerSize","containerStyle","containerBorder","containerPadding","clientHeight","getContainerSize","isConnected","Element","tooltipPosition","hasValue","final","newTicks","spacing","majorStart","majorEnd","ceil","offsetFromEdge","getTicksLimit","ticksLength","maxTicksLimit","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","lineValue","getTickMarkLength","getTitleHeight","titleAlign","reverseAlign","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_maxLength","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","init","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","tickOpts","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","minmax","dimension","keepZero","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","determinedMaxTicks","_tickSize","maxScale","maxChart","determineMaxTicks","ticksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","skipMajors","evenMajorSpacing","diff","getEvenSpacing","factors","_factorize","calculateSpacing","avgMajorSpacing","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","gcLen","garbageCollect","valueAt","idx","decimal","getDecimalForPixel","getBaseValue","createTickContext","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","borderDashOffset","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","proto","parentScope","isIChartComponent","itemDefaults","defaultRoutes","routes","propertyParts","sourceName","sourceScope","routeDefaults","registerDefaults","unregister","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","getIndexAxis","datasetDefaults","idMatchesAxis","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","initOptions","chartDefaults","configScales","chartIndexAxis","scaleConf","error","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","hasFunction","needContext","resolverCache","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","getSizeForArea","field","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","timeout","clearTimeout","setTimeout","debounce","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","_isClickEvent","lastEvent","determineLastEvent","getBarBounds","bar","half","skipOrLimit","skipX","skipY","addNormalRectPath","inflateRect","amount","refRect","BarElement","borderRadius","inner","outer","maxW","maxH","parseBorderWidth","maxR","enableBorder","parseBorderRadius","boundingRects","addRectPath","mouseX","mouseY","inXRange","inYRange","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","generateLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","legendItem","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtlHelper","hitbox","_draw","defaultColor","halfFontSize","cursor","textDirection","fontColor","lineCap","lineJoin","lineDash","drawOptions","SQRT2","centerX","yBoxTop","xBoxLeft","drawLegendBox","_textX","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","previous","sameItem","plugin_legend","_element","_args","legend","afterEvent","ci","useBorderRadius","borderCapStyle","borderJoinStyle","Title","_padding","textSize","_drawArgs","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","paddingAndSize","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","centerY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","addedLabels","unshift","addIfString","lastIndexOf","findOrAddLabel","relativeLabelSize","minSpacing","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generationOptions","dataRange","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","niceMin","niceMax","numSpaces","rounded","almostWhole","decimalPlaces","generateTicks$1","_setMinAndMaxByKey","LinearScale"],"sourceRoot":""}