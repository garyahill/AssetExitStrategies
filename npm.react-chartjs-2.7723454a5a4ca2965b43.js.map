{"version":3,"file":"npm.react-chartjs-2.7723454a5a4ca2965b43.js","mappings":"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","sources":["webpack://asset-exit-strategies/./node_modules/react-chartjs-2/dist/index.js"],"sourcesContent":["import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\n\nconst defaultDatasetIdKey = \"label\";\nfunction reforwardRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data) {\n    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"dataset\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"nearest\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"index\", {\n        intersect: true\n    }, false);\n}\n\nfunction ChartComponent(props, ref) {\n    const { height =150 , width =300 , redraw =false , datasetIdKey , type , data , options , plugins =[] , fallbackContent , updateMode , ...canvasProps } = props;\n    const canvasRef = useRef(null);\n    const chartRef = useRef();\n    const renderChart = ()=>{\n        if (!canvasRef.current) return;\n        chartRef.current = new Chart$1(canvasRef.current, {\n            type,\n            data: cloneData(data, datasetIdKey),\n            options: options && {\n                ...options\n            },\n            plugins\n        });\n        reforwardRef(ref, chartRef.current);\n    };\n    const destroyChart = ()=>{\n        reforwardRef(ref, null);\n        if (chartRef.current) {\n            chartRef.current.destroy();\n            chartRef.current = null;\n        }\n    };\n    useEffect(()=>{\n        if (!redraw && chartRef.current && options) {\n            setOptions(chartRef.current, options);\n        }\n    }, [\n        redraw,\n        options\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current) {\n            setLabels(chartRef.current.config.data, data.labels);\n        }\n    }, [\n        redraw,\n        data.labels\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current && data.datasets) {\n            setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n        }\n    }, [\n        redraw,\n        data.datasets\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        if (redraw) {\n            destroyChart();\n            setTimeout(renderChart);\n        } else {\n            chartRef.current.update(updateMode);\n        }\n    }, [\n        redraw,\n        options,\n        data.labels,\n        data.datasets,\n        updateMode\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        destroyChart();\n        setTimeout(renderChart);\n    }, [\n        type\n    ]);\n    useEffect(()=>{\n        renderChart();\n        return ()=>destroyChart();\n    }, []);\n    return /*#__PURE__*/ React.createElement(\"canvas\", Object.assign({\n        ref: canvasRef,\n        role: \"img\",\n        height: height,\n        width: width\n    }, canvasProps), fallbackContent);\n}\nconst Chart = /*#__PURE__*/ forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return /*#__PURE__*/ forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(Chart, Object.assign({}, props, {\n            ref: ref,\n            type: type\n        })));\n}\nconst Line = /* #__PURE__ */ createTypedChart(\"line\", LineController);\nconst Bar = /* #__PURE__ */ createTypedChart(\"bar\", BarController);\nconst Radar = /* #__PURE__ */ createTypedChart(\"radar\", RadarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart(\"doughnut\", DoughnutController);\nconst PolarArea = /* #__PURE__ */ createTypedChart(\"polarArea\", PolarAreaController);\nconst Bubble = /* #__PURE__ */ createTypedChart(\"bubble\", BubbleController);\nconst Pie = /* #__PURE__ */ createTypedChart(\"pie\", PieController);\nconst Scatter = /* #__PURE__ */ createTypedChart(\"scatter\", ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n"],"names":["defaultDatasetIdKey","reforwardRef","ref","value","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","arguments","length","addedDatasets","datasets","map","nextDataset","currentDataset","find","dataset","data","includes","push","Object","assign","cloneData","nextData","ChartComponent","props","height","width","redraw","type","options","plugins","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","destroyChart","destroy","useEffect","chart","nextOptions","setOptions","config","setTimeout","update","role","Chart","forwardRef","createTypedChart","registerables","register","Bar"],"sourceRoot":""}